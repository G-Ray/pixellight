Moin

Damit ihr euch beide schonmal eingewöhnen könnt, habe ich euch hier den 
Aufbau einer neuen .model Datei mitgeschickt, ich denke es sollte ganz 
verständlich sein. Bei einigen Punkten bin ich mir auch noch nicht so 
ganz sicher und hätte gerne eure Meinung dazu gehört.
Den Punkt "Skeleton" braucht ihr euch dabei nicht so genau anzusehen, 
der ist noch genauso wie im alten Format und wird vermutlich nochmal 
komplett überarbeitet werden. Die Strukturen in der Engine werden dann 
ähnlich aussehen.

Die wichtigsten Punkte:

- Chunks:
Die Datei besteht nun aus einzelnen Chunks, dadurch ist das Format 
flexibler und vor allem kompatibler, da Programme immer noch den groben 
Aufbau einer Datei verstehen können und nur unbekannte Chunks ignorieren 
müssen, wenn sich das Format geändert hat.
Wie ihr seht gibt es nun doch Subchunks, dies war einfach notwendig, da 
die Daten nunmal Unterkategorien bilden, und alle anderen Lösungen 
(Parent-IDs) komplizierter und weniger übersichtlich geworden wären.

- Animation-Frame: Ein Animations-Frame enthält wie vorher die 
Geschwindigkeit, aber auch die Nummer des anzuzeigenden Frames. Damit 
habt ihr mehr Flexibilität bei der Definition von Animationen, da die 
Frames einer Animation nicht mehr hintereinander liegen müssen, sondern 
beliebig gewählt werden können. Damit könnte man sich eigentlich das 
Pingpong-Flag sparen und die Frames lieber vom Editor eintragen lassen, 
zumal das auch viel mehr Möglichkeiten bietet - z.B. eine 
PingPong-Animation die sich zur Mitte hin einpendelt oder was auch immer :-)
Der Einfachheit halber könnte man die Animation-Events jetzt auch 
streichen und ebenfalls gleich im Animation-Frame speichern. Nachteile: 
Größerer Speicherverbrauch da in jedem Frame eine weitere Zahl stünde, 
die meistens 0 ist (kein Event), außerdem könnte man pro Frame nur noch 
ein Event auslösen, mit der anderen Möglichkeit wären theoretisch 
mehrere Events pro Frame möglich.

- Trennung von Mesh und Vertexdata
Mesh (Informationen über Dreiecke) und Vertexdata (Vertices, Normals, 
Colors etc) sind nun erstmal voneinander getrennt. Das wird wohl auch in 
der Engine so sein, da es einfach sauberer ist. Dennoch gehören in einem 
Modell natürlich ein Mesh-Chunk und ein VertexData-Chunk eng zusammen, 
was auch so gespeichert wird.

- Mesh
Im Mesh sind die Geometrien gespeichert, die das Modell beschreiben. 
Dabei ist es nun möglich, diese logisch in Objekte zu glieden, wie es 
z.B. der Max-Exporter tun könnte. Dies hat allerdings noch keinen 
wirklich Nutzen und alle Objekte in einem Modell teilen sich die 
Vertex-Daten, es gibt also keine wirkliche Trennung der Objekte (aber 
vielleicht ist das dennoch nützlich).
Ebenfalls in diesem Chunk sind die LOD-Informationen gespeichert, es 
gibt also pro LOD andere Geometrien (also reduzierte Dreiecke, die aber 
mit den gleichen Vertices arbeiten müssen).

- Vertexdata
Hier sind nun endlich die Vertex-Daten gespeichert. Dieser Teil 
unterscheidet sich nun erheblich vom alten Modellformat:
Der Vertexdata-Chunk besteht zunächst aus mehren Frames. Pro Frame 
können beliebig viele Data-Chunks vorliegen, wobei frei ausgewählt 
werden kann, was für ein Typ von Daten vorliegt (z.B. Vertex, Color, 
Normal, Texture, ...) und welcher Channel verwendet werden soll (0..n). 
Um also Texturkoordinaten für die zweite Texturschicht zu speichern wäre 
Typ=TEXCOORD und Channel=1. Durch die Channelnummer wird die Festlegung 
auf eine bestimmte Anzahl pro Typ verhindert (ansonsten hätte es z.B. 
TEXCOORD0 - TEXCOORD4 gegeben), zu hohe Zahlen werden dann einfach 
ignoriert. Damit muß also nichts verändert werden, wenn die Grafikkarten 
besser werden, die Engine kann dann die neuen Funktionen gleich 
ausnutzen :-)
Auch hinzugekommen ist die Angabe, ob und wie ein Frame interpoliert 
werden soll, damit könnten wir also später weitere Arten der 
Interpolation zwischen den Framedaten anbieten. Als Referenz wird der 
letzte Keyframe genommen, ebenso werden nicht definierte Daten eines 
Frames aus dem Keyframe übernommen. Zusätzlich kann noch angegeben 
werden, daß die Daten relativ zum Keyframe definiert sind, das wird 
natürlich für die Vertexanimationen verwendet werden, könnte aber 
theoretisch auch für alle anderen Daten benutzt werden.

- Duplizierung der Vertex-Daten
Es ist nun doch bereits im Modellformat die Duplizierung der Vertices 
vorhanden, genau wir in der alten Version. Ich sehe einfach keine 
Möglichkeit, das sinnvoll zu verhinden, denn leider ist es nicht so 
einfach wie in den "üblichen" Formaten, zumal es jetzt eben nicht nur 
vertex/normal/texcoord gibt, sondern noch beliebig viele Schichten dazu. 
Damit wachsen auch die Kombinationen ins Unendliche, man müßte also pro 
Geometrie-Vertex die Indices für alle Daten angeben, da scheint es mir 
einfacher, bei der Duplizierung zu bleiben.

Puh jetzt ist die Beschreibung viel länger geworden als ich es 
eigentlich wollte :-)
Aber wir müssen ja mit diesem Modellformat hinterher zurechtkommen, 
daher ist das wohl gerechtfertigt. Das Format unterscheidet sich um 
einiges von den üblichen Dateiformaten, da es hauptsächlich auf für 
Grafikkarten optimierte Datenspeicherung ausgelegt ist, im Gegensatz zu 
den "akademischen" Formaten, die meist tolle Datenstrukturen haben, mit 
denen die heutigen Grafikkarten aber leider nichts anfangen können (und 
die z.B. die ganzen Zusatzdaten gar nicht erst anbieten). Die Modelle 
werden also nach wie vor sehr groß werden.

Stefan

