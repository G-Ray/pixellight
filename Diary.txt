/*********************************************************\
 *  General diary for anything non directly per project related
\*********************************************************/



>> 14.07.2011
[CO]
- Moved PLGui, PLInput, PLRenderer, PLMesh, PLScene, PLPhysics, PLSound and PLEngine into the PLBase directory
  -> Until now, the PixelLight base projects were split up into the three different directories "PLBase", "PLGui" and "PLEngine" and it
     was not always clear to me why e.g. "PLGraphics" is a "PLBase"-project while "PLInput" or "PLRenderer" is a "PLEngine"-project altought they
     are basic stuff as well. To simplify the structure of the Git repository, I moved the "PLGui"- and "PLEngine"-projects into the "PLBase"-directory
	 because those project indeed form together the base of PixelLight (no change within the resulting build SDK). Everything else is just optional
	 pluggin-in and therefore within the "PLPlugin"-directory. Those two distinctions should do the trick.



>> 12.07.2011
[CO]
- Moved PLInstall into the tools directory
- Moved PLUpgrade into the tools directory
- Moved "sfk" from the "PLSDK"-directory into the "cmake"-directory (used by "cmake\Modules\FindSFK.cmake")
- Moved "diff" from the "PLSDK"-directory into the "cmake"-directory (used by "cmake\Modules\FindDiff.cmake")
- Moved "VisualStudio"-directory from the "PLSDK"-directory into the "PLTools"-directory
- Moved "FindPixelLight.cmake"-directory from the "PLSDK"-directory into the "PLTools"-directory, this file is now also
  copied into the PL SDK
- Moved this diary from "Diary.txt" into the root directory... this diary was always used for general stuff which didn't fit
  into any other per project diary, so, it's probably right in the root directory...
- Removed "PLSDK"... it's getting really full within the root directory and it's not always clear to me why there are certain detail
  splits so that CMake stuff or general tools are distributed all over the Git repository.
- Updated out-of-date Microsoft HTML Help Compiler (hhc.exe) related information



/*********************************************************\
 *  The entries below are in German only
\*********************************************************/



>> 15.08.2010
[SB]
- Neues Script 'profile' hinzugefügt, welches unter Linux die Umgebungsvariable
  PL_RUNTIME setzt. Bitte Kommentare im Script beachten (nicht ausführen mit
  z.B. "./profile", sondern in aktueller Shell einbinden mit ". ./profile").
- CMake-Scripte: Alle plugins können nun einzeln über eine CMake-Options ein- oder ausgeschaltet werden. Ich habe allerdings
  darauf verzichtet, diese auch noch alle ins maketool einzubauen, dies muss man dann also per Hand z.B. durch Editieren
  von CMakeCache.txt verwenden. Per default sind alle Plugins eingeschaltet, es sei denn es wird 'minimal' verwendet, dann
  werden per Default nur die wichtigsten Plugins gebaut und alle anderen ausgeschaltet. Ebenso gibt es noch ein weiteres Flag,
  um speziell für mobile Geräte zu bauen. Dies kann im maketool per "--mobile" aktiviert werden und sorgt momentan nur
  dafür, dass anstelle des OpenGL-Plugins das OpenGLES-Plugin verwendet wird (hier könnten aber z.B. noch weitere Projekte
  ausgeschlossen werden, die sich momentan noch nicht für mobile Geräte bauen lassen).



>> 29.07.2010
[CO]
- Im "UsedTools"-Verzeichnis liegen nur noch Programme die man unmittelbar so in dieser Form zum Bauen des SDKs
  mit CMake benötigt. Alles andere, was man erst richtig Installieren muss entfernt. In "Readme.txt" steht weiterhin
  mit welchen Versionen wir arbeiten bzw. mit welchen Versionen wir das zum letzten mal getestet haben so das man weis
  was auf jedenfall gehen sollte. Diese ganzen Installierbaren Tools ständig aktuell zu halten macht einfach nur Arbeit
  und das Repository wird durch diese größeren Dateien nur künstlich aufgebläht - und am Ende arbeitet eh wieder jeder
  mit einer anderen Version (was im Grunde auch ok ist)...



>> 08.07.2010
[SB]
- Freetype in External2 hinzugefügt.



>> 01.06.2010
[CO]
SDK Installer:
- Statt "AddToPath" wird nun das aktuellere "EnvVarUpdate" verwendet:
  http://nsis.sourceforge.net/Environmental_Variables:_append%2C_prepend%2C_and_remove_entries#Function_Code
- Dem SDK liegt nun "Microsoft Visual C++ 2008 SP1 Redistributable Package" bei damit im SDK was aktuelles ist
http://nsis.sourceforge.net/VC_8.0_Redistributables
- Es wird nun ähnlich wie bei http://nsis.sourceforge.net/VC_8.0_Redistributables anhand von Uninstall Keys
  geprüft ob VC 2008 Runtimes da sind. Nun klappt der Test auch bei meiner Windows 7 64 Bit Version wo ich
  bisher immer direkt vom PL SDK Installer die Meldung bekam ich müsse Redistributables installieren, obwohl
  diese bereits in Masse da waren. (gib ja leider zig Versionen der Runtime)
  Ich habe hier mal unter Windows XP und Windows 7 alle Runtimes deinstalliert und verschiedene Kombinationen
  ausprobiert - die Erkennung ob die VC Runtime installiert ist, scheint nun ganz ordentlich zu funktionieren.
  Da ich auch eine Abfrage auf "Visual C++ 2008 x86 Runtime - (v9.0.30729)" eingebaut habe, kann ich auch alle
  VC Runtimes deinstallieren, da ich aber die VC Entwicklungsumgebung habe, hab ich trotzdem alles nötige und
  der PL SDK Installer erkennt das nun. :D
- Es wird nun "RequestExecutionLevel highest" gesetzt damit Windows UAC weis woran es ist und nicht in irgendeinen
  Problematischen Fallbackmodus fallen muss. "RequestExecutionLevel user" reicht leider nicht da wir was an der Registry
  ändern - nur bei diesem Modus ist man beim PL SDK Installer starten aufpoppenden UAC Warn Dialog befreit.
- In der PL SDK Installer befinden sich nun auch noch ein paar allgemeine Detail Infos (File Properties)



>> 15.03.2010
[CO]
- Aktuelle Versionen von Doxygen, graphviz, CMake und NSis eingeladen + getestet, geht alles



>> 11.07.2009
[CO]
- "UsedTools": "svn-win32-1.5.0.zip" durch "Slik-Subversion-1.6.3-win32.msi" ersetzt das man einfach nur zu installieren
  braucht ohne das man z.B. per Hand noch Pfad Variablen anpassen muss



>> 20.06.2009
[SB]
- CMake: PL_EXTERNAL_CONFIGURE() für's Cross-Compiling fit gemacht. Wird eine Toolchain benutzt, werden die übergebenen
  Pfade nun automatisch auch an ein configure-Script übergeben, so dass das entsprechende Projekt ebenfalls cross-compiliert
  wird.
- CMake: Die Toolchain-Datei wird nun ebenfalls bei jedem External-Script am Anfang einmal aufgeführt, damit die dort definierten
  Variablen alle automatisch auch in den External-Scripten zur Verfügung stehen.
- CMake: In allen Projekten -march=i686 entfernt, da dies natürlich beim Crosscompilieren für andere Architekturen nicht mehr
  stimmt.
- CMake: Über die Variable NO_INLINE_ASM wird festgelegt, ob im Programm inline-assembler erlaubt ist, oder nicht. Wird
  diese Variable gesetzt, was überlicher Weise in einer Toolchain-Datei passiert, übergibt CMake eine gleichnamige Definition
  (NO_INLINE_ASM) an den Compiler, welche im Code über #ifdef abgefragt werden kann. Dies ist notwendig, damit ein
  Cross-Compilieren für andere (nicht x86) Architekturen möglich ist. An allen Stellen, wo Inline-Assembler eingesetzt wird,
  muss also nun mittels #ifdef diese Option abgefragt werden und immer ein Fallback in C++ hinzugefügt werden, das benutzt wird,
  sobald NO_INLINE_ASM gesetzt wurde.



>> 19.06.2009
[SB]
- CMake: Beim patch von TinyXML fehlte wohl noch eine spätere Änderung. Diese hinzugefügt und Patch aktualisiert.
- CMake: libpng übersetzt nun keine eigene zlib mehr, sondern versucht, die bereits als eigenes External-Projekt vorhandene
  zlib zu verwenden.
- PLGeneral auf Verwendung der neuen Externals umgestellt.
- PLGraphics auf Verwendung der neuen Externals umgestellt.



>> 18.06.2009
[SB]
- CMake: Die External-Scripte haben nun einen Mechanismus, der dafür sorgt, dass eine Aufgabe auch nur noch einmal ausgeführt
  wird, und nicht jedesmal, wenn das Script aufgerufen wird. Wenn also z.B. das 'Configure' für ein External-Projekt einmal
  korrekt durchgelaufen ist, wird es nicht noch einmal wiederholt. Zusätzlich sind die Abhängigkeiten so gewählt, dass
  ein Script, das neu ausgeführt wird, auch alle nachfolgenden Scripte erneut ausführen lässt. Beispiel: Wenn 'Configure'
  neu ausgeführt werden musste, werden automatisch auch 'Build' und 'Install' ausgeführt, weil diese von 'Configure' abhängig
  sind. Als weitere Abhängigkeit ist jedes External-Script von sich selbst abhängig. Wenn also z.B. die Datei ExternalFetch.cmake
  verändert wird, führt dies automatisch dazu, dass beim nächsten Build das Target 'Fetch' erneut ausgeführt wird (und
  danach alle weiteren Aufgaben dieses Externals, da 'Fetch' am Anfang der Kette steht). Dieses Verhalten dürfte nun so sein,
  wie man es von Projekten generell erwartet. Nachdem die Externals alle einmal erfolgreich gebaut wurden, dürften nun also
  alle Projekte als 'aktuell' gelten und nicht mehr neu ausgeführt werden, solange bis sich irgend etwas an den External-Scripten
  ändert.
- CMake: Die External-Scripte definieren nun Variablen für das Einbinden der erstellten Bibliotheken, z.B. TINYXML_INCLUDE_DIR
  und TINYXML_LIBRARIES. Diese können in den Projekten verwendet werden, in denen diese Bibliotheken verwendet werden, wodurch
  automatisch die richtige Datei und Version verwendet werden sollte. Damit dürfte einiges an IF/ELSE aus den Projekten
  verschwinden, da dies nun bereits im jeweiligen External-Projekt erledigt wurde. Ein Projekt sollte zusätzlich eine
  Dependency zu dem External-Projekt definieren, dessen libraries es verwendet, damit dies automatisch gebaut wird, bevor
  das abhängige Projekt gebaut werden soll. Damit müsste wieder alles vollautomatisch funktionieren, und man muss eigentlich
  nur einmal "Make" bzw. "Build Project" ausführen, damit alles nacheinander erstellt wird :-)



>> 17.06.2009
[SB]
- CMake: Target 'Clean' bei den Externals hinzugefügt, also z.B. "zlib-Clean" aufrufen, um alle erstellten Dateien
  von zlib zu löschen.
- CMake: Target 'Externals-Clean' ruft die Clean-Targets aller External-Projekte auf.
- CMake: Textausgaben für alle wichtigen Kommandos bei den Externals hinzugefügt. Auf der Ausgabe werden nun nur noch diese
  Meldungen angezeigt, die Compilerausgaben, Fehlermeldungen etc. landen statt dessen in einer Logdatei (z.B. 'Build.log',
  'Configure.log' etc.). Damit kann man dem bauen der externen Bibliotheken besser zusehen, als wenn da ewig lange Ausgaben
  herunterscrollen, die man gar nicht mehr verfolgen kann und die einen eigentlich auch nicht interessieren. Man braucht
  diese Ausgaben eigentlich nur im Fehlerfall, daher werden sie in den genannten Logdateien gespeichert.



>> 15.06.2009
[SB]
- CMake: Habe einen ersten Versuch eingebaut, die Bibliotheken in "External" automatisiert herunterzuladen und zu übersetzen.
  Dafür habe ich einige CMake-Scripte geschrieben, die es erlauben, externe Projekte herunterzuladen, zu konfigurieren
  und schliesslich zu bauen.  Mithilfe dieser Makros können dann Scripte für jede externe Abhängigkeit geschrieben werden,
  was ich für External/Base bereits getan habe. Je nachdem, unter welchem System gebaut wird, werden dann die entsprechenden
  Tools dieses Systems eingesetzt, so dass das Übersetzen unter allen Systemen und Generatoren funktionieren sollte.
  Diese Scripte sollten es für uns einfacher machen, externe Abhängigkeiten zu verwalten und zu pflegen, da wir nicht mehr
  alles per Hand bauen müssen. Mit etwas Glück wird ein einmal geschriebenes Script längere Zeit für eine externe Bibliothek
  funktionieren, solange sich in dem Projekt nicht das Buildsystem ändert. Dadurch dürfte es für uns deutlich einfacher sein,
  aktuelle Versionen einer Bibliothek einzuspielen. Auch das Übersetzen unter verschiedenen Systemen sollte damit deutlich
  weniger Arbeit machen, da dies nun automatisiert passiert. Gerade, wenn wir demnächst auch für andere Systeme und
  Hardwareplattformen übersetzen wollen, wäre ein manuelles Übersetzen aller externen Biblbiotheken für jeweils alle
  Plattformen und Betriebssysteme nicht mehr praktikabel.



>> 13.06.2009
[SB]
- CMake: Toolchain-Support eingebaut. Dies wird normaler Weise nicht verwendet, nur wenn man das Projekt cross-compilieren will,
  wird dies benötigt. In diesem Fall kann man dem buildtool-script die Option "--toolchain <name>" übergeben, und dann wird
  das entsprechende Toolchain-File aus dem Verzeichnis cmake/Toolchains/ gelesen. Wie gesagt ist dies nur für's Cross-Compiling,
  solange man nur auf seinem lokalen System  für dasselbe System übersetzen will hat sich aber nichts geändert.



>> 03.06.2009
[CO]
- "PLInstall" arbeitet nun mit Unicode
- "PLInstall": Ich fand gerade ENDLICH nach längerem Recherieren heraus wie Änderungen an der PATH Umgebungsvariable
  sofort korrekt übernommen werden OHNE das man sein System neustarten muss was ein totales unding ist... "broadcast"
  heist der Trick. Man muss einen "broadcast" abfeuern um bescheitzugeben das sich an der Registry etwas änderte - danach
  werden dlls sofort gefunden OHNE das man das System neustarten musste. Endlich. :D



>> 10.05.2009
[CO]
- "PLInstall": Unter Windows Vista und Windows 7 ist üblicherweise noch keine "PATH"-Variable da und dann schlug das setzen fehlt. Daher wird hier
  nun automatisch in dem Fall eine solche Variable hinzugefügt.
- "PLInstall": VC-Projekt Einstellung "Linker" -> "Manifest File" -> "UAC Execution Level" von "asInvoker" in "requireAdministrator"  geändert.
  Dies ist unter Windows Vista und Windows 7 nötig damit man "HKEY_LOCAL_MACHINE" verändern kann, ansonnsten wird der Zugriff verweigert.
-> Nun funktioniert das hilfreiche "PLInstall.exe" auch auf den neuen Windows Versionen :D



>> 16.04.2008
[SB]
- CMake: Beim Linken der Libraries werden statische Bibliotheken nun nicht mehr "transitiv" auch zu den davon abhängigen Projekten hinzugefügt. Bisher
  war es so, dass wenn DynLibA die statischen Bibliotheken Lib1 und Lib2 verwendete, und App1 wiederum von DynLibA abhängig war, dann automatisch auch
  App1 selbst gegen Lib1 und Lib2 gelinkt wurde. Dies war ja ganz am Anfang, als ich das CMake Build-System einführte, schon ein kleiner Streitpunkt, damals
  bot CMake allerdings noch keine Möglichkeit, dieses Verhalten zu unterbinden, und auch wenn es unnötig war, gab es damit ja keinerlei Probleme :-)
  Da CMake dieses Möglichkeit aber inzwischen bietet, wird dieses Verhalten nun in unseren Projekten standardmäßig abgeschaltet. Dadurch sollten die erstellten
  Bibliotheken und Applikationen etwas kleiner werden. Durch diese Änderung fiel auch an einer Stelle auf, wo die Reihenfolge der Bibliotheken unter Linux
  noch falsch war.



>> 07.02.2008
[CO]
- Fügte im SDK wie besprochen einen "VC2008_Redistributable"-Ordner hinzu in dem "Microsoft.VC90.CRT.manifest", "msvcp90.dll" und "msvcr90.dll"
  liegen (ich hoffe da kommen nicht irgendwann noch ähnliche Dinge hinzu... dann müsste man sich überlegen ob man das anderst Strukturieren will)



>> 24.12.2008
[CO]
- Im SDK Start-Menü befindet sich nun auch ein Eintrag zur PixelLight Website... kam regelmäßig vor das man nach der Addresse gefragt
  wurde obwohl diese auch z.B. in 'SDKBrowser.chm' steht... wir wollen es den Leuten ja so einfach wie möglich machen. *säufts*
- "ReleaseNotes.txt" dem SDK hinzugefügt + Eintrag ins SDK Start-Menüs damit man auch Offline nochmal die Hauptänderungen nachlesen kann
- NSIS: Aktuelle Version "2.42" eingespielt
- CMake: Aktuelle Version "2.6.2" eingespielt
- Doxygen: Aktuelle Version "1.5.7.1" eingespielt
- Der PixelLight SDK Installer prüft nun vor dem Installieren ob bereits eine PixelLight SDK Version installiert ist - wenn ja, so wird
  man gefragt ob man vor dem Installieren die alte Version deinstallieren möchte. War einfacher und viel schneller realisiert als ich dachte. :)



>> 11.12.2008
[CO]
- "NSIS.template.in": Fallunterscheidung für 3ds Max 2008/2009 - man darf nicht beide Exporter in z.B. das
  3ds Max 2008 Verzeichniss kopieren da sonst 3ds Max 2008 meckert das es das Plugin für 3ds Max 2009 nicht
  laden kann. (was auch nachvollziehbar ist :)
  Muss das noch austesten - der Registry Eintrag müsste aber korrekt sein. (hab das hier gerade nachgeprüft)



>> 06.12.2008
[CO]
- Mit "PixelLightWizard" für Visual Studio angefangen.
  -> "http://www.codeguru.com/cpp/v-s/devstudio_macros/customappwizards/article.php/c12775__1/"
     ist ein recht brauchbares Tutorial wie man soetwas angeht. :D
  Beim übersetzen wird der Wizard standardmäßig automatisch nach z.B. "C:\Dokumente und Einstellungen\COfenberg\Eigene Dateien\Visual Studio 2008"
  kopiert. ("PixelLightWizard.ico", "PixelLightWizard.vsdir", "PixelLightWizard.vsz")



>> 13.09.2008
[CO]
- Die 64 Bit VC Projekte nutzen nun die 32 Bit Version von PLProject damit die Projekte sich auch problemlos unter einem 32 Bit
  System übersetzen lassen



>> 07.09.2008
[CO]
- 'pak' in 'zip' umbenannt damit das nicht mehr verwirrt und es gibt nicht wirklich einen Grund für eine solche Umbenennung



>> 31.08.2008
[SB]
- CMake: Möglichkeit eingebaut, um Dateinamen und Target-Namen unterschiedlich zu vergeben. Damit kann z.B. "nppl3d.dll"
  erstellt werden und trotzdem "PLPluginMozilla" als Target-Namen beibehalten werden.
- CMake: Makros für MIDL eingebaut, damit man auch ActiveX-Projekte mit CMake bauen kann. Da ich keinen eingebauten Support
  bei CMake finden konnte (oder dieser nur mit dem VC-Generator funktioniert), habe ich daher ein eigenes Makro geschrieben.
  Das ist sicherlich noch nicht perfekt, aber ich konnte damit unser ActiveX-Control erfolgreich übersetzen :-)



>> 18.08.2008
[SB]
- ReleaseNotes.txt hinzugefügt. Diese Datei wird beim Release veröffentlicht, daher sollten wir uns hier kurzfassen und nur die
  für den User wirklich wichtigen Änderungen auflisten. Ich stelle mir das ungefähr so vor (von CMake abgeschaut, später finden
  wir bestimmt noch unseren eigenen Stil): 

  Changes in PixelLight x.y.z RCn
  - Fix bug XXXX Bug Title
  - Improvement:
  - Feature:
  - Updated library abc to xyz
  - Or another small sentence about what you did

  Ich werde also bspw. nicht hineinschreiben, wenn ich mal wieder alles unter Linux übersetzt habe oder ähnliches - nur Bugs/
  Erweiterungen, die auch wirklich sichtbar sind. Behobene Bugs sollten natürlich rein, aber ruhig recht kurz und falls möglich
  zusammenhängende Bugs sortieren. Alles weitere finden wir in nächster Zeit einfach heraus :-)



>> 17.08.2008
[SB]
- Damit sich die Dateien vernünftig sortieren lassen (alle zu einer Version gehörigen Dateien hintereinander), kommt nun die
  Versionsnummer im Namen zuerst, danach das Paket (z.B. "PixelLight-0.8.0-SDK.exe").
- Neues Paket 'Docs' für die Dokumentation hinzugefügt.
- Neues Target 'Upload': Mittels "make Upload" können die erstellten Pakete damit automatisch per SCP auf unseren Server geladen
  werden. Dies kann natürlich nur funktionieren, solange der gefundene SCP-Client es irgendwie hinbekommt, den richtigen
  Benutzernamen und SSH-Key zu übermitteln. Unter cygwin und Linux sollte dies kein Problem sein, da hier als Benutzername der
  aktuell aktive Benutzer genommen wird und der Key in dessen Home-Verzeichnis. Mit Putty/Windows könnte das schwieriger sein,
  hier kommt es vermutlich darauf an, wie die Session gespeichert wurde - da der Benutzername nicht festgelegt werden kann,
  müßte wohl der Name der Session "pixel-light.de" sein und den entsprechenden Benutzernamen und Key spefizifieren.
  Erfahrungsberichte sind immer willkommen :-)



>> 04.08.2008
[CO]
- Verschob die Lizenz-Texte von 'PLDocs/License' in den PixelLight Grundordner und fügte eine Text-Datei Namens 'COPYING' hinzu.
  Eine Datei mit so einem Namen ist sehr verbreitet, normalerweise steht dort der 'gesammte' Lizenz-Text - das wollte ich aber
  nicht da ich das irgendwie unhandlich finde. Daher steht in 'COPYING' unser 'Standard Lizenz Text' der auch im SDKBrowser und
  auf unsere Homepage steht + verweise in welchen Dateien welcher Lizenz-Text zu finden ist. Ich denke das ist ein ordentlicher
  Kompromiss und von z.B. aus dem SDKBrowser kann man weiterhin komfortabel direkt auf die einzelnen Lizenz-Texte verlinken.



>> 10.07.2008
[SB]
- Habe mich mal etwas genauer mit NSIS beschäftigt und das Install-Script unseren Bedürfnissen angepasst. Es ist tatsächlich
  nicht so schwer, auch wenn die Scriptsprache ziemlich low-level ist und daher etwas fummelig ist. Aber mit etwas Ausprobieren
  und Dokus anschauen ist das recht leicht zu machen. Etwas kniffelig war die Anbindung an CMake, da hier natürlich auch einige
  Variablen und Dateien übergeben werden müssen, das ist aber nun gelöst (siehe Pack-Scripte). Unser Installer ist nun um
  folgende Features reicher:
  - Der Exporter kann automatisch ins 3DMax-Verzeichnis kopiert werden
  - Dateiformate für PixelLight (im Moment nur .scene) können automatisch bei Windows registriert werden. Das ist leider mal wieder
    unnötig kompliziert, denn es reicht offenbar nicht mehr aus, wie früher die Dateiverküpfung unter HKEY_CLASSES_ROOT einzutragen.
    Offenbar speichert der Explorer zusätzlich nochmal die aktuelle Verknüpfung, daher lösche ich diesen Key einfach, falls er
    vorhanden ist.
  - Der SDK-Browser kann automatisch geöffnet werden.
  - Nach dem Installieren wird automatisch PLUpgrade.exe gestartet, wo wir immer die aktuell nötigen Checks und Workarounds
    einbauen, damit es möglichst keine Probleme beim Installieren von PL gibt.
  - VCRedist.exe ist jetzt direkt im Installer enthalten und wird automatisch ausgeführt, wenn die Runtime auf dem Rechner noch
    nicht installiert ist.  Leider konnte ich hier keinen zuverlässigen Test finden, ich hoffe daher, dass es so funktioniert,
	wie ich es jetzt eingebaut habe (es wird geschaut, ob ein bestimmtest Verzeichnis vorhanden ist).



>> 08.07.2008
[SB]
- Alle Plugin-Projekte auf die Verwendung von PLProject umgestellt. Dadurch werden die plugin-Dateien nun automatisch aus
  den Quellen und den darin enthaltenen RTTI-Makros erzeugt. Dadurch muss nun einiges weniger angepasst werden :-)
  PLProject wird in den CMake-Scripten sowie in den VC-Projekten als Post-Build Event ausgeführt, und bisher konnte ich
  keinerlei Probleme auch bei einem kompletten Rebuild feststellen.



>> 07.07.2008
[SB]
- CMake-Tools: Einige Ausgaben hinzufügt, wo diese nicht automatisch vom entsprechenden Modul generiert werden, z.B. beim Suchen
  von Latex, Subversion etc. Es sollte wirklich jedes Programm, das benutzt wird, bei der Ausgabe auftauchen, damit man dann schnell
  feststellen kann, ob ein benötigtes Programm fehlt. Ausserdem die Makros etwas geändert, so dass die CMake-Projekte auch dann
  ohne Fehlermeldung durchlaufen, wenn LaTeX nicht installiert ist - dann fehlen einfach nur die entsprechenden Dokumentationen.
  Allerdings geht dies im Moment noch schief, da die PostBuild-Kommandos immernoch versuchen, die (nicht erzeugte) PDF-Datei zu kopieren.



>> 21.06.2008
[SB]
- Neuer Ordner "PixelLight" mit einer Include-Datei "PixelLight.h" hinzugefügt. In dieser Datei stehen
  Informationen über die Konfiguration von PixelLight, z.B. die aktuelle Version und das verwendete Suffix.
  Nur wenige Projekte (z.B. PLCore) sollten diese Datei direkt einbinden müssen, die anderen greifen auf
  globale Funktionen zurück, um die benötigten Infos abzufragen. Beispielsweise wird dies verwendet, um
  den Namen des Registry-Keys herauszubekommen, der vom aktuell verwendeten Suffix abhängt.
- CMake: Die Datei PixelLight.h wird in CMake automatisch aus PixelLight.h.in erzeugt und muß daher anstelle
  der statischen PixelLight.h im Repository verwendet werden. Darum wird in den entsprechenden Projekten
  nicht PixelLight/ als Include-Verzeichnis verwendet, sondern das aktuelle Ausgabeverzeichnis, in dem die
  Datei PixelLight.h erzeugt wurde.
- PLInstall: Bindet PixelLight.h ein und verwendet das dort angegebene Suffix.
- Installer: Der verwendete Registry-Key hängt nun vom angegebenen Suffix ab, dadurch müßten zwei Installation
  von PixelLight mit unterschiedlichem Suffix nun komplett unabhängig voneinander sein und auch nicht mehr
  Plugins von der jeweils anderen Version laden.



>> 20.06.2008
[SB]
- PixelLight.cmake ins Root-Verzeichnis verschoben.
- PixelLight.cmake beinhaltet nun alle wichtigen Einstellungen für das Erstellen eines Builds.
  Beim Aufruf von CMake, z.B. über das Windows-Gui, lassen sich folgende Einstellungen vornehmen:
  - PL_PROJECT_RELEASE: Sollte auf 'true' gesetzt werden, wenn man vorhat, ein PixelLight-Release oder einen
    Nightly-Build zu erstellen. Ansonsten 'false' für die lokale Entwicklungsversion
  - PL_PROJECT_RELEASE_NIGHTLY: 'true' für Nightly-Builds (verändert nur die Benennung von Paketen, da kommt dann noch
    wie bisher die Revision-Nummer hinein, die bei Releases nicht mehr dazugeschrieben wird)
  - PL_PROJECT_SUFFIX_RELEASE: Suffix der benutzt wird, wenn PL_PROJECT_RELEASE auf 'true' steht
  - PL_PROJECT_SUFFIX_DEVELOPMENT: Suffix der benutzt wird, wenn PL_PROJECT_RELEASE auf false' steht
  Diese Variablen werden im Cache gespeichert und überschreiben damit die Standardwerte aus der PixelLight.cmake, daher
  sollten diese Werte nur innerhalb des CMake-Gui geändert werden und nicht durch Ändern der Datei (es sei denn natürlich,
  man möchte die Standardwerte verändern). Die Versionsnummer ist dagegen keine Cache-Variable, da diese ja nicht pro
  Build geändert werden sollte sondern zur aktuellen Source-Version gehört. Das wird daher in der Datei verändert und
  ins Repository hochgeladen, wie normale Sourcecode-Veränderungen auch.
- CMAKE_BUILD_TYPE wird nun standardmäßig auf "Release" gesetzt, nicht mehr auf Debug. Das macht das bauen von Release-Paketen
  noch ein wenig leichter, nur wenn man seine lokale Development-Version mit CMake bauen will, muss man das am Anfang
  ggf. auf Debug setzen. Und da ich selber immer auf der Kommandozeile arbeite, kann ich das dort auch entsprechend scripten.
- Noch folgende Überprüfungen eingebaut:
  - Nur wenn PL_PROJECT_RELEASE gesetzt ist, lassen sich die Installationspakete bauen
  - Nur wenn PL_PROJECT_RELEASE und PL_PROJECT_RELEASE_NIGHTLY gesetzt sind, lassen ich die Nightly-Targets ausführen
  - Wenn PL_PROJECT_RELEASE gesetzt ist aber gleichzeitig CMAKE_BUILD_TYPE auf 'Debug' steht, bricht cmake mit einer
    Fehlermeldung ab, da ich nicht denke, dass Debug-Pakete sinnvoll sind.
- Das 'maketool' angepasst, damit das wieder genauso komfortabel ist wie die Erstellung über das CMake Gui :-) 



>> 19.06.2008
[SB]
- Variablen umbenannt, damit das einheitlich ist: PROJECT_OUTPUT_DIR -> PROJECT_TARGET_OUTPUT_DIR
  und PROJECT_OUTPUT_NAME -> PROJECT_TARGET_OUTPUT_NAME.
- In PL_PROJECT zusätzliche Variablen hinzugefügt für die statische Version einer Bibliothek: PROJECT_TARGET_STAT,
  PROJECT_TARGET_STAT_OUTPUT_DIR, PROJECT_TARGET_STAT_OUTPUT_NAME und PROJECT_TARGET_STAT_STATIC_LIB
- PL_SET_PROPERTIES um ein Flag "STAT" erweitert. Wird dieses angegeben, so wird die statische Version des
  Projektes benutzt.
- Bei dem Versuch, gleichzeitig eine dynamische und eine statische Version von PLGeneral zu erzeugen, mußte ich
  feststellen, dass ADD_DEFINITIONS hier Probleme macht. Anscheinend wird nicht der aktuelle Wert der Definitionen
  zu dem Zeitpunkt benutzt, wenn man z.B. ADD_LIBRARY aufruft, sondern anscheinend wird immer der Wert benutzt, den
  ADD_DEFINITIONS am Ende der Abarbeitung der CMakeLists.txt hat. Damit ist es natürlich nicht möglich, so etwas
  zu machen:
    ADD_DEFINITIONS(...)
    ADD_LIBRARY(PLGeneral SHARED ...)
    REMOVE_DEFINITIONS(-D_USRDLL -D_WINDLL -DPLGENERAL_EXPORTS)
    ADD_DEFINITIONS(-DPLGENERAL_STATIC)
    ADD_LIBRARY(PLGeneral_stat STATIC ...)
  Deswegen mußte ich nun auch für ADD_DEFINITIONS eine eigene Version schreiben (ADD_COMPILE_DEFS), die genauso wie schon
  bei den Compiler- und Linkerflags alles in einer Variable speichert und dann später in PL_SET_PROPERTIES den entsprechenden
  Property (COMPILE_DEFINITIONS) des aktuellen Targets setzt. Das scheinen alles Überbleibsel aus alten Zeiten bei
  CMake zu sein, die aber wegen Kompatibilität drin bleiben. Die neue Art scheint sowieso zu sein, alles über
  Target-Properties zu setzen, von daher ist es auch gut, wenn wir das konsequent machen.
- Zwei (interne) Makros hinzugefügt: ADD_TO_LIST und REMOVE_FROM_LIST. Diese werden in den anderen Makros verwendet,
  damit man nicht alles doppelt und dreifach machen muss.
- Zu allen ADD_-Makros ein entsprechendes REMOVE_-Makros hinzugefügt: REMOVE_SOURCES, REMOVE_LIBS, REMOVE_COMPILE_DEFS,
  REMOVE_COMPILE_FLAGS, REMOVE_LINKER_FLAGS
- Es wird nun eine dynamische und eine statische Version von PLGeneral erzeugt. Mir ist allerdings noch nicht ganz klar,
  warum die statische Version gleich 9MB (!) groß wird ...
- In allen Projekte ADD_DEFINITIONS durch ADD_COMPILE_DEFS ersetzt.
- ADD_DVI_DOCUMENT: Es werden nun die Optionen -quiet und -halt-on-error für LaTeX verwendet. Dadurch sollte keine
  Tastatureingabe mehr erforderlich sein, wenn mal ein Fehler im Dokument ist, sondern einfach mit einem Fehler abgebrochen
  werden. Dann kann zwar immernoch kein Paket gebaut werden, weil ja nicht alle Projekte fehlerfrei erzeugt werden konnten,
  aber zumindest hält der Prozess nicht einfach an sondern geht mit einem Fehler zu Ende, wie es sein sollte. Hoffentlich
  verhält sich das LaTeX unter Linux identisch ;-)



>> 17.06.2008
[SB]
- Zwei neue Makros hinzugefügt: ADD_SOURCES und ADD_LIBS. Mit diesen Makros werden die angegebenen Dateien den
  Projekt-Sourcen oder Projekt-Libs hinzugefügt, also die entsprechende Variable erweitert. Damit ist die Verwendung
  analog zu z.B. ADD_DEFINITIONS oder anderen CMake-Makros, in denen ebenfalls die übergebenen Werte hinzugefügt werden,
  ohne dass die alten Werte überschrieben werden. Bisher konnte es leicht passieren, dass man beim Erweitern von z.B.
  PROJECT_SOURCES oder PROJECT_LIBS vergisst, den vorherigen Inhalt der Variablen durch ${PROJECT_SOURCES} zu übernehmen,
  dadurch wurde dann der Inhalt der Liste komplett überschrieben was zumeist zu merkwürdigen Fehlern beim Compilieren führt.
- Neues Makro: PL_SET_PROPERTIES. Setzt die Properties OUTPUT_NAME, COMPILE_FLAGS und LINK_FLAGS vom angegebenen Target
  auf die PL-Variablen (z.B. PROJECT_OUTPUT_NAME). Da dies in jedem Projekt wieder das gleiche war, kann man auch das
  noch verkürzen :-) 
- DocTools.cmake hinzugefügt: Diese Datei enthält Makros für die typischen Dokumentations-Projekte, also z.B. für
  LaTeX, Doxygen und HHC. Dadurch sehen die Docs-Projekte nun *sehr* übersichtlich aus :-)
- PLSDK/Packages nach cmake/Packages verschoben sowie einige Dateien umbenannt.



>> 16.06.2008
[SB]
- PROJECT entfernt und in PL_PROJECT aufgenommen.
- In allen CMake-Projekten den Aufbau so verändert, dass bei der Unterscheidung von Windows/Linux und Debug/Release möglichst
  keine Wiederholungen mehr vorkommen. Alle Einstellungen, die gleich sind, werden daher jetzt als erstes gesetzt, danach
  erst kommt wenn überhaupt noch nötig eine Fallunterscheidung. Das hat manche Dateien gleich um ca. 100 Zeilen verkürzt.



>> 15.06.2008
[SB]
- Verweise auf externe Libraries werden nun immer mit einem absoluten Pfad angegeben, wodurch keine
  Library-Directories mehr angegeben werden müssen. Verweise auf andere PL-Projekte werden nur noch mit
  dem Projektnamen, z.B. "PLGeneral" angegeben, nicht als Dateiname ("PLGeneralD.lib") und auch nicht mit
  dem Debug-Flag ("PLGeneralD.lib" oder "PLGeneralD").
- Neue Targets für Projektgruppen hinzugefügt (z.B. PLGeneral). 
- ADD_DEPENDENCIES werden nun so geschrieben, dass alle Abhängigkeiten in einer Zeile stehen. Dafür wird zusätzlich noch
  die Abhängigkeit von der Projektgruppe hinzugefügt.
- Beim Build kann nun noch zusätzlich ein Suffix gesetzt werden, z.B. "sdk". Wenn das der Fall ist, wird bei allen
  Bibliotheken dieses Suffix an den Dateinamen angehängt, z.B. "PLGeneral-sdk.dll", "PLGui-sdk.dll" etc. Das würde
  es zumindest theoretisch ermöglichen, mehrere Versionen von PL gleichzeitig und unabhängig voneinander auf dem
  gleichen PC zu installieren. Besonders interessant fände ich das, damit man immer ein aktuelles SDK installiert
  haben kann und sich dieses nicht mit der lokalen Entwicklungsversion stört. Wie genau wir das nutzen müssen wir
  aber mal sehen, im Moment wollte ich nur schonmal das Feature an sich implementieren :-)
- Neues Makro PL_PROJECT: Setzt den Namen des Projektes und einige wichtige Variablen, nämlich
  PROJECT_TARGET, PROJECT_OUTPUT_NAME, PROJECT_TARGET_EXECUTABLE, PROJECT_TARGET_SHARED_LIB und PROJECT_TARGET_STATIC_LIB.
  Ausserdem die Makros so verändert, dass der Name des Targets immer nur dem Projektnamen entspricht,
  also z.B. "PLGeneral", während der Dateiname der Ausgabedatei z.B. "PLGeneralD-sdk" ist. Dadurch
  kann ein Projekt immer einem unveränderlichen Namen referenziert werden, auch wenn der Dateiname
  noch einige Suffixes oder andere Veränderungen enthält.  
- PROJECT_TARGET_OUTPUT_DIR wird jetzt auch in PL_PROJECT gesetzt, da dies immer gleich ist und konnte somit aus den ganzen
  Projekten entfernt werden.
- PROJECT_SRC und PROJECT_INC entfernt, da beide ziemlich überflüssig sind. PROJECT_SRC kann direkt durch den wirklichen
  Pfad ersetzt werden, und PROJECT_INC wurde sowieso niemals benutzt.
- Für Pluginprojekte liegt jetzt die Beschreibungsdatei als .plugin.in im Projektverzeichnis. Während des CMake-Aufrufs wird
  diese Datei nach Bin/ kopiert, wobei alle Dateinamen entsprechend der gewählten Konfiguration eingefügt werden, also z.B.
  "PLSoundOpenAL-sdk.dll". Die "fertigen" .plugin-Dateien in Bin/ lasse ich erstmal drin, damit man weiterhin auch ohne CMake
  arbeiten kann. So oft ändert sich da ja nichts, und das muss man zur Zeit dann eben doppelt anpassen. Man könnte sich überlegen,
  das Kopieren/Konfigurieren dieser Dateien auch im VC-Projekt als Pre-Build-Step einzubauen.



>> 01.06.2008
[SB]
- CMake-Projekte überarbeitet und einige Fehler korrigiert. Es läßt sich nun auch unter Windows alles mit CMake übersetzen
  und automatisch ein SDK packen. Es gibt noch einige kleinere Probleme mit den Compiler- und Linkerflags, diese fallen
  jedoch zumindest mit Makefiles nicht ins Gewicht (mit VC-Projekten habe ich es noch nicht ausprobiert).



>> 05.04.2008
[SB]
- Habe einen neuen Ordner hinzugefügt, den wir für unsere Planungen nutzen sollten: "Plans". Hier schreibe ich nun hinein,
  was mir alles so im Hinterkopf an Planungen zu bestimmten Themenbereichen herumschwirrt. In Todo-Listen kann man so etwas
  nicht wirklich hineinbringen, da es einfach zu viel ist, dort alles zu erklären, und mit einem Stichpunkt (z.B.
  "Application-Framework") kann man nicht erklären, was genau man sich darunter vorstellt. Alles per Mail etc. im Vorfeld zu
  erklären fällt auch schwer und geht dann leicht verloren. Daher denke ich, dass eine solche Lösung sehr sinnvoll ist, so
  kann man mal genau aufschreiben, wir man sich eine bestimmte Lösung vorstellt, so dass der andere auch eine Vorstellung
  davon bekommt, wie das gemeint ist. Dann fällt es leichter, gemeinsam ab dieser Lösung zu arbeiten und natürlich die Idee
  gemeinsam zu verändern und anzupassen. Das bringt dann mehr, als wenn dann einer warten muss, bis der andere seine Idee
  umgesetzt hat. Wir sollten hier allerdings nur kurz- und mittelfristige Pläne reinstellen, damit es nicht zu viel wird,
  50 Pläne in der Art "so könnte ich mir das ganz viel Später mal vorstellen" bringen uns sicherlich nichts ;-)
- Plan für "ApplicationFrameworks" hinzugefügt. So stelle ich mir das grobe Design von PixelLight vor, weg von den statischen
  Instanzen in PLEngine und hin zu "Bausteinen", die man für konkrete Applikationen nutzen kann. Die Ansätze sind schon implementiert
  und das klappt so auch schon recht gut, allerdings muss jetzt viel an der Engine umgebaut werden, um da weiter zu kommen.
- Plan für "InputHandler" hinzugefügt. Nach den Umbauarbeiten in PLEngine sollten wir versuchen, diese Lösung zu nutzen, um
  auf Eingabegeräte zuzugreifen. Das dürfte recht schnell gehen, da es eigentlich nicht sehr kompliziert ist und würde sich
  auch prima ins ApplicationFramework-Schema einfügen.



>> 02.03.2008
[CO]
- "Packages/Pack-PL_SDK.cmake" an die PLDocs Änderungen angepasst
- "CMake_Build.txt": "TARGET_ALL" durch "ALL_BUILD" ersetzt, das ist korrekt so Stefan, oder? (konnte kein "TARGET_ALL" finden)



>> 23.02.2008
[CO]
- "Tools/PLKeyGen" und "SDK/Authenticity.h" herausgenommen da wir das bei Open Source nicht mehr brauchen. :D



>> 19.01.2008
[CO]
- "VC8.reg" erweitert: alle String Methoden, alle Singleton Methoden, alle MemoryManager Methoden + globale new,
  new[], delete und delete[] Operatoren



>> 18.01.2008
[CO]
- "UsedTools/htmlhelp/hhc.exe" ins Repository hinzugefügt da innerhalb der Doxygen-Dateien hierauf verwiesen
  wird und dies nicht erst per Hand dort reinkopieren muss bevor man loslegen kann
- "doxygen-1.5.1-p1-setup.exe" durch die aktuellere "doxygen-1.5.4-setup.exe" ersetzt. In
  "PLGeneral/Core/Function.h" bekam ich nun die Doxygen Fehlermeldung das "@Remarks" nicht bekannt sei... dies
  sollte natürlich klein geschrieben werden (scheinbar haben die nun case-sensitive-Tests drinnen)
- Öffnete alle Doxygen-Config Dateien mit dem beiliegenden Wizard und speicherte diese von dort aus wieder damit
  die Dateien aktuell sind (interessanterweise haben die wie es aussieht die umfangreiche Attribut-Dokumentation
  wieder heraus genommen)



>> 17.01.2008
[SB]
- Habe ausgetestet, ob und wie man das Debuggen in Visual Studio beeinflussen kann, um z.B. vereinfachte
  Darstellungen für unsere eigenen Datentypen zu definieren, oder um zu verhindern, dass beim
  schrittweisen Debuggen in bestimmte Funktionen gesprungen wird (z.B. String-Konstruktor). Dies ist
  gar nicht kompliziert und funktioniert für PLGeneral::String bereits recht gut, siehe PLSDK/VisualStudio.



>> 23.11.2007
[CO]
- 'PixelLight_SRShaderLighting.fx': 'offset' Standard Wert ist nun '0.03' anstatt '0.04' da innerhalb des verwendeten
  Scene Renderers dies ebenfalls der Standard Wert ist



>> 07.11.2007
[SB]
- Habe heute bei dem Versuch, ein VC8-Programm auf einem komplett neu aufgesetzen WindowsXP zu installieren, festgestellt, dass es
  nicht ausreicht, die VC8-Runtime-DLLs mit auszuliefern. Es ist auch notwendig, die dazugehörige Manifest-Datei für die Runtime
  hinzuzufügen, da sich Windows ansonsten weigert, die Runtime zu laden. Habe daher die Datei Microsoft.VC80.CRT.manifest hinzugefügt
  und eine entsprechende Installationsanweisung für das VC8-SDK.



>> 26.10.2007
[SB]
CMake Projektdateien:
- Nochmals alle Compilerflags zwischen den VC-Projekten und den CMake-Projekten verglichen und in allen Projekten angepasst.
  Da es relativ schwierig ist zu sehen, welche Compilerflags VC wirklich anwendet, können immer noch einige Unterschiede vorhanden
  sein, ich denke aber dass die wichtigsten Flags nun stimmen sollten. 
- Flag hinzugefügt, damit wchar_t immer als eigenständiger Typ behandelt wird (anstatt in unsigned short umgewandelt zu werden).
- Crosscompile-Scripte portabel gemacht (absolute Pfade entfernt).



>> 23.10.2007
[SB]
CMake Projektdateien:
- Das Installieren der Manifeste wird nur dann eingebaut, wenn das Projekt cross-compiliert wird, denn mit MSVC8 unter
  Windows werden die Manifeste ja vernünftig eingebunden.
- Den ganzen Kram mit dem Aufteilen des Strings für die NSIS-Icons wieder entfernt, weil es letztlich nichts bringt: Zwar kann
  man so den Buffer-Overflow unter CMake verhindern, so dass das Erstellen der Projekte korrekt durchläuft und die entsprechende
  Datei Pack-PL_XXX.cmake-Datei erzeugt wird. In dieser Datei steht der String dann aber wieder zusammengebaut als ganzes drin,
  und sobald zum Erstellen des Paketes dann CPack aufgerufen wird, hat CPack dann den gleichen Buffer-Overflow. Habe daher die
  ganzen Hacks wieder entfernt und in UsedTools eine aktuelle CMake-Version für Windows gelegt, in der dieser Fehler bereits
  behoben ist. Wir müssen also erstmal mit einer Unstable-Version von CMake arbeiten, aber die dürfte eigentlich sehr bald
  offiziell released werden und machte bei mir auch keinerlei Probleme :-)
- CPACK_PACKAGE_ICON wird unverständlicher Weise nicht in einen Windows-Pfad umgewandelt, bei allen anderen Variablen scheint
  das ja zu funktionieren. Mache dies deswegen per Hand, wenn unter Windows und nicht cross-compiliert wird.
- Anpassungen und Korrekturen vorgenommen, damit die Pakete mittels CPack auch unter Windows gebaut werden können.
- In der Variablen PROJECT_SUFFIX wird nun automatisch der Suffix "D" eingetragen, falls im Debug-Mode compiliert wird.
  Dieser Suffix wird nun überall wo es nötig ist benutzt, damit fallen viele IF's weg.
- Die Startmenü-Einträge verweisen nun auch auf die Debug-Dateinamen, falls im Debug-Modus ein Paket erstellt wurde (auch wenn
  dies eigentlich nicht vorkommen sollte).
- Auch unter Windows wird nun CMAKE_BUILD_TYPE als Option bei CMake angezeigt, um zwischen Debug und Release auszuwählen.
- Das SDK mitsamt Docs und Packs kann nun auch unter Windows (aus MSVC heraus) erstellt werden. Damit dürften die Projektdateien
  soweit auch unter Windows brauchbar sein :-)



>> 22.10.2007
[SB]
CMake Projektdateien:
- Projektname für das gesamte Projekt auf "PixelLight" gesetzt.
- Der Name des Targets (PROJECT_TARGET) beinhaltet nun nicht mehr den Suffix für Debug, das Target heißt nun also immer z.B.
  "PLGeneral" statt "PLGeneralD". Dafür gibt es eine weitere Variable PROJECT_OUTPUT_NAME, die den Suffix erhält und die
  immer dann verwendet wird, wenn z.B. auf eine Ausgabedatei direkt zugegriffen werden soll. Mittels SET_TARGET_PROPERTIES
  wird der Output-Name entsprechend gesetzt. Durch diese Änderung ist es nun möglich, auf andere Targets immer mit dem
  gleichen Namen zu verweisen, ohne wieder nach Debug/Release unterscheiden zu müssen (aus anderen Unterprojekten kann
  z.B. immer auf "PLGeneral" verwiesen werden, egal ob es sich gerade um Debug oder Release handelt). Und in der VC-Solution
  sehen die Namen so auch schöner aus :-)
- Die Abhängigkeiten unter den Projekten werden noch einmal explizit angegeben. Dies ist eigentlich unnötig, da CMake die
  Abhängigkeiten automatisch erkennen könnte, indem im Linker-Abschnitt z.B. statt "PLGeneral.lib" der Name des Targets,
  also "PLGeneral" angegeben würde. Dann wird jedoch das Link-Chaining von cmake verwendet, was bedeutet daß alle statischen
  Bibliotheken automatisch auch in allen abhängen Projekten gelinkt wird, also z.B. wird dann in JEDEM Projekt, welches
  auf PLGeneral basiert automatisch auch zlibstat.lib  hinzugelinkt. Das ist blöd und unnötig, aber in der aktuellen Version
  von CMake nicht zu verhindern. Daher gebe ich im Moment lieber die .lib-Dateien an, dann erkennt CMake die Abhängigkeiten nicht
  und linkt auch nichts dazu. Dafür müssen die Abhängigkeiten dann per Hand angegeben werden. Es soll bald eine Erweiterung geben,
  wo man dieses Verhalten von CMake selbst kontrollieren kann, dann sollten wir das wie oben angegeben ändern und die Abhängigkeiten
  wieder entfernen. 
- Der Pfad zum Dot-Tool von GraphViz wird nun in das erzeugte doxyfile eingetragen.
- Makefiles für die Dokumentation angepaßt, es werden nun die entsprechenden CMake-Module zum Auffinden der benötigten Programme
  verwendet, und die Targets werden nur dann erzeugt, wenn die nötigen Programme vorhanden sind. Die Abhängigkeiten wurden deshalb
  ebenfalls in die einzelnen Projekte verschoben.
- Noch ein Hack: hhc.exe arbeitet zwar korrekt, gibt aber trotz erfolgreichem Erstellen der .chm Datei einen Fehlercode zurück,
  weshalb das Bauen der Dokumentation dann natürlich fälschlicher Weise als fehlgeschlagen gilt. Deshalb gibt es das Script
  hhc.cmake, das ebenfalls hhc.exe aufruft aber dann den Rückgabewert ignoriert. 
- API-Docs: Die Doku wurde immer wieder erzeugt, da PROJECT_TARGET_HTML falsch gesetzt war und daher immer als "out-of-date"
  angesehen wurde. Dies wurde behoben, damit wird diese Doku jetzt auch nur noch einmal erzeugt.
- Api-Docs in Docs-Doxygen umbenannt.
- Die gesamte Doku läßt sich nun bequem auch in der VC-Solution erzeugen. Gerade für das Arbeiten mit LaTeX sicherlich praktisch :-)
- Struktur der Unterprojekte angepasst, so dass jedes Unterprojekt nun einen eigenen Namen hat und dementsprechend eine .sln-Datei erzeugt wird.
- Docs und Packs mit dem Flag EXCLUDE_FROM_DEFAULT_BUILD versehen, damit sie nicht gebaut werden, wenn man im VS "Build All" anklickt.



>> 21.10.2007
[SB]
CMake Projektdateien:
- Die aktuelle Revisionsnummer wird nun direkt in cmake ermittelt, welches netterweise schon ein Modul bereitstellt, um mit
  den Commandline-Tools von Subversion zu arbeiten. Werden diese gefunden, so wird darüber die Revisionsnummer ermittelt,
  ansonsten wird Version.Patch auf 0 gesetzt. Damit dies unter Windows funktioniert, müssen die Subversion Commandline-Tools
  installiert werden und ebenfalls noch eine ssh.exe dafür bereitgestellt werden (siehe UsedTools).
- Perl-Script zum Auslesen der Revisionsnummer entfernt. 
- Mußte das Makro ADD_NSIS_ICON für CPack wieder entfernen, da das Makro die Escape-Codes auffrißt und mir \\\\ wirklich schon
  reicht und das daher nicht noch ein weiteres Mal escapen will. Dies in ein Bug in CMake, wenn der behoben ist können wir das
  Makro wieder nutzen, damit alles wieder kleiner und übersichtlicher wird.
- Das PixelLight-Logo wird nun im Installer angezeigt.



>> 20.10.2007
[SB]
CMake Projektdateien:
- Definition MSVC8 durch MSVC80 ersetzt, welche auch von CMake unter Windows verwendet wird.
- Im Makro für die Linker-Flags werden nun auch die Variablen CMAKE_EXE_LINKER_FLAGS und CMAKE_SHARED_LINKER_FLAGS
  verändert, die bei der Compilierung unter Windows verwendet werden.
- Die Linker-Flags /IMPLIB und /MACHINE entfernt, da diese inzwischen automatisch von cmake gesetzt werden.
- Kleines Script eingefügt, das unter Windows nach dem Installationspfad von MSVC sucht und dieses in VCInstallDir speichert.
  Diese Variable wird verwendet, um bei den Include-Pfaden den Pfad zum Platform-SDK angeben zu können.
- Für CPack: Makro ADD_NSIS_ICON hinzugefügt. Ansonsten gab es unter Windows einen Fehler, da der String zu groß wurde.



>> 15.10.2007
[SB]
- CMake-Projektdateien überarbeitet und an die neue Cross-Compiling-Funktionalität von CMake angepasst. Um diese nutzen zu können, wird eine
  neuere Version von CMake (CMake 2.5) benötigt, die es zur Zeit noch nur im CVS gibt. Dies ist jedoch nur nötig, um das Cross-Compiling nutzen
  zu können, ansonsten reicht auch die stable-Version von CMake aus, um das Projekt z.B. nur unter Linux zu übersetzen.
- Die Projekte sind nun so geschrieben, dass sowohl In-Source-Builds als auch Out-Source-Builds möglich sind. Out-Source-Builds funktionieren so,
  dass der gesamte Build-Tree in einem separaten Verzeichnis aufgebaut wird (z.B. build-Linux-Debug), dadurch werden die Source-Verzeichnisse
  nicht mehr mit unnötigen Dateien belastet. Außerdem können dadurch verschiedene Builds gleichzeitig gepflegt werden (z.B. Linux und Windows),
  man muss also nicht mehr alles neu bauen, wenn man wieder für die andere Architektur übersetzen möchte, sondern kann bequem nur die Änderungen
  für beide Architekturen übersetzen lassen. In-Source-Builds sind dennoch weiterhin möglich, da dies evtl. die Arbeit mit einigen IDEs
  erleichtert oder aus anderen Gründen einmal nötig sein könnte.
- Die Post-Build-Kommandos in den einzelnen Projekten wurden vereinfacht, wodurch die Dateien auch gleich etwas kürzer wurden, da unnötige
  Unterscheidungen nicht mehr vorgenommen werden. Dafür wurden Variablen eingeführt, in denen nun für jedes Projekt die nötigen Dateinamen
  und Pfade gespeichert werden.
- In den Projekten werden nun so weit wie möglich nur noch absolute Pfade verwendet, da es ansonsten Probleme geben kann, wenn z.B.
  In-Source-Builds statt Out-Source-Builds verwendet werden oder andere Generatoren benutzt werden.
- Die CMake-Projekte wurden so angepasst, dass sie nun generell auch unter Windows zum Generieren der VC-Projektdateien verwendet werden können.
  Im Moment ist dies allerdings noch nicht verwendbar, da die Linker-Einstellungen noch nicht übernommen werden, der Rest ist aber schon
  korrekt.
- Vorbereitungen für das kommende Build-System getroffen, mit dem dann die Projekte automatisch für verschiedene Plattformen übersetzt sowie
  Release-Pakete erstellt werden können.
- Versionsinformationen in den CMake-Projekten hinzugefügt. Diese werden automatisch z.B. beim Erzeugen von Paketen verwendet und können auch an anderer
  Stelle eingebunden werden.
- Projektdateien für die Dokumentation hinzugefügt, hiermit lassen sich über cmake nun alle latex sowie chm-Dokus automatisch erzeugen.
- Das Cross-Compiling-Framework für VC7 und VC8 wurde um das Compilieren von Resourcendateien erweitert.
- Das Cross-Compiling mit VC8 funktioniert nun zumindest für Release-Versionen. Allerdings ist die Wine-Emulation von VC8 alles andere als stabil, daher
  funktionieren bestimmte Compiler-Flags nicht und manche Tools lassen sich erst gar nicht verwenden (z.B. das Manifest-Tool, weshalb es nicht möglich ist,
  Manifeste direkt in .exe oder .dll Dateien einzubinden).
- Alle Projekte ins CMake-Buildsystem eingebunden und falls nötig angepaßt. Alle Projekte lassen sich nun für VC7, VC8 und Linux übersetzen.
- Projekte um Installationsanweisungen erweitert. Mit Hilfe dieser Informationen können verschiedene Releases definiert werden und automatisch die darin
  enthaltenen Dateien festgelegt werden.
- Scripte zum Erstellen von Paketen mittels CPack hinzugefügt. Hiermit können automatisch Pakete und Installer erzeugt werden. Für PL wurden bisher zwei
  Pakete definiert: PL_SDK und PL_Runtime. Diese können nach dem Übersetzen automatisch mittel "make Pack-PL_SDK" und "make Pack-PL_Runtime" erzeugt werden.
- Es werden nun auch die von VC8 erstellen Manifest-Dateien mit installiert, hierfür wurde ein Makro zur Verfügung gestellt
- Script zur Steuerung des Build-Systems hinzugefügt.



>> 13.10.2007
[SB]
PLInstall:
- Das PixelLight-Runtime-Verzeichnisses wird nun nicht mehr in einer Umgebungsvariable gespeichert, sondern direkt in der Registry
  im Key "HKEY_LOCAL_MACHINE\\SOFTWARE\\PixelLight\\PixelLight-SDK".
- Es wird nun nicht mehr der System-Pfad modifiziert, sondern der Pfad des aktuellen Users ("HKEY_CURRENT_USER\Environment").
- Einige kleinere Fehler behoben. 



>> 08.09.2007
[CO]
- "plsdk_overview.gif" durch das aktualsierte "plsdk_overview.png" ersetzt
- "renderer_diagramm.gif" und "PLSound.gif" entfernt da diese Diagramme bereits recht alt und wenig anschaulich sind.
  Diese Details kann man mittlerweile über "PixelLightAPI.chm" besser einsehen.
- Codes der SDK-Tools dem aktuellen "Wissenstand" angepasst :D



>> 07.09.2007
[CO]
- "PixelLight_SRShaderLighting.fx" hinzugefügt. Dies ist ein fx-Shader für 3ds Max damit die Grafiker dort im Viewport die
  Materialien direkt so sehen wie diese mit dem 'SRShaderLighting' Scene Renderer dargestellt werden. Da saß ich nun fast
  eine Woche (nebenbei :) dran damit das soweit alles kann was verlangt ist. Dieser Shader kann momentan noch ein paar
  kleinigkeiten wie z.B. 'DiffuseColor' mehr als dieser Scene Renderer. (Features die als Feedback von den Grafikern kamen
  und nicht allzuviel verlang waren :)
  Das müsste den 'Workflow' nochmal ein gutes Stück verbessern, Jens und Ardi scheinen auf jedenfall total happy zu sein -
  bin mal gespannt ob Material-Technisch nun endlich dadurch mal etwas mehr und Eindrucksvolleres kommt. :D



>> 15.08.2007
[CO]
- Nachdem ich das kurz mit Jens durchgetestet hatte entfernte ich die Debug Versionen der VC 2005 Runtime Dlls. ("msvcp80d.dll"
  und "msvcr80d.dll") Da wir im SDK keine Debug Versionen mehr von PL liegen haben ist das unnötig geworden - und ein Coder
  der mit PL arbeitet hat diese Dlls zwangsläufig wenn er mit VC 2005 arbeitet. :D



>> 29.05.2007
[CO]
Plan.txt: Fügte folgende Punkte beim RTTI hinzu:
- Abgeleitete Klassen sollten Problemlos 'Default'-Einstellungen von Variablen überschreiben können ohne nochmal 'alles' angeben zu müssen
- Abgeleitete Klassen sollten Problemlos bei z.B. 'Flags' oder 'Enums' neue Optionen 'hinzufügen' können ohne nochmal 'alles' angeben zu müssen
... das sind Dinge die mir nun schon einige male negativ auffielen und die Sache irgendwie kompliziert zu handhaben machen
da man bei z.B. kleinen Flag Änderungen immer nochmal alle abgeleiteten Klassen durchgehen muss - das Konzept an sich
sollten wir aber definitiv beibehalten da es sich als 'sehr nützlich' rausgestellt hat. Für z.B. jede kleine 'an/aus'-Option
ein 'bool' wäre absoluter Overhead, vom Speicherverbrauch und auch von der Implementierung/Bedienung her.



>> 27.05.2007
[CO]
CreateSDK.py:
- Die Header der PLDatabase & PLPhysics Implementationen werden mit ins SDK kopiert da die entsprechenden libs sowieso
  schon drinnen waren. Zwar sollte man es vermeiden auf spezielle Dinge bestimmter Implementationen zuzugreifen, aber man
  sollte den User da nicht von vorne wech das verbieten... das muss jeder selbst entscheiden. :)
  Die Header der PLRenderer Implementationen werden allerdings nach wie vor nicht ins SDK kopiert, das geht einfach ZU seher
  an die innereien und hier kann man sehr schnell sehr viel kaputt machen + schränkt sich dann selbst ein.
  Die PLSound Implementations Header werden derzeit nicht ins SDK kopiert da auch keine libs dort liegen, das muss man sich
  später noch überlegen ob das hier sinn macht oder nicht... mir wars gerade erstmal nur wichtig das wenn libs im SDK liegen
  auch die entsprechenden header da sind etc.



>> 11.05.2007
[CO]
- 'Internal/VC-Projects.txt' entfernt. Ab VC8 scheint VC automatisch bei Projekt-ID Konflikten ID's zu ändern so das
  die Projekte immer in der korrekt angegeben Reihenfolgt übersetzt werden -  das selbst zu Managen ist nun also zum Glück
  überflüssig geworden. (das war leicht nervend da selbst immer ein Auge drauf zu haben)
- In 'doxyfile' fehlte noch der PLNetworkIRC Ordner, bestimmte PLNetworkIRC Dateien irgnorieren war aber bereits drinnen



>> 10.05.2007
[CO]
- Sortierte ins Diary so richtig alte Einträge aus "PLSDK/internal/old_diaries.zip" ein
- Fand in meinem altem "Blibs"-Diary (derzeit noch Online unter www.blibs.de) ein paar PixelLight relevante Einträge
  welche die ersten Tage/Monate festhalten in denen wir 'mal schnell nebenbei' eine kleine Engine für Mini-Games
  Entwickeln wollten, das ist nun gut 5 Jahre her - so, nun müsste ich aber alle alten Diary-Einträge aus der Mottenkiste
  rausgewühlt haben. *g*
- "PLSDK/internal/old_diaries.zip" entfernt da nun alle Tagebücher beisammen sind



>> 09.05.2007
[CO]
- Alte Diary Einträge von ab "13.02.04" einsortiert



>> 24.03.2007
[CO]
- Automatische PixelLightAPI Doku: Fügte noch einige Header hinzu welche in der Dokumentation ignoriert werden sollen
  da nur intern Implemementations relevant.



>> 20.03.2007
[CO]
- PixelLightAPI: In der automatischen gesammt Dokumentation befinden sich nun nur noch die Kern-Projekte. Backends/Plugins
  sind dort nicht mehr drinnen da es einfach zu unübersichtlich und überladen wird... gerade bei den Backends sind das
  überflüssige Informationen da der User damit nie in Kontakt kommt bzw. kommen sollte.



>> 02.03.2007
[CO]
Sortierte das SDK nach Stefans Vorschlag um



>> 28.02.2007
[SB]
- CMake-Projekt für die doxygen-Dokumentation hinzugefügt. Im globalen CMake-File wird das zwar mit eingebunden, ist aber kein default-target, wird also nicht automatisch bei make mit ausgeführt. Um die Doku zu erzeugen, muß daher 'make API-Docs' aufgerufen werden. Auf meinem Rechner habe ich es so eingerichtet, daß mittels wine auch noch der CHM-Compiler aufgerufen wird - das kopiere ich sobald alles klappt auf den Server, bis dahin wäre es zu
viel Aufwand den ganzen wine-Kram auch noch ins Repository hochzuladen



>> 26.02.2007
[SB]
- Fügte bei den Projekten, die als Win32-Konsolenapplikation compiliert werden, die Präprozessordefinition _CONSOLE in den
  CMake-Projekten hinzu



>> 24.02.2007
[SB]
Projekte lassen sich wieder mit VC7 übersetzen



>> 22.02.2007
[CO]
PLKeyGen:
- scanf kann keinen Buffer Überlauf mehr erzeugen (das Projekt ist zwar nur für uns, aber was solls *g*)
- Fügte dem PLTestBase VC 2005 Projekt die Compiler Optionen "/D "_CRT_SECURE_NO_DEPRECATE"" ein damit keine unnötigen
  Warnungen kommen



>> 13.02.2007
[SB]
- CMake Projektdateien nach 'cmake' verschoben und die weiteren Dateien hinzugefügt, die zum Erstellen des Projektes benötigt werden.



>> 11.02.2007
[CO]
- Auf VC 2005 umgestellt



>> 29.01.2007
[CO]
- 'PixelLight.sln' an PLTools VC Projekt Änderungen angepasst



>> 28.01.2007
[CO]
- VC Projekt-Dateien wie besprochen in die jeweiligen Grundordner verschoben



>> 27.01.2007
[SB]
- CMake Projektdateien für alle PLSDK-Projekte hinzugefügt 



>> 26.08.06
[CO]
- PLInstall arbeitet nun mit GetModuleFileName() so das es unabhängig vom aktuellen Arbeits-Verzeichniss ist... denn wird
  der Installer z.B. direkt aus dem SDK Browser gestartet stimmt das Arbeits-Verzeichniss nicht.



>> 25.08.06
[CO]
- Auf Doxygen 1.4.7 'umgestellt'. Dort wo nötig korrigierte ich in allen Projekten fehlerhafte Kommentare. (was Doxygen anmeckerte :)
  Fügte desweiteren auch bei Projekten wie z.B. PLRendererNull von denen die Codes nicht im SDK landen entsprechende Doxygen
  Make-Files hinzu - für uns selbst zum Kommentar Style prüfen lassen recht hilfreich. :)
- CreateSDK.py: Im Grundverzeichnis des SDK's liegt nun immer der SDK Browser. (SDKBrowser.chm)



>> 22.08.06
[SW]
- Linux build system: Habe die run-scripte in project/linux/Bin hinzugefügt und einen passenden eintrag dazu in die readme.txt vorgenommen.



>> 23.08.2005
[CO]
- PixelLight VC Projekt in dem alle anderen Projekte sind so umgefummelt das die Übersetungs Reihenfolge nun stimmt. Fand 
  heraus wieso das mit der Projekt Reihenfolge einfach nicht klappen wollte: Wenn ich ein neues VC-Projekt anlege nehme 
  ich ein bereits bestehendes VC-Projekt und ändere den Namen etc. - auf die Art stimmen automatisch alle Compiler 
  Einstellungen etc. aber neben dem vcproj Namen MUSS man auch noch intern ProjectGUID auf eine neue ID Stellen. Ansonnsten 
  kann VC nicht mehr zwischen verschiedenen Projekten unterscheiden und darum wollte das mit der Build Reihenfolge auch nie 
  klappen. Also hab ich 53 neue VC projekte angelegt, und die verschiedenen ID's in unsere verschiedenen Projekte kopiert so 
  das jedes Projekt eine korrekte eigene ID besitzt. Jetzt klappt das übersetzen ALLER Projekte auf einmal endlich so wie es 
  sollte... brrr...
  Legte im Ordner EngineTeam/docs/internal die Datei VC-Projects.txt ab in welcher alle VC Projekte sammt ProjectGUID 
  abgelegt sind so das man immer nachschaun kann obs da irgendwo Konflikte gibt.



>> 21.08.2005
[CO]
Generell:
- Erweiterte alle Doxygen Makefiles so, das automatisch auch die CHM Dokumentationen mit Hilfe von hhc.exe
  welches im EngineTeam/UsedTools/htmlhelp Ordner liegt erzeugt werden. Diese Dokumentationen landen dann automatisch im 
  Actual/Docs Ordner.
- Auf Doxygen 1.4.4. umgestellt
CreateSDK.py
- Authenticity.h wird nun nicht mehr mitkopiert - statt dessen landed im SDK eine Authenticity.h ohne Key
- EngineTeam/docs/pl_logo.jpg wird in jedes Doxygen html Verzeichniss kopiert - ansonnsten ist das Logo nicht in den Dokus.
  Hatte diverse Dinge ausprobiert das nur einmal Speichern zu müssen und dann darauf zu verweisen, aber nichts davon 
  funktionierte. :(
- Neuer Optionaler Parameter: '-doxygen': Wenn dieser Parameter übergeben wird, werden alle Doxygen Dokumentationen erzeugt
  bevor das SDK selbst zusammengestellt wird. Bei den LaTex Dokus wäre es wohl Sinnvoll diese nicht Automatisch erzeugen zu
  lassen... jedesmal wenn man an diesen Dokus etwas ändert übersetzt man das selbst und läd die neue pfd-Doku hoch - dann
  Stimmt das Datum der letzten Änderung auch. Ansonnsten steht dort immer wieder nen neues Datum drinen ohne das sich 
  wirklich was geändert hat. Bei den Code Dokumentationen ist dies hingegen weniger schlimm, denn die sollen einfach 
  automatisch immer aktuell sein. :)
  Jetzt fehlt also Prinzipiell NUR noch das Optionale übersetzen der Codes selbst um aktuelle Binaries zu bekommen - danach
  wird das PL SDK dann komplett automatisch erzeugt und z.B. die Grafiker können immer auf aktuelle Versionen zurückgreifen.



>> 15.07.2005
[CO]
- Erstellte ein Python Skript namens 'CreateSDK.py' welches im EngineTeam Grundordner liegt. Dieses dient dazu ein aktuelles
  SDK zusammenzustellen oder besser gesagt zusammen zu kopieren - auf Wunsch kann auch alles gleich in eine Zip Daten
  verpackt werden. :)
  Das Skript ist sicherlich noch stark Verbesserung fähig. Z.B. hab ich, damits nicht zu komplex wird die zu kopierenden
  Ordner & Filter direkt in das Skript geschrieben anstatt diese 'Dynamischen' Informationen aus z.B. einer xml-Datei 
  einzuladen.
- Die dll's werden nun in den VC-Projekten nicht mehr in den Libs Ordner kopiert - es reicht wenn diese im PLRuntime Ordner
  liegen :)



>> 07.07.2005
[CO]
- Die letzten paar Tage war ich damit beschäftigt alle Projekte auf das neue Projekt-Design umzustellen so das wir alles
  beqeum über Subversion Managen können. Endlich klappt das Code angleichen wieder - und jetzt dank SVN besser als früher. :)



>> 09.06.2005
[CO]
- Alle von den Teil-Projekten verwendeten Libs befinden sich nun jeweils in den UsedLibs Unterordnern. Die jeweiligen 
  Projekte haben einen Relativen Pfad dazu... also wie besprochen keine Globalen Entwicklungs-Umgebungen Pfade mehr für
  diese Fremd Libs.
- Mittlerweile hat Stephan alle Linux Ports soweit das auch die PLSamples unter Linux laufen. Im Prinzip müssen wir nun 
  nur irgendwann mal die PLTools unter Linux Testen - und generell muss hier und da noch etwas Bug-Fixing betrieben werden.
- Fand ein nettes VC Plugin welches diverse Projekt Statistiken erzeugen kann. Hab es unter EngineTeam/UsedTools abgelegt.
  (PLC210.zip) Legte im EngineTeam einen Projekt Ordner Namens project an in dem ALL VC PL Projekte eingetragen sind.
  (also auch PLSamples, PLTests etc.) Hier kann man dann ALLES bequem auf einmal übersetzen - auch wenn die Projekt Reihen-
  folge nicht stimmt. Das ist mit VC wirklich ne Qual das richtig Einstellen, da gibts zwar 'mittlerweile' nen extra Tool-
  Dialog dafür, aber das ist soetwas von bescheuert aber auch und verstellt sich immer wieder. Was gaanz einfaches für 
  Projekt hoch/runterschieben hätte hier völlig gereicht. ;-)
  Hab natürlich gleich mal dieses Counter-Plugin angeworfen: 43 Teil-Projekte, (viele Beispiele & Tests) 1258 Dateien,
  259287 Zeilen insgesammt, davon 126620 Code Zeilen ('nur' 48% - wir haben wirklich ausschöpfend Kommentiert :), 
  99774 Kommentar Zeilen, 38918 Leerzeilen + noch nen paar andere Zeilen. Uff, da kam ja in den letzten paar Jahren ganz 
  schön was zusammen. (verworfende Dinge nicht einbezogen ;)



>> 21.03.2005
[CO]
- Legte in jedem PL Teilprojekt einen neuen Unterordner Namens 'doc' an in dem das Doxygen make file liegt... jetzt müssen
  wir 'nur' noch den Kommentier Style der Codes umstellen - wird wohl ein paar Wochen dauern bis alles umgestellt ist. ;-)
  Ein paar Projekte wie z.B. die Renderer/Sound Backends brauchen keine solche Dokumentation da man davon normalerweise NUR
  die dll hat. Ein paar Unterordner der Codes werden ausgeschlossen wie z.B. die konkreten Win32 etc. implementationen im FS,
  & PLGui, ein paar verwendete Libs in PLModelLib etc. Auf diese Dinge hat man später sowieso keinen Zugriff da diese Intern 
  sind.
  Auch ohne umgestellte Kommentare sieht man schon das PL nicht gerade klein ist - Stefan, du musst dir mal 
  die PLGui Doku Diagramme anschaun - wow sind da teils viele viele Pfeile. ;-)



>> 06.11.04
[SB]
- PLInstall: Habe das Programm so erweitert, daß das PLRuntime-Verzeichnis nicht nur in den Pfad eingetragen wird, sondern
  zusätzlich noch in eine eigene Umgebungsvariable 'PixelLight'. Diese kann dann von der Engine beim Starten ausgelesen
  werden und dazu verwendet werden, dieses Verzeichnis nach zusätzlichen Plugin-DLLs zu scannen. Die "statischen" DLLs
  werden dann also dank Pfad gefunden, die Plugin-DLLs werden zur Laufzeit im aktuellen sowie im PLRuntime-Verzeichnis
  gesucht, womit endlich das ständige herumkopieren der DLLs ein Ende haben sollte



>> 13.02.04
[CO]
- Neues PL SDK hochgeladen und PLDemos. (040213)
  Im PL SDK liegen nun alle release und debug versionen in einem gemeinsamen Ordner. Debug Versionen sind mit D
  am Ende des Dateinamens gekennzeichnet. Sie PL_SDK.pdf für mehr Informationen. Nun sollte es weniger Versions
  konflikte geben. Desweiteren liegen nun dem SDK erste Versionen der Entity und Material Dokus bei.



>> 31.01.04
[CO]
- Aktuelles PL-SDK (plsdk_040131.zip.zip) hochgeladen damit jeder wieder aktuelle Builds hat.



>> 29.01.04
[CO]
- Team Page (http://213.239.196.237/team/): Weitere Texte niedergeschrieben damit möglichst jeder immer alles zum
  nachschlagen griffbereit hat und man nicht gleiches immer und immer wieder sagen muss. ;-)



>> 13.12.03
[CO]
- Im PixelLight Ordner SDK-Checklist.txt angelegt in welchem Notitzen zum erstellen des PL-SDK's stehen
  (zu beachtende Dinge etc :)



>> 22.11.03
[CO]
- Dieses Tagebuch angefangen. Jeder im Team sollte seine Änderungen etc. in das Tagebuch schreiben damit man auf
  einen Blick sehen kann wer wo etwas gemacht hat. Da es mittlerweile seher viele kleine PL-Teilprojekte gibt wird es so
  langsam etwas umständlich wenn jedes Teil-Projekt sein eigenes Done-Log besitzt. Die ToDo-Logs hingegen sollten bei den
  Teil-Projekten verbleiben... zudem sah merkte ich wieder als ich heute Stefans PLGui Tagebuch las das es mich irgendwie
  motiviert wenn man über die anderen Informiert ist etc.
- Auf dem Server sind nun alle Quellen mit FTPvc 2.2a hochgeladen so das man wieder problemlos verlgeichen etc. kann.
  In den project-Ordern liegen nur noch sln- und vcproj-files da die anderen nicht wirklich benötigt werden und auch teils
  unverschämt groß sind. :)
- Die build-Ordner bei den Quellen hab ich gelöscht.



>> Einträge aus altem Diary, damals noch ohne genaue Datum angaben. (oben -> unten = neuer -> älter)
[CO]
- SDK Update: plengine.txt in standard.pak verschoben damit jedes Projekt immer alle wichtigen PL-Dinge kompakt in
  einer Datei haben! PLCommon Ordner angelegt in dem Standard Daten und dll's liegen damit diese nicht in jedem
  Programm doppelt liegen müssen



>> 28.08.2003
[CO] & [SB]
- Heute beendeten wir die Zusammenarbeit mit Happy-Grafix und Bytestorm da es einfach zu viele Konflikte usw. gab.
  Jedoch hat dies keinen Einfluss auf Blibs da das Projekt noch nicht mit unserer eigenen PixelLight Technologie
  neugestartet wurde. Sobald die Engine soweit ist wird das Projekt reanimiert.
  Schon seit einem Jahr lief es Kontakt mäßig immer schlechter bis man die letzten Wochen sich gegenseitig überhaupt
  nicht mehr verstand und man sich nur gegenseitig auf den Füßen herumtrat. Da wir zutritt (Stefan, Jens und ich) nun
  nichts mehr mit Bytestorm zu tun haben wünschen wir den verblieben Team Mitgliedern noch viel Erfolg bei zukünftigen
  Projekten. Schade das es nach so langer Zusammenarbeit dann so enden musste... aber es konnte wirklich nicht länger
  so weitergehen da man sich am ende wirklich gegenseitig verrückt machte... :(



>> 08.04.2003
[CO]
- Unserer PixelLight Engine macht gute Fortschritte, es fehlt zwar noch der Level Code jedoch ist mittlerweile
  ROAM Terrain eingebaut, Textur Animationen usw.
  Der PixelLight-Model Editor ist bereits seit einigen Wochen einsatzbereit und wird stetig erweitert.



>> 06.02.2003
[CO]
- Derzeit arbeite ich am PixelLight-Model Editor.



>> 18.01.2003
[CO]
- So, hab mir nun endlich einen neuen Rechner zugelegt... war längst überfällig!
  P4 2,54 Ghz, 120 GB Festplatte, GeForce4 Ti 4200 usw... das sollte für ein paar Monate reichen. ;-)
  Dann kanns nun wohl mit neuen Features für die PixelLight-Engine losgehen!



>> 17.11.2002
[CO]
- Die PixelLight macht ganz gute Fortschritte... Stefan fängt nun an SpaceTaxi selbst zu Programmieren.
  Ich hab mich dazu entschlossen an Blibs erst weiterzuarbeiten wenn der Zivi rum ist...
  da es momentan aus Zeitlichen gründen völlig witzlos ist daran weiterzuarbeiten."!")=!")=!



>> 24.10.2002
[CO]
- Vor ein paar Tagen nahm Dirk überraschenderweise wieder Kontakt mit mir auf... nähere Gründe dafür sollten wohl
  besser nicht erwähnt werden. ;-)
  Auf jedenfall hat er nun wieder 'Zeit' an Blibs mitzuarbeiten... so langsam steht das Blibs-Team und die Engine
  ist mittlerweile ebenfalls soweit, dass sie nun in einem Spiel eingesetzt werden kann. Hier und da müssen noch ein
  paar kleinigkeiten an der PixelLight-Technik gemacht werden und dann werden die Projekte SpaceTaxi und Blibs angegangen. :)
  Homepages für die Projekte und Bytestorm sind bereits in Arbeit... 



>> 06.10.2002
[CO]
- Stefan und ich werkeln kräftig weiter an unserer PixelLight-Engine...



>> 29.9.2002
[CO] & [SB]
- Ok, der erste Schritt ist getan. Das Gerüst unserer neuen Engine 'PixelLight' steht... :)



>> 16.9.2002
[CO]
- Als ersten Schritt werden wir eine eigene Engine entwickeln. Stefan und ich haben beide bereits diverse Engines erstellt
  und mit diversen gearbeitet... daher wissen wir worauf es ankommt. :)
  Diese Engine wird dann als erstes für einen Space Taxi Klone eingesetzt.
