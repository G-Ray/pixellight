>> 02.03.2012
[JS]
PLUnitTests:
- overloaded CHECK_EQUAL template to automatically cast String::EFormat enums to 'int' to get rid of linux compiler warnings like that:
	passing 'PLCore::String::EFormat' chooses 'int' over 'unsigned int' [-Wsign-promo]
- updated wchar_t check template to print a notice if it encounters an wchar_t* string with unicode characters that can't be converted to a char* string



>> 01.03.2012
[JS]
PLUnitTests:
- added a new CHECK-Macro to UnitTest++: "CHECK_NOT_EQUAL"
	-> useful for checking if two strings are not equal
- added String tests (migrated from PLTestBase)



﻿>> 25.02.2012
[JS]
PLUnitTests:
- Removed getchar() call, slipped into repo somehow ;)
- added Queue tests (migrated from PLTestBase)
- added FastPool tests
- fixed check in generic container tests when calling "AddAtIndex", we don't know what value this new element will have so don't check it!
- added SimpleList tests (migrated from PLTestBase)
- added Stack tests (migrated from PLTestBase)



﻿>> 22.02.2012
[CO]
PLUnitTestsPerformance:
- Removed "system("Pause")" resulting in the error message "error: 'system' was not declared in this scope" when building for Android,
  instead "getchar()" is used as already done within "PLUnitTests" (altough I'am not sure whether or not it's a good idea to wait for a key in here)



﻿>> 16.02.2012
[JS]
PLUnitTests:
- added a new CHECK-Macro to UnitTest++: "CHECK_IMPLEMENT"
	-> comfortable way to mark a test as "not implemented yet"
- refactored EulerAngles test



>> 14.02.2012
[JS]
PLUnitTests:
- added Bitset tests (copied and modified from ContainerTest.h, can't directly use ContainerTest.h as it uses int over bool)
- copied Graph test from PLTestBase (to be reviewed!)
- added a new CHECK-Macro to UnitTest++: "CHECK_MATRIX3X3"
	-> comfortable way to check if the values in 2 matrices (3x3) are equal
- added EulerAngles test (to be reviewed!)
- refactored EulerAngles, Math and Bitset tests to point out the problems there



>> 13.02.2012
[CP]
PLUnitPerformance:
- added "ms" to the values which are displayed as milliseconds
- values are also displayed as floatingpoint values (when "ms" is not added,
	false values are displayed. Mostly it seems multiplied by 1000 by "mistake"?)
- added Array, List, Hashmap Tests



>> 30.01.2012
[JS]
PLUnitTests:
- added Bitset tests (copied and modified from ContainerTest.h, can't directly use ContainerTest.h as it uses int over bool)



>> 23.01.2012
[JS]
PLUnitTests:
- migrated Vector2 tests from PLTestBase
- extended Math tests
- fixed Comparison of Enums in linux environment => UnitTest++ can't compare these?



>> 09.01.2012
[JS]
PLUnitTests:
- started to migrate tests from PLTestBase to PLUnitTests
- added a portion of Math tests
- fixed/changed ApplicationContext tests due to modifications/fixes to this class



>> 30.12.2011
[JS]
PLUnitTests:
- added iterator tests for Maps and Heaps
- added test for FibonacciHeap functions 'Consolidate' and 'IsNormalized'
- added copy tests for HashMap
- minor cleanup: removed some unused objects



>> 24.12.2011
[CO]
- "PixelLightAndroid": The name of the release version of the Test-App is now "PLAndroid" and the debug version is named "PLAndroidD". "PixelLightAndroid" was
  to long making it impossible to see in the Android App menu which one of the two Apps was the release and which the debug version.



>> 20.12.2011
[CO]
- I played around with the current "PLUnitTestsPerformance" version. I was a little bit surprised when I saw the following extreme results
    PL_String_insert;42.0725;42.074
    C_String_insert;0.555361;0.557
  ("PL_String_insert"->"PLCore::String::Insert" and "C_String_insert"->"std::string::insert"... maybe we should change the performance log names and we should
   also add the unit, are those in milliseconds or in cookies? :)
  because I did a similar test some time ago (see PLCore diary entry "29.11.2010"). The tests look like this (see "PLUnitTestsPerformance"-project)
    for (int i=0; i<10000; i++)
      PLString->Insert(char(i+48));
    for (int i=0; i<10000; i++)
      CString->insert(char(i+48),0);
  When looking at "PLCore::String", there's only a "..Insert(const char *pszString ..."-method, but no "char"-method as it's existing for the "+=" operator
  usually used within PixelLight (altought this has another behaviour...). It appears that there's also need for a "single character insert"-methode beside
  the already existing "+="-operator.
  -> "PLCore::String"-class: Added "String &Insert(char nCharacter, uint32 nPos)" and "String &Insert(wchar_t nCharacter, uint32 nPos)" (there were already such
     "Replace()"-method variants)
  -> The original test from top now gives me
      PL_String_insert;36.3402;36.341
      C_String_insert;0.534317;0.536
  -> When having a closer look into the performance test, it becomes clear that both tests do not perform the same task. The "PLCore::String" test added
     "char(i+48)" at the first string position while the "std::string" test added "0" hat string position "char(i+48)".
  -> When writing
       for (int i=0; i<10000; i++)
         PLString->Insert(char(0), i+48);	// First parameter is what to insert, second is position
       for (int i=0; i<10000; i++)
         CString->insert(i+48,0);	// First parameter is position, second is what to insert
    the performance result is
      PL_String_insert;0.0723715;0.072
      C_String_insert;0.529184;0.529
    -> This is an invalid test because characters are inserted at invalid positions, PixelLight returns "false" while std throws an exception, this may explain the
       notable performance difference in this situation)
  -> When writing
       for (int i=0; i<10000; i++)
         PLString->Insert(i+48, 0);	// First parameter is what to insert, second is position
     and for std::string
       char insert[2];
       insert[1] = '\0';
       for (int i=0; i<10000; i++) {
         insert[0] = char(i+48);
         CString->insert(0, insert);	// First parameter is position, second is what to insert
       }
   the performance result is
      PL_String_insert;36.3931;36.394
      C_String_insert;40.7108;40.712
   and another run
      PL_String_insert;38.9538;38.955
      C_String_insert;36.4824;36.483
   and another run
      PL_String_insert;36.3936;36.394
      C_String_insert;36.3392;36.339
   ... sorry for this long diary entry. I wanted to point out how important it is to analyse in detail whether or not performance tests really do the same thing...
   especially when there are extreme performance differences it's required to have a closer look at the performance test itself... and of course a look into the
   implementations used.
   -> The queue and stack tests look fine. "PLCore::Queue" and "PLCore::Stack" are trivial implementations using simple linked lists while std has more sophisticated
      implementations for those two data structures. This exlains the performance difference, but I think it isn't that dramatically and important for the overall
      PixelLight performance to make the "PLCore::Queue" and "PLCore::Stack" implementations more efficient (right now there's more important stuff :).



>> 19.12.2011
[CP]
PLUnitPerformance:
- changed output into csv-files
- added Queue- and Stack-functions
- started String-functions
- added two types of counters (Pixellight, TestReporter)



>> 08.12.2011
[JS]
PLUnitTests:
- implemented a portion of generic Heap tests
- added files for Heap container tests



>> 06.12.2011
[JS]
PLUnitTests:
- changed name: ContainerFunctions.h => ContainerTests.h
- added files for generic Map- and Heaptests
- added file for Fastpool container
- introduced new Filters in Visual Studio Project to group files related to Container/Maps/Heaps
- refactored Arrays Resize() test



>> 05.12.2011
[TM]
PLUnitTestsPerformance:
- minor bug fix in the CMakeLists.txt: changed the path to the UnitTest++AddIns cpp files
(e.g. "../../PLUnitTests/src/UnitTest++AddIns/MyTestReporter.cpp" to "../PLUnitTests/src/UnitTest++AddIns/MyTestReporter.cpp")



>> 05.12.2011
[CO]
PLUnitTestsPerformance
- Renamed "PLUnitPerfTests" into "PLUnitTestsPerformance" to have a human readadable name (shorted names may lead to confusion and misinterpretation :)
- Updated Visual Studio project file to make it work with x64 as well
- Made the project compilable under Linux as well



>> 05.12.2011
[CP]
PLUnitPerfTests:
- Added file structure for unit performance tests.
- Added the performance test for Hashmap (Comparing C-Map and Pixellight-Hashmap)



>> 05.12.2011
[JS]
PLUnitTests:
- uncommented initial getName() test in CoreApplication as we don't know which name the application gets after startup
- added Array tests for derived functions from Container for testing specific implementation of Array that can't be covered by generic ContainerFunction test (e.g. resizing of Array)
- implementet Resize() Test for Array



>> 30.11.2011
[JS]
PLUnitTests:
- added a general function to test derived functions of some containers
- refactored Array tests to use this general function
- fixed Array tests after some changes to Array class
- added containers List, Pool with general container function test
- fixed some compiler warnings (tokens after #endif directive, linux compiler)



>> 25.11.2011
[JS]
PLUnitTests:
- changed SetName()-test in CoreApplication to test the name based on current configuration
- added tests for Array
- changed some console output of mobile reporter



>> 14.11.2011
[JS]
PLUnitTests:
- changed file structure to reflect file structure in .\Base\PLCore\include\PLCore\
- added tests for ApplicationContext
- added tests for CoreApplication
- changed internal test structure to define objects used for many testcases globally in testsuite
- changed console output of testreporters



>> 11.11.2011
[CO]
- "98GuiTest" & "99Test": Updated x64 Visual Studio project settings



>> 08.11.2011
[CO]
- Minor updates to make the code cross-platform: (no problem, someone who never wrote cross-platform code can't know this minor pitfalls :)
  -> Changed "#include <UnitTest++\TestRunner.h>" etc. into "#include <UnitTest++/TestRunner.h>" (GCC complains about \ but MSVC not about /)
  -> Changed "#include <UnitTest++/TestReporterStdOut.h>" into "#include <UnitTest++/TestReporterStdout.h>" (unlike MS Windows, Linux and so on are case-sensitive)



>> 07.11.2011
[JS]
- Added file structure for unit tests.
- Added UnitTest++AddIns with own TestReporters, a RunAllTests() overload to use our own Reporter and wchar_t functionality for PLCore::String unicode testing.
- cleaned "UnitTests.cpp" and added an example test run.



>> 05.11.2011
[CO]
- Started currently nearly empty "PLUnitTests"-project - there's already someone writing concrete unit tests and I just to the integration into the build system.
  The own minimalistic test framework "PLTest" will be replaced by UnitTest++. "PLTestBase" will be replaced by "PLUnitTests" with better and more unit tests in
  order to enhance the overal quality of PixelLight. Currently, one unit tests project should be sufficient. In case we notice that multiple of such projects are
  useful we can add them on-the-fly.
- Added "MainAndroid.cpp" for the Android program entry point in order to make it possible to run the tests on a not rooted device. Use e.g. "PixelLightAndroid"
  to create a runnable APK file and then look into the Android logcat to check the console output (not perfect, but we have to start somewhere).
- "Main.cpp" is the program entry point for MS Windows, Linux and Mac OS X
- Both, "MainAndroid.cpp" and "Main.cpp" are calling an abstract unit test entry point within the "UnitTests.cpp" file. So, just use "UnitTests.cpp" as the program
  entry point and ignore the OS stuff. :D



>> 16.10.2011
[CO]
- Added "PixelLightAndroid", the project I used to develop the Android port. Maybe we can extend it to a real sample later on.



﻿>> 15.07.2011
[CO]
- Moved "98GuiTest", "99Test" and "99TestPlugin" from the "PLSamples"-directory into the "PLTests"-directory



/*********************************************************\
 *  The entries below are in German only
\*********************************************************/



>> 05.08.2010
[CO]
- "PLTestBase" in "PLTest" und "PLBaseTest" in "PLTestBase" umbenannt
- "PLSoundTest" entfernt und ins Archive verschoben ("Removed_PLSountTest_05082010") da nicht wirklich brauchbar + bei den verwendeten
  Test Sound Dateien weis ich nicht mehr woher die stammen (iss schon etliche Jahre her das an PLSoundTest mal was gemacht wurde)



>> 17.06.2010
[CO]
- PLRendererTest und PLMeshTest ins Archive verschoben... denn diese Tests wurden Jahrelang nicht wirklich Weiterentwickelt, sondern
  legeglich immer angepasst damit diese Übersetzbar blieben. Daher sind diese nun ziemlich unbrauchbar und wohl schneller nochmal,
  wenn denn mal nötig, neu geschrieben als abermals an Änderungen angepasst. PLDemoRendererTriangle und PLDemoMeshTeapot kann man mehr
  oder weniger als "Ersatz" ansehen. :D



>> 14.03.2010
[CO]
PLBaseTest:
- An die Änderungen des Konfigurations-Systems angepasst



>> 12.09.2009
[CO]
PLBaseTest:
- "ImageTest::Test()" an PLGraphics angepasst



>> 02.08.2009
[CO]
PLBaseTest:
- "MapTestCase" um Key-Iterator Tests erweitert



>> 15.02.2008
[CO]
PLBaseTest:
- HashMap & SimpleMap Tests um Copy-Constructor und Copy-Operator Tests erweitert



>> 19.01.2008
[CO]
PLBaseTest:
- MapTestCase::Test(): Um Tests der neuen 'Set'-Funktion erweitert



>> 19.09.2007
[CO]
PLBaseTest:
- Neue Test Klasse: EulerAnglesTest



>> 17.09.2007
[CO]
- Alle Projekte von PLBool auf bool zurückgestellt (siehe PLBase Diary-Entrag von heute)



>> 23.08.2007
[CO]
PLBaseTest:
- FileSystemTest::Test(): "Searching for scenes"-Test (war [TODO]) herausgenommen da dieser Job mittlerweile Aufgabe des
  Loadable-Systems ist.



>> 22.08.2007
[CO]
PLBaseTest:
- Einfache Tests für die 'Time'-Klasse hinzugefügt



>> 31.07.2007
[CO]
PLBaseTest:
- Matrizen-Tests etwas erweitert



>> 22.07.2007
[CO]
PLBaseTest:
- Tests für die 'Function'-Funktionalität (von Stefan am 25.02.2007 bei PLGeneral eingeführt) hinzugefügt



>> 29.06.2007
[CO]
PLGuiTest:
- Groß/kleinschreibung von Dateien passte nicht...



>> 26.03.2007
[CO]
PLTestBase:
- Header Änderungen wie in z.B. PLBase



>> 26.02.2007
[SB]
- Fügte bei den Projekten, die als Win32-Konsolenapplikation compiliert werden, die Präprozessordefinition _CONSOLE in den
  CMake-Projekten hinzu



>> 23.02.2007
[CO]
PLBaseTest:
- Fügte dem VC 2005 Projekt die Compiler Optionen "/D "_CRT_SECURE_NO_DEPRECATE"" ein damit keine unnötigen Warnungen kommen



>> 22.02.2007
[CO]
- Fügte dem PLTestBase VC 2005 Projekt die Compiler Optionen "/D "_CRT_SECURE_NO_DEPRECATE"" ein damit keine unnötigen
  Warnungen kommen



>> 16.02.2007
[CO]
- Mini Log Test hinzugefügt



>> 11.02.2007
[CO]
- Auf VC 2005 umgestellt



>> 28.01.2007
[SB]
- CMake Projektdateien für alle PLTests-Projekte hinzugefügt
- PLBaseTest und PLTestPlugin ins Hauptverzeichnis verschoben



>> 28.01.2007
[CO]
- VC Projekt-Dateien wie besprochen in die jeweiligen Grundordner verschoben



>> 23.12.2006
[CO]
- ChecksumTest um ChecksumCRC32 und ChecksumSHA1 Tests erweitert



>> 13.10.2006
[CO]
- UTF8ToolsTest um Tests für Stephans neue Funktionen Compare(), FindSubString() und Copy() hinzugefügt



>> 28.09.2006
[CO]
- An PLGraphics angepasst



>> 27.09.2006
[CO]
- An PLDatabase angepasst



>> 19.09.2006
[CO]
- UTF8Tools Unit Tests erweitert



>> 18.09.2006
[CO]
- UTF8Tools Unit Tests hinzugefügt



>> 10.09.2006
[CO]
- ImageTest minimal erweitert, hier muss jedoch noch so einiges an Tests rein...
- DatabaseTest etwas erweitert so das man sehen kann wie das mit den Queries derzeit abläuft



>> 08.09.2006
[CO]
- Checksum Unit-Tests hinzugefügt



>> 06.09.2006
[CO]
- Datenbank Unit-Tests hinzugefügt



>> 01.09.2006
[CO]
- 'LocalizationTest' hinzugefügt



>> 30.08.2006
[CO]
- String Tests um Unicode & ASCII Kombination Tests erweitert



>> 29.08.2006
[CO]
- String Tests um Unicode Tests erweitert



>> 28.08.2006
[CO]
- String Tests erweitert



>> 13.08.2006
[CO]
- String-Replace Tests noch etwas erweitert so das der Replace()-Bug auffällt.



>> 23.07.2006
[CO]
- Ein paar Mathe Tests meldeten an stellen Fehler wo keine waren - das lag den kleineren Änderungen in PLMath der letzten Zeit,
  dadurch waren die Ergebniss 'minimal' anderst als das erwartete Ergebniss. Soetwas lässt sich bei Unit Tests wohl nicht
  vermeiden und sollte sich da mal intern ein wenig was ändern, muss man diese Tests leider anpassen. :(



>> 20.07.2006
[CO]
- GetLength(), GetSquaredLength(), SetLength(), Normalize(), GetNormalized() der Vektor Klassen werden nun noch mit einem
  Null- & Einheits-Vektor geprüft
- Überall wo möglich wird TestCase::Print() anstatt printf verwendet
- Huch, warum war denn bei PLBaseTest im Release Projekt 'Multithreaded-Debug-DLL' und nicht 'Multithreaded-DLL' eingestellt?
  In RTTITest::Test() hatte ich bei 'List<Class*> lstClasses = ClassManager::GetInstance()->GetClasses("", true);' im Release
  Modus einen sehr merkwürdigen Crash. Intern wird die Liste ja ein paar mal herumkopiert da diese als Rückgabewert verwendet wird,
  und bei 'delete' zerschoss es dann immer den Speicher. Zum Glück erinnerte ich mich daran das soetwas hauptsächlich dann passiert
  wenn in den Projekten nicht die gleichen Compiler & Link Einstellungen verwendet werden - und tatsächlich, das wars. Prüfte
  zur Sicherheit auch die anderen Projekte, in PLSoundTest war es das gleiche, aber in den anderen Projekten stimmte das zum Glück.



>> 16.07.2006
[CO]
- ResourceManagementTest hinzugefügt. Dies ist nicht mit ResourceManagerTest zu verwechseln... mir viel hier einfach kein
  besserer Name ein. In ResourceManagementTest werden Reference Counter & Smart Pointer durchgetestet - also 'primitive resource
  management'. :)
- TestCase um Print-Funktion erweitert
- PerformanceTest erweitert, gerade bei Array & Hash Map ist es Interessant zu sehen was es für einen Geschwindigkeits unterschied
  macht wenn man etwas komplett dynamisch 'wachsen' lässt oder bereits genug Speicher bereitstellt.



>> 04.07.2006
[CO]
- Nahm PLEngineTest heraus da dieser Test derzeit PLSampleContainer entspricht und als 'Unit Test' ziemlich nutzlos ist.



>> 17.06.2006
[CO]
- Tests für die neue Container Funktion 'uint32 Add(const AType Elements[], uint32 nCount)' hinzugefügt



>> 31.05.2006
[CO]
- An Renderer Shader Änderungen angepasst



>> 22.05.2006
[CO]
- String Test minimal erweitert



>> 21.05.2006
[SB]
- Projekte an FS-Änderungen angepaßt



>> 14.05.2006
[SB]
- An PLGeneral Änderungen angepaßt



>> 11.05.2006
[SB]
- An PLGeneral Änderungen angepaßt (DEFINE_GROUP entfernt, GetClasses())



>> 23.04.2006
[CO]
Math Tests:
- Matrix3x4 Tests hinzugefügt



>> 22.04.2006
[CO]
General Tests:
- Erweiterte die Container Tests so das auch GetEndIterator() verwendet wird + der Sonderfall das nur EIN Element im
  Container ist durchgetestet wird.



>> 27.03.2006
[CO]
Mathe Tests:
- Vector3 & Matrizen & Quaternion Tests etwas erweitert



>> 18.03.2006
[CO]
PLRendererTest: SurfaceListener.cpp: Ein paar unnötige Matrix4x4::SetIdentity() Funktionen entfernt



>> 13.03.2006
[CO]
Mathe Tests:
- Quaternion Tests erweitert



>> 06.03.2006
[CO]
- Matrizen & Quaternionen Tests um Rotations Tests erweitert



>> 02.03.2006
[CO]
- Alles an Renderer Änderungen angepasst



>> 28.02.2006
[CO]
Mathe Tests:
- Matrizen Tests erweitert



>> 27.02.2006
[CO]
Mathe Tests:
- 'ToolsTest' in 'MathTest' umbenannt
- Fing mit den Quaternion Tests an
- Vektor & Matrizen Tests etwas erweitert (fehlt natürlich noch einiges :)



>> 25.02.2006
[SB]
- Alles an PLGeneral Änderungen angepasst



>> 24.02.2006
[CO]
- Alles an PLGui Änderungen angepasst



>> 23.02.2006
[SB]
- Alles an PLGeneral Änderungen angepaßt - nicht zum letzten Mal ;-)
- MultiThreadingTest angepaßt, man sieht gleich daß die Threads so viel netter zu verwenden sind :-)
- SystemTest zeigt die Funktionen der System-Klasse



>> 22.02.2006
[CO]
- Alles an Haupt-Header Änderungen angepasst
- Alles an PLMath Änderungen angepasst



>> 18.02.2006 - 21.02.2006
[CO]
Mathe Tests:
- Matrizen Tests erweitert bzw. angefangen diese Tests zu Implementieren. Hab auch gleich die verschiedenen Möglichkeiten
  auf die Elemente der Matrizen zuzugreifen durchgetestet da hier schnell etwas durcheinander kommen kann.



>> 17.02.2006
[CO]
Mathe Tests: Vektor Tests erweitert



>> 16.02.2006
[CO]
Mathe Tests: Vektor Tests erweitert, ein paar Funktionen fehlen noch und ein paar Tests werd ich noch etwas erweitern



>> 15.02.2006
[CO]
Mathe Tests: Tools Test Klasse hinzugefügt



>> 14.02.2006
[CO]
Mathe Tests: Vektor Tests erweitert bzw. implementiert :)  (es fehlen natürlich noch sehr viele Tests)



>> 13.02.2006
[CO]
- Fing damit an die Mathe Tests zu erweitern



>> 12.02.2006
[SW]
PLBaseTest:
- MultithreadingTest: das lesen der globalen Variable g_bContinue wird nun per Mutex
  "geschützt". Ist glaube ich nicht wirklich notwendig, aber sicher ist sicher :)
- subversion: habe das property svn:eol-style für die neuen Dateien gesetzt.
    um dies automatisch zu machen sollten folgende optionen in der config-datei
    von subversion vorgenommen werden:
    [miscellany]
    enable-auto-props = yes

    [auto-props]
    *.c = svn:eol-style=native
    *.cpp = svn:eol-style=native
    *.h = svn:eol-style=native
    *.inl = svn:eol-style=native
    *.dsp = svn:eol-style=CRLF
    *.dsw = svn:eol-style=CRLF
    *.sln = svn:eol-style=CRLF
    *.vcproj = svn:eol-style=CRLF
    *.sh = svn:eol-style=native;svn:executable
    *.py = svn:eol-style=native
    *.txt = svn:eol-style=native
    SCons* = svn:eol-style=native
    Makefile = svn:eol-style=native

    damit sollte jede datei die passende eol-kennung(bis auf die vc-projekt-dateien immer die kennung, welche vom OS verwendet wird)
    beim auschecken haben.



>> 10.02.2006
[CO]
- Base Tests: Stack & Queue Tests erweitert



>> 09.02.2006
[CO]
- Base Tests um Fibonacci Heap Test erweitert + Heap Test etwas geändert: Bei den Heap Iteratoren kann man NICHT im
  allgemeinen davon ausgehen das zumindestens das erste zurückgegebene Element das 'kleinste' ist... dies ist zwar bei
  einem Binary Heap Iterator so, aber nicht bei einem Binominal/Fibonacci Heap Iterator!



>> 08.02.2006
[CO]
- Base Tests um Binominal Heap Test erweitert + Heap Test erweitert



>> 07.02.2006
[CO]
Base Tests:
- Um Heap Tests erweitert + Iterator Tests erweitert so das diese mögliche Bugs besser feststellen können
- In MathClassTest 'TestClass1' in 'MathTestClass1' umbenannt da es bereits in PLTestPlugin eine Klasse Namens 'TestClass1'
  gab was dann natürlich im RTTI zu einem Klassen Namen Konflikt führte (dieser Konflikt viel Stephan unter Linux auf :)



>> 06.02.2006
[CO]
- Bitset Test etwas erweitert



>> 05.02.2006
[SB]
- Tokenizer Test hinzugefügt
- Base Tests: Dynamische Erzeugung des TestManagers entfernt, da an dieser Stelle völlig unnötig
- Tests auf String::Format() umgestellt



>> 05.02.2006
[SW]
Base Test:
- FileSystemTests: überprüfung ob die datei wirklich geöffnet wurde eingebaut.
                   Wenn beim öffnen ein fehler auftrat so wird der eine fehlermeldung ausgegeben und die Testfunktion beendet.
                   Cleanup-funktion hinzugefügt für linux-build
PLTestPlugin:
  DEFINE_CONSTRUCTION_PUBLIC-Makro in TestClass2.h erzeugt einen sigsev wenn
  versucht wird eine instance dieser Klasse im Testprogramm zu erzeugen



>> 05.02.2006
[CO]
Base Tests:
- List, Array, Pool, FastPool & Bitset sind wieder einzelnde Test Cases - jedoch von einem speziellem Container Test
  Case abgeleitet der bereits allgemeine Container Tests bereitstellt
- SimpleMap & HashMap zu einzelnen Test Cases gemacht welche von einem speziellem Map Test Case abgeleitet sind



>> 04.02.2006
[CO]
- Base Tests: String Tests erweitert



>> 03.02.2006
[CO]
- Base Tests: String Tests erweitert



>> 31.01.2006
[CO]
- An den Base-Tests weitergearbeitet



>> 28.01.2006
[CO]
- Alles an PLMesh & PLEngine Änderungen angepasst



>> 26.01.2006
[CO]
- Alles an PLSound & PLRenderer Änderungen angepasst



>> 24.01.2006
[CO]
- An uint32 Änderungen angepasst



>> 19.01.1006
[CO]
- Alles an PLMath & PLGui Änderungen angepasst



>> 18.01.2006
[CO]
- Alles an PLGeneral Änderungen angepasst



>> 17.01.2006
[CO]
- PLBaseTest, PLTestBase & PLGuiTest an PLGeneral Änderungen angepasst



>> 15.01.2006
[CO]
- Eigenständigen File System Test entfernt und in PLBaseTest hinzugefügt.



>> 12.01.2006
[CO]
- Neues Projekt: PLTestBase: Test Basis Lib auf der die anderen Tests aufbauen. 'PLTestBase.dll' und 'PLTestBaseD.dll'
  liegen im Runtime Ordner, werden jedoch von 'CreateSDK.py' ausgefiltert und landen daher auch nicht im PL SDK.
- Wie mit Stefan besprochen BaseTests nochmal etwas Umstrukturiert. Math liegt nun bei den General Tests mit drinnen.
  Jetzt muss noch der FS Test dort mit eingebaut werden + die einzelnen Tests sauber ausgearbeitet werden.



>> 11.01.2006
[CO]
- PLBaseTest & PLMathTest neu Strukturiert: Die einzelnen Tests liegen nun in enstsprechenden Dateien so, das alles etwas
  Übersichtlicher ist... cpp Dateien hab ich mir hier gespart, ich denke Header reichen hier der einfachtkeitshalber
  völlig.



>> 03.01.2006
[CO]
- PLMathTest etwas erweitert



>> 02.01.2006
[SW]
- PLBaseTest(s) linux build-env hinzugefügt
- PLMathTest include-fehler behoben, es wurden noch in diesem Test alte include-anweisungen verwendet
  (z.b. PLGeneral.h anstelle von PLGeneral/General.h)
- PLFileTest linux build-env hinzugefügt und ist nun unter linux übersetzbar



>> 10.09.2005
[CO]
- PLBaseTest um ein paar Mini Tests erweitert



>> 17.08.2005
[CO]
- Base Test XML Test an XML Wrapper Änderung angepasst. Es mussten nur CreateInstance() durch new ersetzt werden.



>> 10.08.2005
[CO]
- Base Test um XML Test erweitert



>> 03.06.2005
[CO]
- PLTest & PLTestEntities zusammengepackt und in AblazePlayground umbenannt da dies mein Projekt für diverse Experimente
  ist. Neues Test Projekt hinzugefügt: PLEngine -> Das sind nun wie besprochen die 'richtigen' Engine Tests.



>> 23.04.2005
[CO]
- PLModelLib Test an aktuelle Änderungen angepasst



>> 22.02.2005
[SB]
- Tests an aktuelle Änderungen angepasst :-)
- Noch nicht angepaßt: PLTest, PLTestEntities, PLMaterialEditor



>> 16.02.2005
[CO]
- PLTests ist wieder aktuell. Ich werde nun das Projekt kräftig entmisten und alle daraus hervorgegangenen brauchbaren
  Entities in ein neues Entity-Projekt stecken. (PLEntityPacked1 oder so :)
  Ein Teil wird wohl auch in nen PLSampleEntities-Projekt verschoben, wie z.B. das mit dem Picking, Occulision Test etc.
  und natürlich noch etwas mehr Dokumentiert, aber ich denke das sind wirklich brauchbare und Demonstrative Beispiel
  Entites.



>> 05.02.2005
[CO]
- Tests an aktuelle Änderungen angepasst - ja, schon wieder, viele Änderungen derzeit. :)



>> 02.02.2005
[CO]
- Tests an aktuelle Änderungen angepasst



>> 31.01.2005
[CO]
- Tests an aktuelle Änderungen angepasst



>> 21.01.2005
[SB]
- PLTestEntities wie die anderen Entities auf RTTI umgestellt



>> 17.01.2005
[CO]
- Neuer Test: PLSoundTest für das neue Teilprojekt PLSound



>> 28.12.2004
[CO]
- Machte FS-Test Plattform unabhängig damit wir das auch unter Linux testen können



>> 25.12.2004
[CO]
- Alten PLRendererTest wieder lauffähig gemacht... könnte u.a. beim Portieren praktisch sein nur den Renderer ohne Engine
  zu testen. :)
- ModelLib Test hinzugefügt



>> 18.12.2004
[CO]
- PLGuiTest minimal erweitert



>> 26.11.2004
[CO]
- PLBaseTest: PLTConfig Test hinzugefügt



>> 24.11.2004
[CO]
- PLBaseTest: Heap Test hinzugefügt
- PLMathTest: Graph Test hinzugefügt



>> 21.11.2004
[CO]
- PLBaseTest: QuickSort Test hinzugefügt



>> 19.11.2004
[CO]
- Alles an Timer umstellung auf Singleton angepasst.



>> 29.10.2004
[CO]
- EntityODEJeep ist wieder brauchbar



>> 03.10.2004
[CO]
- Neues Test Entity: EntityOcclusionQueryTest -> Testet das Occlusion Query Test Feature des Renderers



>> 22.09.2004
[CO]
- Neues Test Entity EntityOcean: Für einen Ocean, ist noch etwas buggy da es nicht auf NV Karten korrekt läuft.



>> 06.09.2004
[CO]
- Neue Test Welt hinzugefügt: 'SimplePerPixelLighting.world' ist wie 'PerPixelLighting.world' aber mit einfacheren BumpMapping
  Shadern.
- Neue Test Welt hinzugefügt: 'Physic.world' -> Testet diverse Physik Dinge



>> 05.09.2004
[CO]
- Neue Test Welt hinzugefügt: 'PerPixelLighting.world' -> Verwendet den SceneManager 'PLTSMPerPixelLighting' um ALLES mit
  PerPixelLighting darzustellen



>> 18.08.2004
[CO]
- PLMathTest Projekt hinzugefügt



>> 14.08.2004
[CO]
- Neues Test Entity: EntityGoblin: Im Prinzip das alte Goblin Entity aus den alten Demos, jedoch etwas angepasst. Damit kann man
  schön folgendes Testen: mesh vertex animations, entity binding on anchor points, events, sounds, paths etc.
  Zudem sieht man dort in etwa wie man später Spiel-relevante Entities wie z.B. Gegner realisieren könnte.
  Hab noch zwei Welten hinzugefügt, beide verwenden EntityGoblin und testen u.a. auch EventAreas, das eine hat jedoch eine Statische
  Kamera welche automatisch umschaltet. Das wollte ich einfach wieder zum Testen drin haben da in diesen zwei Welten doch recht
  viele PL Features auf einmal getestet werden können - zudem hat ich ja das schon quasi geschrieben und wieso dann wegwerfen
  wenns eigentlich noch gut brauchbar ist? ;-)



>> 11.08.2004
[CO]
- Erweiterte EntityPicking um einen zweiten Picking-Modus: Durch einen 'Rahmen' ziehen wird alles ausgewählt was in diesem
  Bereich liegt -> Diese Technik wird im WE zum Entities Selektieren verwendet.



>> 06.08.2004
[SB]
- PLBaseTest angepaßt und erweitert, um die neuen Features von PLGeneral zu testen



>> 05.08.2004
[CO]
- Neues Test Entity: EntityLightning -> Kann für Blitze verwendet werden



>> 03.08.2004
[CO]
- Neues Test Entity: EntityPicking -> Mouse-Picking Test. Testet PLTRenderer::Get3DCoordinate() und PL::Collision.TraceLine()
                     was intern natürlich diverse weitere Funktionen verwendet.




>> 02.08.2004
[CO]
- Neues Test Entity: EntityElectro -> Ein über eine 3D Texturen + Fragment Shader erzeugter 'Electro'-Effekt... da sind man
                     konkret das 3D Texturen nun funktionieren ;-)



>> 30.07.2004
[SB]
- Habe das Testprojekt PLBaseTest in PLTests erstellt, um die neuen (und später auch die alten) Features von PLGeneral
  zu testen. PLTestPlugin ist eine DLL, welche einige Klassen als Plugin zur Verfügung stellt, PLBaseTest lädt diese
  DLL und testet den Zugriff auf die Plugin-Klassen. Wie an diesem Beispiel gut zu sehen ist, ist es nicht mehr nötig,
  noch eine Funktion von der DLL aufzurufen, da diese ihre Klassen automatisch beim Laden der DLL registriert



[CO]
- Neues Test Entity EntityWater2: Ein Wasser Entity welches über RenderToTexture animierte Wellen erzeugt



>> 22.07.04
[CO]
- PLGuiDemo heist nun PLGuiTest und liegt ebenfalls im PLTests Ordner
- Neues Test Entity: PLVolumetricLine: Eine 'glühende' Linie... später kann man diese ja in nen Bonus Entities Pack
  oder so packen ;-)



>> 30.06.04
[SB]
- Kleines Testprogramm für das neue FS hinzugefügt. Dieses demonstriert allgemein die Verwendung des FS (kleine shell),
  und zeigt auch wie diese z.B. in der Engine verwendet werden wird (Suchpfade, Dateitypen etc).



>> 26.05.04
[CO]
- Neues Test Entity: EntityMesh -> Zum PLTMesh austesten



>> 08.05.04
[CO]
- Dieses Projekt wird nun PLDemos ersetzen. Durch den anderen Namen unserer internen PL Tests kommt das nicht mit dem
  großen PL Demo bzw. mit möglicherweise kleineren öffentlichen PL Demos durcheinander. Dieses Projekt ist also quasi
  unsere 'interne Spielwiese' zum Experimentieren und Testen. Das alte PL Demos liegt nun verpackt im 'Backup/Old'-Ordner.
