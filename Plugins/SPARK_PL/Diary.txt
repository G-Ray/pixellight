>> 11.11.2011
[CO]
- Updated x64 Visual Studio project settings



>> 19.09.2011
[CO]
- Updated to version 1.5.5



>> 21.04.2011
[CO]
- Implemented "SPK_PLLineRendererShaders" and "SPK_PLLineTrailRendererShaders"
- Implemented "SPK_PLQuadRendererShaders"
- Implemented "SPK_PLPointRendererShaders"



>> 17.04.2011
[CO]
- As usual when dealing with rendering, there are now special classes for legacy fixed functions and shaders rendering. The previous implementation
  was using fixed functions. The shader based versions are not yet implemented.



>> 26.03.2011
[CO]
- Renamed previously experimental "SPARK_PL::SNFireDemo" scene node into "SPARK_PL::SNFire"



>> 22.02.2011
[CO]
- Thought about multiple ways how the SPARK API can be used directly together with the SPARK_PL project. For renderer, physics and sound, we wrote
  adapters because there are several such APIs with similar interfaces. I'am really not sure that this approach is the right one for the
  integration of a hightly specialized particle system component. I plan to add several "standard particle scene nodes" which can be adjusted
  by using RTTI attributes, but due to the many possibilities SPARK offeres for the creation of particle effects, it's required that one can
  access the SPARK API directly - but I don't want to force the user to download and configure SPARK just so one is able to use SPARK_PL within a
  C++ project. I started the SPARK_PL project using SPARK naming class conventions, so, I now make the next step - SPARK_PL is now the SPARK project
  with a "PixelLight" renderer API and some PixelLight scene nodes, the rest is the original SPARK project. Added the PL SDK demo PLDemoSPARK_PL
  so one can see how to use the SPARK API directly within PixelLight.



>> 21.02.2011
[CO]
- Ok, I think the plugin is now ready for the public Git-repository, although I still have to think about how the plugin can/should be used. The
  main work was writing the renderer implementations. Currently I just added some scene nodes which are actually ports of some SPARK demos. Possibly,
  it's a good idea to provide some "standard particle effect scene nodes" like a fire were the user can just adjust some RTTI attributes + it should
  also be possible to directly use the SPARK interface so that this plugin doesn't take away the freedom to do everything one may do with SPARK.



>> 20.02.2011
[CO]
- Finally, found some time (there was some left under the carpet) to continue the work on the SPARK-plugin. I can now already see particles flying
  around. I really like SPARK because it's well designed.



>> 31.01.2011
[CO]
- Started the "SPARK_PL"-project. This project integrates the free open source particle engine "SPARK" (http://spark.developpez.com) into PixelLight as a
  plugin. Within the SPARK SDK, there are some plugins for integration like Irrlicht ("SPARK_IRR") or SFML ("SPARK_SFML"), so I named this new project
  "SPARK_PL". For now, I decided to link SPARK statically because the lib is quite compact and so, this PixelLight plugin doesn't need additional
  external dependencies (but it may be changed to dynamically linked later if required/wished).
