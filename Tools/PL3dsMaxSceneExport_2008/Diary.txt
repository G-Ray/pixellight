>> 06.11.2011
[CO]
- Options: Moved "PL directories" and "Subdirectories" from the material-section into the general-section because it's not limited to materials



>> 17.04.2011
[CO]
- Autodesk 3ds Max 2012 scene exporter added



>> 21.11.2010
[CO]
- Autodesk 3ds Max 2011 scene exporter added



/*********************************************************\
 *  The entries below are in German only
\*********************************************************/



>> 10.08.2010
[CO]
- Skin-Export funktioniert wieder



>> 09.08.2010
[CO]
- "Publish"-Feature: "Run.bat" started "PLViewer.exe" nun mit dem Komandozeilen-Parameter "--multiuser false" damit man das Ergebnis
  einfach so packen und weitergeben kann ohne das Dateien im Home-Verzeichniss des Benutzers erzeugt werden (für diesen speziellen
  Anwendungsfall eher ungünstig denke ich)
- "Publish"-Feature: Statt "Config\\PixelLight viewer.cfg" wird nun "PLViewer.cfg" angelegt + "LoadLibsFromRuntime" Config Einstellung
  in "UsePixelLightRuntime" umbenannt damit alles wieder dem aktuellen Stand entspricht
-> Das "Publish"-Feature ist wieder funktionsfähig
- "PLSceneExportOptions::SetDefaultSettings()": "bCorrectPortals" auf "false" gesetzt, im Dungeon hatte ich leider eine Stelle wo mir dieses
  automatische korrigieren ein Portal falsch drehte... ich weis noch nicht genau wie/ob das besser geht, zur Sicherheit ist das nun Standardmäßig
  aus... bei soetwas automatisierten muss man wohl immer damit rechnen das es mal Randfälle gibt wo das versagt. :/
  (eventuell kommt das bei Zeiten ganz raus wenn ich dafür keine Lösung finde)
- Bei den Texture-Pfaden klar Schiff gemacht, und ab jetzt wird keine Schlamperei mehr unterstützt... leider klappte das *wie auch immer auf
  magische art und weise* rausfinden der richtigen Pfade zu den Texturen nie wirklich Wasserdicht da 3ds Max es leider zulässt das die Daten
  alle kreuz und quer verstreut herumliegen. Dadurch war es dann nicht wirklich möglich, Texturen nochmal schön in unterordner zu unterteilen
  wie z.B. "Wood"... sondern das einfachste war es immer einfach alle Texturen in den "Data\Textures" Ordner zu knallen ohne rücksicht auf
  verluste. Das mag bei kleinen Szenen noch klappen, bei größeren Szenen, oder mehreren Szenen die gleiche Texturen nutzen sollen - wurde das
  einfach nur noch Chaotisch und nicht mehr handhabbar. Darum hab ich das nun einfach alles komplett gelöscht, und nutzte ab jetzt DIREKT die
  Pfadangaben die in 3ds Max verwendet werden. Optimalerweise ist das dann z.B. "Data\Textures\MyScene\" und die 3ds Max Szene liegt im Grundordner.
  So ist es dann sehr einfach die Texturen nochmal sauber in passende Ordner zu gliedern und/oder sehr einfach die gleichen Texturen in mehreren
  Szenen zu nutzen. Jedem ist es so nun auch frei die Texturen total woanderst abzulegen. Sollte jemand hier schlampen und "Z:\wt22X\2302tfEEH2.Jpg"
  nutzen, das dann exportieren und sich wundern wieso die Szene nur auf seinem System, aber nicht auf anderen Systemen läuft - dem kann man leider
  nicht helfen. (iss nicht so das 3ds Max dann noch diese Resourcen finden könnte und der Asset Tracking Dialog von 3ds Max ist sooo schlecht
  auch wieder nicht, scheinbar aber unter den Grafikern eher unbekannt...)



>> 03.08.2010
[CO]
- "light color multiplier" wird nun unterstützt



>> 29.07.2010
[CO]
- Bugfix: Wenn Skinning verwendet wird, werden Nodes nicht mehr relativ zum Root Bone gemacht, sondern die Bones relativ zur Node...
  Hintergund ist, das nicht immer zwangläufig nur ein Root Bone vorhanden sein muss...



>> 27.07.2010
[CO]
- PLSceneMaterial::SaveTexture speichert wieder wie früher auch unbekannte Maps... da mittlerweile viele Map Typen unterstützt werden,
  und vom Benutzer im Grunde frei weitere hinzugefügt werden können, ist das so wohl das beste...



>> 20.07.2010
[CO]
- Wenn ich bei 3ds Max 2010 die IGame Methode ReleaseIGame() aufrufe, kann es sein das mir 3ds Max wegschmiert, Jens meinte
  er hätte nix dergleichen bei sich feststellen können und freute sich total das er mal keine Probleme hat, wo bei mir ein Problem
  besteht. Bei den 3ds Max Vorgängern hatte ich das Problem nicht, entweder hat sich an der Speicherverwaltung was verändert und ich
  muss irgendwo Einstellungen aktualisieren, oder es ist irgendwo ein Bug im Exporter der erst jetzt auffällt... jedenfall nix wo ich
  mal schnell in ein paar Minuten rausfinden und beheben kann - da derzeit wichtigeres zu erledigen ist hab ich einfach eine Abfrage rein
  welche 3ds Max Version, und für die 2010 Version lass ich das erstmal weg so das ich vernümpftig Exportieren kann ohne das es mir jedesmal
  danach wegknallt.
- "Publish"-Feature an PL Änderungen angepasst



>> 17.07.2010
[CO]
- Bugfix: Der Export von fx-Materialien funktioniert wieder



>> 16.07.2010
[CO]
- An die entfernten Suchpfade im LoadableManager angepasst



>> 30.06.2010
[CO]
- "PLSceneMaterial::SaveTexture()" verhält sich nun genauso wie "PLSceneMaterialFX" - wenn ein Map Name unbekannt ist, wird
  es einfach ignoriert - ansonnsten konnte es bisher zu Konflikten mit "Opacity" kommen da 3ds Max eine Map mit diesem Namen
  hat, wir aber die Transparenz als "Opacity" speichern. (und auf einmal hatte mein "Opacity" im Material - aber kein float,
  sondern eine Texture)



>> 29.06.2010
[CO]
- Die Exporter Version stimmt nun immer automatisch mit der PixelLight Version überein



>> 28.04.2010
[CO]
- "SubDirectories" Standardwert wert ist wie gewünscht, und in der Praxis sinnvoller, nun 'true'



>> 24.04.2010
[CO]
- An Konfigurations-Änderung angepasst (nur relevant für "Publish"-Feature)



>> 07.04.2010
[CO]
- "Deferred.sr" in die Liste der Scene Renderer eingefügt und zum per Default ausgewählten Scene Renderer gemacht da dieser einfach
  mehr hergibt als der Forward Scene Renderer.



>> 14.10.2009
[CO]
- 3ds Max 2010 Version des Szene Exporters hinzugefügt. Habe dafür einen eigenen Ordner 'PL3dsMaxSceneExport_2010' gemacht
  in dem die CMake + VC Dateien liegen, der Rest wird von 'PL3dsMaxSceneExport_2010' weitergenutzt. Leider gabs diesmal mini
  Änderungen in der API so das nun schon wieder mit #ifdef gearbeitet werden muss. :/
  Auch sah ich nach dem Export erstmal nur Schrott... ein Blick in die Material Dateien zeigte aber was los war... da stand
  nun z.B. "1,123" anstatt "1.123". Daher wird die Locale nun vor dem Export auf etwas bekanntes gesetzt und danach wieder
  zurückgesetzt.



>> 08.02.2009
[CO]
- Exporter Version auf '0.8.6' gesetzt



>> 07.02.2009
[CO]
- Bei 'Publish' werden nun auch die benötigten VC Dateien kopiert
- Bei 'Publish' wird nun eine 'Run.bat'-Datei angelegt damit man seine Szene mit einem klick 'starten' kann
- Bei 'Publish' wird nun eine 'Config\PLCore.cfg'-Datei angelegt in der 'LoadLibsFromRuntime' auf '0' gesetzt ist
-> Damit müsste die 'Publish'-Option komplett sein



>> 05.02.2009
[CO]
- 'Animation Playback'-Option im Export-Dialog hinzugefügt... falls man mal direkt nach dem Export kein automatisches
  Abspielen von Animationen haben will



>> 01.02.2009
[CO]
- 'PLSceneNode::WriteModifiers()': 'm_pIGameNode->GetIGameControl()' gaugelt mir warum auch immer immer wieder mal einfach so vor das eine
  Node keine Keyframes hat... und dann werden natürlich auch keine Exportiert obwohl eine Node Keyframes hat.
  Daher nutzte ich hier nun nicht mehr IGame sondern die 3ds Max API direkt - und schon funktioniert das ganz wunderbar...
  -> Damit können nun auch endlich Keyframes für Dummy-Nodes exportiert werden.
- 'PLSceneNode::HasModifiers()': Da wir mittlerweile unsere eigenen XML-Klassen auch im Exporter nutzen sind einige Dinge einfacherer geworden...
  und wir brauchen diese Funktion hier nicht mehr wirklich... daher entfernte ich diese.
- 'PLSceneMesh': Konnte endlich die lästige 'OriginalNormals'-Option entfernen - so wie es aussieht war nur der Binormal-Vektor invertiert,
  nun sehen alle meine Tests nach dem Export immer ok aus. 'CalculateTangentSpaceVectors()' ebenfalls entfernt.



>> 22.01.2009
[CO]
- 'PLSceneNode' nutzt nun das neue 'PLGeneral::Chunk' zum speichern der Keyframes



>> 21.01.2009
[CO]
- 'PLSceneMesh::AddMaterial()': Der Name von 'Materiallose Materialien' wird nun anderst generiert so das sich dieser nicht bei jedem neuen
  Export verändert und man dadurch ständig neue Materialien bekommt... diese waren zwar auch 'eindeutig', aber es stört irgendwie immer neue
  Namen zu bekommen. :D



>> 20.01.2009
[CO]
- 'PLScene::ExportStartCamera()': 'SNCoordinateAxisRotation' wird bei automatisch erzeugten Kameras erstmal nicht mehr automatisch der
  Szene hinzugefügt - oft ist das eher störend als hilfreich da man es dann nachträglich aus der Szene entfernen muss. Eventuell wäre
  auf dauer eine 'Debug' Check Box im Exporter Dialog nett? :D
- 'PLScene'-Konstruktor: Die Szene bekommt nun den gleichen Namen wie die Datei in der diese gespeichert wird
- 'PLSceneMesh::AddMaterial()': 'Materiallose Materialien' wurden noch nicht richtig Exportiert wenn 'Sub Directories'
  aktiv war



>> 19.01.2009
[CO]
- 'PLSceneNode::WriteModifiers()': Speichert keine Keyframe Scene Node Modifier mehr wenn sich durch diese Animation überhaupt nix ändert
  (was bei Skalierung sehr oft der Fall ist)



>> 18.01.2009
[CO]
- Es werden erstmal keine Bounding Box Informationen mehr in die Szene geschrieben da diese Daten derzeit noch nicht immer korrekt sind



>> 14.01.2009
[CO]
- 'PLSceneObject::WriteToFile()': Skin mit Unterverzeichnissen klappte noch nicht



>> 11.01.2009
[CO]
- 'PLSceneMaterialStandard::SaveParameters()': 'Subtractive Transparency' wird nun unterstützt
- 'PLSceneContainer::AddIGameNode()' schreibt keine 'Name Convention Hints' mehr ins Log da Jens das störend empfand



>> 08.01.2009
[CO]
- 'PLScene::AddMaterial(const Color &cColor, const std::string &sName)': Hier fehlte die Berücksichtigung von
  Unterverzeichnissen



>> 22.12.2008
[CO]
- PLTools: Neue Funktion: 'Convert3dsMaxVectorToOpenGLVector()': Gibt einen OpenGL-Style Vektor von einem gegebenen 3dsMax-Style Vektor zurück
- PLTools: Neue Funktion: 'Convert3dsMaxMatrixToOpenGLMatrix()': Gibt eine OpenGL-Style Matrize von einer gegebenen 3dsMax-Style Matrize zurück
- PLScene::ExportStartCamera(): Implementation ist lauffähig. Ist beim Export ein Viewport ausgewählt der keine Kamera Node nutzt so wird
  automatisch eine neue Kamera in die exportierte Szene eingefügt die soviele Viewport Einstellungen wie möglich übernimmt... denn dies war
  eine nervende regelmäßige Fehlerquelle das man keine Kamera in der Szene hatte und sich dann wunderte das man nach dem Export 'in PixelLight'
  nix sah bzw. das falsche. Die automatisch erzeugte Viewport Kamera bekommt automatisch Modifier spendiert damit man sich sofort nach dem Export
  frei herumbewegen kann... ebenfalls etwas das scheinbar genauso von Usern erwartet wird. Ich habe dabei zwei Steuerungs-Modi eingebaut:
  - Wenn beim Export 'Walk Through' aktiv ist, bekommt man eine 'frei Bewegbare' Kamera beim Export
  - Wenn beim Export irgendetwas anderes aktiv war bekommt man eine 'Orbiter Kamera'... was scheinbar in den meisten Fällen genutzt wird
  ... war nicht so ganz einfach rauszubekommen wie man abfragen kann ob gerade 'Walk Through' aktiv ist... am Ende machte ich das einfach
  indem ich den aktuellen 'Command Mode' von 3ds Max beim Export auslas und merkte das die '65585' wohl für 'Walk Through' steht - keine Ahnung
  ob das 'wirklich' so ist, scheint aber so. (konnte "natürlich" keine Dokumentation dazu finden)
- 'PLSceneExportOptions::GetRuntimeDirectory()' nach 'PLTools::GetPixelLightRuntimeDirectory()' verschoben
- 'PLTools': Neue Funktion: 'GetPLSceneViewerFilename()': Gibt den absoluten Dateinamen von PLSceneViewer zurück
- Spendierte dem Exporter eine 'Publish'-Funktion die man im Export-Dialog aktivieren kann... dann werden alle Daten die 'PLSceneViewer' benötigt
  mit ins Exportierte Verzeichniss kopiert so das man das 'Ergebniss des Exports' direkt Packen und verschicken kann. Diese Funktionalität ist
  NUR für schnelle 'Previews' oder minimal Projekte gedacht bei denen man im Grunde nur Szenen + standard Funktionalität nutzt - daher kann man
  auch nix Einstellen welche Backends man haben möchte etc. (damit z.B. ein Grafiker 'mal schnell und einfach' seine Szene dem Kunden zeigen kann)
  Ein kleines Problem hab ich noch mit den 3 VC-Runtime Dateien... da ich nicht weis woher ich diese kopieren kann...
- Exporter Version auf '0.8.5' gesetzt



>> 21.12.2008
[CO]
- 'Index Of Refraction' des 3ds Max Standard Materials wird nun ebenfalls Exportiert
- 'PLSceneObject::WriteToFile()': Multimaterial-Support für Instanzen ist Funktionsfähig (werd mir das aber nochmals anschaun :)



>> 19.12.2008
[CO]
- PLSceneObject::WriteToFile(): 'Skin'-Implementation erweitert... denn es gibt leider auch den komplizierteren
  Fall das eine Mesh-Instanz ein anderes Material nutzt das in wirklichkeit ein 'Multimaterial' ist... und in
  dem Fall muss man eine richtige 'skin'-Datei anlegen und die Materialien 'mappen'.
  Die Implementation ist momentan noch Auskommentiert da noch nicht fertig.



>> 30.11.2008
[CO]
- PLSceneMaterialStandard::SaveParameters(): Support für 'Normal Bump' Texture Map eingebaut. Anstatt wie bisher für unseren Exporter Normal Maps
  im 3ds Max Material unter 'Bump' abzulegen sollte man nun 'Normal Bump' im 3ds Max Material nutzen... hat den Vorteil das man dann auch noch in 3ds
  Max korrekt Rendern kann solange man keine 'xGxR' Normal Map nutzt. In 'Normal Bump' selbst kann man eine Normal Map UND eine Height Map (-> "Bump")
  ablegen, man bekommt also 2 für eines. *g*
  Rauszubekommen wie man an diese Daten kommt war wieder mal total 3ds Max Typisch... googeln... fand in einem Französischen Forum Posting (zum Glück
  reichten meine verkümmerten Französisch Kentnisse um den Inhalt noch erfassen zu können *g*) dann wie man an diese Daten kommt... im 3ds Max SDK
  liegt unter "maxsdk/samples/materials/NormalBump" als 'Beispiel' die Quellcodes von 'Normal Bump'. Brrr, ich hasse soetwas. Musste nun noch Header von
  hier in unser "External"-Verzeichniss kopieren um an die Daten zu kommen.



>> 28.11.2008
[CO]
- Verzeichniss 'PL3dsMaxSceneExport' in 'PL3dsMaxSceneExport_2008' umbenannt
- 3ds Max 2009 Version des Szene Exporters hinzugefügt. Habe dafür einen eigenen Ordner 'PL3dsMaxSceneExport_2009' gemacht
  in dem die CMake + VC Dateien liegen, der Rest wird von 'PL3dsMaxSceneExport_2008' weitergenutzt.
- Options-Dialog: Bei bestimmten Controls setzten sich fälschlicherweise andere Controls zurück
- PLScene: Fing damit an zu Implementieren das man auch ohne Kamera in der Szene das sieht was im selektierten Viewport zu sehen war. Dazu
  greife ich auf den Viewport zu und erzeugt in der PL Szene eine Kamera mit passenden Einstellungen... allerdings hab ich es noch nicht
  hinbekommen Position und Rotation korrekt zu exportieren. :/
  Wenn das geht kann man endlich auch 'mal schnell einfach so' z.B. einen Teapot in einer frischen Szene hochziehen und sofort ohne weiteres
  Exportieren.
- Der Exporter bietet nun auch eine eigene Toolbar an über die man sehr schnell 'Previews in PixelLight' machen kann. In 3ds Max kann man diese
  Toolbar über 'Utilities' (*Hammer*) -> 'More...' -> 'PixelLight Scene Exporter Toolbar' erzeugen. Ich entschied mich dagegen eigene Icons zu
  machen da man diese ansonnsten auch noch im 3ds Max UI Ordner hätte ablegen müssen... und das kann potentiell schief gehen - lieber NUR eine
  Datei für das PL-Plugin selbst.



>> 23.11.2008
[CO]
- "PixelLight_SRShaderLighting.fx": 'IndexOfRefraction'-Parameter hinzugefügt, visualisiert wird dieser Parameter noch nicht im fx-Shader,
  aber so kann man das wenigstens von 3ds Max aus Einstellen



>> 19.11.2008
[CO]
- PLScenePLMesh::WriteMesh(): Wenn ein Point Cache nicht geöffnet werden konnte schlug hier momentan das gesammte Speichern
  des Meshes fehl - das sollte natürlich nicht sein. Nun wird soetwas 'stillschweigend' Tolleriert und beim ermitteln
  des Point Cache Dateinamens eine Warnung ins Log geschrieben falls die Point Cache Datei nicht gefunden bzw. geöffnet
  werden konnte.
- PLSceneObject::WriteToFile(): Der erste angehängte 'SNMMeshAnimation' Scene Node Modifier bekommt eine Abspielgeschwindigkeit
  von '1' , alle anderen wie gehabt '0'... so sieht man nach dem Export 'etwas'.



>> 18.11.2008
[CO]
- PLSceneMesh: Sammelt nun alle Point Cache Modifier auf, ob deaktiviert oder nicht - PLSceneMesh speichert nicht mehr
  'einen' Point Cache Dateinamen sondern eine Liste von Dateinamen. Morph Targets die aus Point Caches erzeugt werden
  haben Namen wie z.B. 'idle_0, idle_1, idle_2...', oder 'walk_0, walk_1, walk_2...' - entsprechend des Namens der
  Point Cache Datei. (z.B. 'idle.pc2' oder 'walk.pc2')
  Die jeweilige 'Morph Target Animation' heißen dann z.B. 'idle' oder 'walk'.



>> 14.11.2008
[CO]
- Bugfix: 'WriteMeshBoundingBox()' muss natürlich in 'PLScenePLMesh::WriteMeshFile()' und nicht 'PLScenePLMesh::WriteMesh()'
  aufgerufen werden...



>> 12.11.2008
[CO]
- PLSceneMesh: Neue Funktion: AddNodeTrackAnimations(): 'Durchkämmt' die 'Keys' eines 'Note Tracks' die man an 3ds Max
  Nodes anhängen kann nach Animations Informationen die über eine eigene Syntax definiert werden.
- PLSceneMesh: Am Animations-Support weitergearbeitet. Mittlerweile haben wir Support für 'Skeleton', 'Morph Target'
  und 'Point Cache' Animation... auch wenn die letzten beiden am Ende nicht mehr unterschiedlich sind. Für jeden Typ
  gibts eine 'Alles Animation' Namens 'Skeleton animation', 'Morph target animation', 'Point cache animation'.
- PLSceneObject: Schreibt alle 'gesammelten Animationen' zusätzlich als 'SNMMeshAnimation' in die Szene raus damit
  man die Animationen über den Scene Graph komfortabel ansprechen kann.
- PLScenePLMesh: Animationen werden im 'CHUNK_ANIMATIONS' gespeichert, dabei sind nur die 'Globalen'-Animationen
  standardmäßig aktiv (Animationen mit ALLEN Frames)
- PLSceneNode::WriteModifiers(): Bei den Keyframe Modifiern erstmal 'FramesPerSecond' schreiben rausgenommen so das
  dies Default mäßig auf 24 steht - 'GetFrameRate()' gab mir bei einer Szene ein unpassendes '30' zurück so das
  ein Zusammenspiel von Animationen nicht richtig klappte. (muss ich mir bei Zeiten nochmal genauer anschaun)



>> 11.11.2008
[CO]
- PLScenePLMesh::WritePointCacheMorphTargets(): Morph Targets wurden aus Point Cache Daten falsch berechnet so das es sein konnte
  das die exportierten Morph Targets nicht korrekt waren
- 'PL3dsMaxModelExport' *wieder einmal* entfernt da der Scene Exporter mittlerweile recht brauchbaren Animations-Support hat. Zwar
  ist dieser noch nicht wirklich 'perfekt' da z.B. Bones mit Skalierung noch probleme machen - aber wenn man 'sauber' und ohne
  'sonderbare' Dinge arbeitet kommt man mit dem was geht schon ganz gut über die Runden. :D



>> 06.11.2008
[CO]
- PLSceneMesh::CollectMeshData(): Wenn ein 'PointCache'-Modifier vorhanden ist wird hier 'nur' der Dateiname
  des 'PointCache' ermittelt (die Daten liegen in einer externen Datei...)
- PLScenePLMesh::WriteMesh(): Läd die Daten in der 'PointCache'-Datei ein. Wir unterstützen erstmal nur das
  'PC2' Format Version 1.
- Von 'PLScenePLMesh::WriteMorphTarget()' gibt es nun 3 Varianten: 'Basis Frame',
  'Morph Targets aus Morpher Modifier' und 'Morph Targets aus Point Cache' ('WritePointCacheMorphTargets()')
- PLScenePLMesh::WritePointCacheMorphTargets(): Fügt dem Exportiertem Mesh nun Point Cache Frames als Morph
  Targets hinzu ("PointCacheFrame_<frame>")
- 'PointCache'-Animation wird als Name 'Point cache animation' gespeichert, darüber kann man eine Animation
  direkt abspielen ohne per Hand die einzelnden Morph Targets ansteuern zu müssen



>> 05.11.2008
[CO]
- 'morpher.lib' im External-Ordner entfernt da seit langem nicht mehr benötigt
- PLSceneMesh::CollectMeshData(): Hält nun nach 'PointCache'-Modifier ausschau (mehr noch nicht)



>> 04.11.2008
[CO]
- PLSceneExportOptions::SetDefaultSettings(): Fügt auch Default Optionen wie z.B. Scene Renderer neu hinzu
- Version von "0.8.3" auf "0.8.4" geändert, das ist denke ich ok wenn diese Version weiterhin unabhängig vom PixelLight Release
  ist da nicht bei jedem PixelLight Release sich was am Exporter ändern wird und man dann nicht immer unnötig per Hand auch hier
  Versions Informationen aktualisieren muss.



>> 01.11.2008
[CO]
- PLScene::AddMesh(): Implementation etwas vereinfacht indem von IGameNode direkt die 3ds Max Node genutzt wird
- PLSceneLight::WriteToFile(): Implementation etwas vereinfacht
- PLSceneContainer::WriteToFile(): Bounding Box wird wieder mitgespeichert
- PLSceneContainer::AddIGameNode(), PLSceneNode::IsRotationFlipped(), PLSceneObject::PLSceneObject(), PLSceneNode::PLSceneNode():
  Der Aufruf von 'GetIGameObject()' sollte wo immer möglich vermieden werden da der erste Aufruf davon bei einer Node sehr
  langsam sein kann. (gerade wenn ein Objekt viele Polygone hat) Selbst wenn man viel Instanzing nutzt konnte es
  bis jetzt sein das der Export trotzdem recht lang dauerte obwohl keine neuen Meshs gespeichert wurden... allein
  der Aufruf von 'GetIGameObject()' verlangsamte deutlich. :/



﻿﻿>> 29.10.2008
[CO]
- PLSceneMesh: CollectMeshData()/GetIGameMaterial() Bugfix: Es kann vorkommen das in einem Multi-Material ein Slot
  in der Mitte nicht belegt ist... Man hat z.B. 10 Slots, Index 5 ist nicht belegt. IGame gibt nun zurück es seien
  '9' Slots, ignoriert also schonmal gleich den leeren Slot. Die Indices in den Faces arbeiten allerdings mit 10
  Indices... und schon stimmen Materialien nicht. Über 'IGameMesh.GetMaterialFromFace()' lies sich das zum Glück
  lösen - sprich, IGame selbst soll einen ein IGameMaterial für ein bestimmtes Face zurückgeben.



>> 28.10.2008
[CO]
- PLSceneMesh::GetVertex(): Bei den Texture Koordinaten hatte sich ein ziemlich dämlicher Fehler eingeschlichen...
  dieser Funktion übergibt man ein Material Index - dieser Index ist für 'm_lstMaterials', wurde für 'GetIGameMaterial()'
  genutzt was dann natürlich u.a. ein total anderes Material zurückgeben konnte das z.B. andere Texture Matrizen hat...
  und schon stimmten Texture Koordinaten nicht mehr.
- Entfernte den "Flags"-Key in den "User Properties". 'Früher' ging das nicht ohne, dank Regulärer Ausdrücke & richtiger
  interner XML-Klassen geht das mittlerweile universeller über den 'Vars'-Key was viel schöner ist da 'Flags' ja ebenfalls
  'nur' eine Variable ist. Bis jetzt wurde das zum Glück nur "sehr" selten genutzt wodurch wenig angepasst werden musste.



>> 27.10.2008
[CO]
- PLTools::GetPosRotScale(): Das 'verdrehen' von Rotationen wo nötig passiert nun hier. (Kamera, Spot Light...)



>> 14.10.2008
[CO]
- Support für Hierarchien-Export verbessert, auch Rotationen werden nun korrekt mitberücksichtigt



>> 10.10.2008
[CO]
- PLSceneNode::IsRotationFlipped() & PLSceneLight::WriteToFile(): Hat man 'VRay'-Lichter in der Szene gibt es innerhalb von
  IGameLight.GetLightType() einen Crash... sollte nicht so sein, ist aber so. Da ein Crash beim Export überhaupt nicht gut
  ist habe ich noch eigene Sicherheitsabfragen hinzugefügt.



>> 28.09.2008
[CO]
- PLSceneObject::PLSceneObject(): 'ReceiveShadow' wird nun unterstützt



>> 27.09.2008
[CO]
- Nahm die 'Mesh'-Log Informationen aus dem Exporter heraus. In der Anfangs Zeit waren diese Informationen recht hilfreich, mittlerweile
  funktioniert allerdings alles eigentlich ziemlich gut + aufgrund der Masse der dadurch erzeugten Information ist diese nicht mehr
  wirklich hilfreich und verlangamt nur den Export (selbst wennn nicht aktiviert) + macht den Code unübersichtlicher.



>> 23.09.2008
[CO]
- Habs gerade ENDLICH geschafft das Tims Skelett nach dem Export immer noch korrekt tanzt... war natürlich eine kleine dämliche
  Sache und im Grunde kann ich nicht sehen das ich vorher etwas 'falsch machte':
  Das 'Problem' lag beim Animations Frame relative zum Basis Frame machen. (damit man Animationen 'aufaddieren' kann)
  Früher nutzte ich "cGMatrix *= cBaseGMatrix.Inverse()", also Basis Matrize von der aktuellen Matrize abziehen. Gut und korrekt...
  lieferte aber irgendwie nicht wirklich korrekte Ergebnisse. (Problem mit Ungenauigkeit? Eventuell spielt Skalierung mit rein? Oder
  steh ich irgendwo total auf dem Schlauch?!)
  Als ich erkannte das hier das Problem ist ging ich die Sache anderst herum an: Nun lasse ich mir Position & Rotation des aktuellen
  Frames geben, also wie vorher nur das kein Basis Frame bereits abgezogen wurde. Danach hole ich mir die Position und Rotation
  des Basis Frames und dann zieh ich Position und Rotation 'per Hand' ab ohne über Matrizen zu gehen... und schon war das Problem weg.
  Ich liebe solche Dinge... an dennen man schwer anfängt an seinem Verstand zu zweifeln... und Tage daran knappert... brrr...
  Was ich mir noch überlegen muss ist wie man korrekt 'Node Bewegung durch Animation' rüberbringen kann so das dies z.B. auch mit der
  Physik zusammenspielen kann. Es steht auch noch einiges durchtesten an ob alle mir zur verfügung stehenden Modelle mit Animationen
  funktionieren... erst danach werd ich dann den alten Model Exporter entgültig über den Jordan schicken und werde dann noch hier und
  da etwas komplettieren. Die Hauptarbeit animationstechnisch müsste nun aber erledigt sein. *schweiß von der Stirn wisch*



>> 22.09.2008
[CO]
- Modifier werden nur genutzt wenn 'Enabled'



>> 19.09.2008
[CO]
- Skeleton: Vertex Gewichtungen werden mit Exportiert
- PLSceneMesh::CollectMeshData(): Sammelt nun auch Animations Informationen. Ist im Grunde wie beim alten 3ds Max Model Exporter - das
  war schon recht brauchbar - falls man das noch verbessern kann wird das natürlich gemacht. :D
- PLScenePLMesh::WriteMorphTargetAnimation(): Der Morph Target Animation Export funktionierte sogar bereits
- Skelett Animationen lassen sich nun Exportieren... allerdings stimmt etwas mit der Node Position noch nicht wirklich...



>> 18.09.2008
[CO]
- Neue Funktion: PLSceneMesh::CollectMeshData(): Hierin werden nun die Mesh Daten gesammelt anstatt direkt im Konstruktor... das macht
  die Sache ein klein wenig überschaubarer
- PLSceneNode::PLSceneNode(): Sucht nach 'Skinning Modifier', wurde einer gefunden so wird die Node Position vom Root Bone gesteuert,
  und daher sollte man die Root Bone Transformation nehmen anstatt die 'Original' Node Transformation
- PLSceneMesh::CollectMeshData(): Sucht nach 'Skinning Modifier', wurde einer gefunden so wird Skinning berücksichtigt. Wie gehabt
  werden die in 3ds Max gängigen Techniken unterstützt, nicht nur eine... macht IGame intern das es hier nun endlich etwas einfacher
  wird als früher. Im Falle von Skinning wird als Mesh Basis die 'Initial Pose' genommen anstatt das Mesh 'wie es gerade mit Skinning
  aussieht'. Zur Sicherheit überprüfe ich direkt auch ob die Anzahl der 'Skinned Vertices' mit der Anzahl der Mesh Vertices übereinstimmt...
  In den mir zur Verfügung stehenden Modellen ist das so - und ist scheinbar/hoffentlich immer so. Falls dem nicht so ist - was sicherlich
  irgendwann mal vorkommen wird wie ich 3ds Max kenne - so wird eine Warnung ins Log geschrieben. Im gegensatz zu unserem alten Model Exporter
  werden IMMER ALLE Bones Exportiert auch wenn diese keinen Vertex beeinflussen... der Grafiker muss wissen was er tut, und es gibt Fälle
  wo soetwas durchaus gewollt ist... z.b. wenn die Bones 'helferlein' sind wo man später was anhängen kann. :D



>> 17.09.2008
[CO]
- PLSceneMesh::PLSceneMesh(): Wurde ein Skinning-Modifier gefunden, so wird das 'InitialPose'-Mesh genutzt um z.B. Vertex Positionen
  zu ermitteln



>> 10.09.2008
[CO]
- PLSceneNode::IsRotationFlipped(): Speichert sich nun 'einmal' was vorliegt
- Neue Funktion: PLTools::GetPosRotScale(): Gib Position, Rotation und Skalierung von einer Matrize zurück
- PLSceneNode::WriteModifiers(): Kann nun einfache Keyframes speichern... das läuft hier ebenfalls über einfache Scene Node Modifier. :D
- PLSceneSpline::WriteToFile(): Noch ein Stück robuster hinbekommen, bei 'Close()' konnte es vorher zum Crash kommen
- PLSceneNode::WriteModifiers(): "percentage along the path" wird endlich korrekt mit Exportiert
- 'PLSceneMaterialColor' hinzugefügt das aus einer einfachen Farbe erzeugt wird und nur 'DiffuseColor'-Parameter hat
- 'PLSceneMesh::AddMaterial()': Nutzt eine 3ds Max Node kein Material, so wird ein 'PLSceneMaterialColor' Default Material erzeugt
  mit 'Wire Color' (= Object Color) als Diffuse Color -> so sieht man nun nach dem Export etwas auch wenn eine 3ds Max Node kein
  Material hatte. Vorher war das doch etwas verwirrend wenn nach dem ersten minimal Export versuch nix zu sehen war. :D



>> 03.09.2008
[CO]
- Bei XML-Deklarationen wird nun als Kodierung "ISO-8859-1" gesetzt. TinyXML kodiert leider scheinbar z.B. keine Umlaute, und
  steht nix spezielles bei Kodierung wird 'UTF-8' angenommen... und z.B. XML-Parser von Java ("javax.xml.parsers") weigern
  sich dann die XML-Dateien einzuladen. Darum nun erstmal "ISO-8859-1" damit das Problem umgangen ist... bei Zeiten sollte man
  eventuell versuchen in TinyXML etwas auszubessern bzw. zu erweitern.



>> 27.08.2008
[CO]
- Morph Target Export robuster gemacht



>> 25.08.2008
[CO]
- Fand gerade nach langem herumprobieren (Optionen rein/raus) heraus wieso der 3ds Max Scene Exporter bei 'unseren' VC Einstellungen
  beim Export von Morph Targets Crashte... füge ich die Preprocessor Einstellung "_SECURE_SCL=0" ein, so läuft alles sauber ohne
  Crash... wow, das scheint wirklich 'nur' das gewesen zu sein! (das aber rauszubekommen war ein heftiges herumgefussle :)
  Habe diese Option auch mal bei "CMakeLists.txt" eingefügt + angefangen die 3ds Max Scene Exporter VC Projekt Datei wieder
  'unseren' Projekteinstellungen anzupassen damit das nicht allzusehr aus der Reihe tanzt.
- PLSceneSpline: Sieht so aus als würden Pfade nun korrekt Exportiert werden... leider sind die 3ds Max Interfaces wirklich sehr
  dürftig Dokumentiert so das man z.B. raten darf in welchem Koordinaten System etwas zurück gegeben wird, ob automatisch Koordinaten-
  Systeme angepasst werden etc.
- 64 Bit 'Bugfix': PLSceneExportOptions::GetRuntimeDirectory(): Macht ein 32 Bit Programm bei einem 64 Bit OS in der Registry herum, so
  landen dessen Einträge in einem 'Wow6432Node'-Unterordner. Also statt 'SOFTWARE\\PixelLight\\PixelLight-SDK' dann
  'SOFTWARE\\Wow6432Node\\PixelLight\\PixelLight-SDK' ... nicht das es zu einfach wird. *g*
- Wenn noch keine Konfigurations-Datei da war kommt nun keine Versions-Warnung mehr



[CO]
- Da angefragt kümmerte ich mich darum das wir zumindestens schonmal eine 64 Bit Version des 3ds Max Scene Exporters haben. Habe hier
  selbst zum Testen Windows XP 64 Bit und es scheint korrekt zu laufen. :D



>> 20.08.2008
[CO]
- PLScenePLMesh::WriteMorphTarget(): Bevor das Morph Target exportiert wird, wird nun zuerst die Anzahl der Original Mesh Vertices
  mit der Anzahl der Deltas vergleichen - im 'normal Fall' sind diese zwei Zahlen identisch. Hatte hier aber nun einen Fall
  in dem die Nummern unterschiedlich waren da das Mesh bearbeitet wurden 'nachdem' das Morph Target erzeugt wurde. Ergebniss war
  das an ein paar Stellen wo es nicht sollte sich 'in PixelLight' dann Vertices änderten. Ist also kein Fehler des Exporters
  oder unserer "Engine", sondern die Daten im 3ds Max Morpher Modifier passen dann einfach nicht mit den Daten des Meshs zusammen.
  Da man in 3ds Max selbst nix davon merkt und es dort korrekt aussieht (nutzen wohl andere Daten :) baute ich eine Warnung ein wenn
  so eine Situation erkannt wird + erwähnte das im 3ds Max Scene Exporter Morpher Modifier Tutorial + im 3ds Max Scene Exporter FAQ.
  Brauchte etwas um diesen Problem und der Lösung auf die Spur zu kommen - darum diese 'Sicherungsmaßnahmen' damit man wenn man das
  nächstes mal drüber stolpert nicht Hilflos dahsteht.



>> 19.08.2008
[CO]
- Support für Hierarchien-Export hinzugefügt. Wenn eine Node Kinder hat, so wird diese Beziehung nun also übernommen. Habe das so gelöst
  das ein SceneContainer 'schnellvertretend' mit gleichen Namen wie die Node erzeugt wird -> dort wird dann die 'Original Node' eingefügt
  und die Kinder - auch wenn es noch eher Experimentell ist funktioniert es schon sehr gut und genügt den aktuellen Anforderungen. :D



>> 16.08.2008
[CO]
- Gestern probierten Tim und ich aus eine Szene von ihm 'aus dem Stand' direkt einmal 'nach PixelLight zu Exportieren'. Gab natürlich
  wieder ein paar kleine 'probleme' die fast immer auftreten/bekannt sind. Nach ein paar Minuten war die Szene dann mit Walk-Through
  in PixelLight korrekt zu sehen... hätte mich aber gefreut, und Tim sicherlich noch mehr beeindruckt, wenn das 'sofort' mit einem
  einzigen ersten Export bereits alles sauber funktioniert hätte. Ich versuche nun mal das zu verbessern damit es noch 'runder' wird.
- 'Overwrite Ambient Color' ist nun standardmäßig an. Wir hatten nun einfach zu oft (gestern natürlich auch) die Situation das in
  der 3ds Max Szene Ambient Color schwarz war und man dann in der Exportierten Szene erstmal nur einen schwarzen Bildschirm hatte
  weil z.B. 'Basic.sr' genutzt wird das keine Lichter etc. kennt. So herum ist die Chance das der 'erste PixelLight Export' gleich
  auf dem Bildschirm zu sehen ist höher - und will man dann die Ambient Color aus seiner 3ds Max Szene übernehmen, muss man die
  Checkbox 'abkreuzen'.
- PLScene::AddMaterial(): Das kopieren der Texturen wenn 'Create materials' nicht gesetzt ist klappt nun wieder korrekt. Habe bei
  der Gelegenheit auch gleich nochmal die kombinationen 'PL directories' und 'Sub directories' getestet - funktioniert alles wie
  es soll.
- Nahm die Option 'Relative data' heraus da diese mittlerweile 'so gut wie Tot' war und ich irgendwie auch keinen richtigen Sinn mehr
  dafür finden konnte. Eine möglichkeit wäre gewesen diese Option in 'Keep absolute data' umzubenennen so das dann z.B. absolute
  Pfadangaben zu Texturen '1 zu 1 übernommen' würden - aber auch hier konnte ich keinen Sinn dafür sehen... eher würde das wohl Probleme
  verursachen wenn das jemand 'aus versehen' anklickt und sich dann Wundert wieso 'PixelLight die Texture auf einem anderen Rechner
  nicht finden kann'. *g*
- PLSceneTexture: Internen Dateinamen wieder entfernt da dies nun nicht mehr nötigt ist
- Baute in den Exporter Dialog einen 'Help'-Knopf ein, drück man darauf, so wird PL3dsMaxSceneExport.pdf geöffnet (ein hauch von Luxus *g*)



>> 11.08.2008
[CO]
- PLSceneTexture: Speichert intern nun den Dateinamen der z.B. in Materialien verwendet wird
- PLScene::CopyTexture(): Gib das erzeugte/ermittelte Texture-Objekt zurück
- PLSceneMaterial::SaveTexture() und PLSceneLight::WriteToFile() nutzen nun das erzeugte/ermittelte Texture-Objekt und
  den darin gespeicherten Dateinamen anstatt einen Dateinamen selbst nochmal zusammenzuwurschteln
- PLSceneTexture::PLSceneTexture() & PLScene::AddMaterial() & PLSceneMaterial::Create(): Durch nutzung der
  PLGeneral::Url-Klasse vereinfacht
- PLSceneTexture: Support für Texture Unterverzeichnisse eingebaut. (die Dungeon-Szene nutzt das!) Ich lasse einfach nach
  "Textures/" im Dateinamen suchen und nehme dann 'alles dahinter' und lasse vorher die entsprechenden Texture-Unterverzeichnisse
  erzeugen da die Windows-Funktion 'CopyFile()' sind nix kopiert. Diese Lösung ist nicht sonderlich schön und macht sicherlich
  in bestimmten Situationen probleme - aber mir viel selbst nach langem überlegen (habe nun schon seit Monaten vor das einzubauen!)
  nix wirklich besseres ein. Leider kann ein Grafiker Texturen wirklich 'überall' ablegen so das man einfach mit allem zu rechnen hat. :(
  So lässt sich die Dungeon-Szene nun wenigstens sauber Exportieren und eventuell kommt doch noch irgendwann der Geistesblitz wie es
  noch besser geht.
- PLScene::AddMaterial(): Es sind nun auch Material Namen wie z.B. 'Wood\Dark' erlaubt. In dem Falle wird das Material in einem
  Unterverzeichniss 'Wood' angelegt. Baute hier auch einen Test ein der es verbietet z.B. 'c:\Bla' als Material Namen zu nehmen -
  denn das ist Gefährlich und wird daher sofort mit einer Fehlermeldung im Log unterbunden. (ja, man muss mit allem rechnen *stöhn*)
- PLSceneMaterial::Save() muss durch die obrige Änderung nun sicherstellen das alle Verzeichnisse korrekt vorhanden sind, ansonnsten
  schlängt das speichern der XML Datei fehl (was auch korrekt so ist :)



>> 08.08.2008
[CO]
- Da mir die 'PLSceneMesh'-Klasse mittlerweile viel zu umfangreich ist und noch umfangreicher wird wenn Skeleton & Animation Support
  drinnen ist entschloss ich mich dazu diese in 'PLSceneMesh' und 'PLScenePLMesh' zu unterteilen. Die erste sammelt die Daten und
  bereitet diese auf, die zweite Klasse speichert die Date in unserem PixelLigh Mesh Format.



>> 07.08.2008
[CO]
- Ich kam 'endlich' dazu die boolschen Fehlerindikations-Rückgabe Werte nochmal durchzuschaun - das stand schon Ewig auf meiner
  ToDo-Liste. Fand tatsächlich noch ein paar Stellen die noch nicht ok waren. :D



>> 03.08.2008
[CO]
- Die Umstellung von "%g" auf "%e" am "23.09.2007" brachte zwar hohe Genaugkeit, jedoch gib es Leute die von der Exponentenschreibweise
  schwer verwirrt werden. Daher änderte ich nun auf "%f", mal schaun ob hier ebenfalls bei kleinen Werten unschön gerundet wird...
- Der Exporter nutzt nun die statische Version von PLGeneral, somit können wir nun unsere eigenen Klassen nehmen anstatt uns
  mit unschönen anderen Tools herumärgern zu müssen ohne das der Exporter von "PLGeneral.dll" abhängig wird was bei bestimmten Personen
  regelmäßig zu Problemem führt und daher als Option nicht in Frage kommt.
- Zum schreiben von XML-Dateien werden nun unsere XML-Klassen verwendet. Dadurch wird dort wo nötig automatisch Maskiert... jetzt
  können sich die Grafiker noch mehr bei der Namenswahl austoben ohne eine gewischt zu bekommen. *g* (Thematik '&' in Namen etc.)
  Ganz nebenbei hatte das auch noch den Effekt das man nicht mehr so einfach aus 3ds Max heraus 'ungültige' XML Szenen erzeugen
  kann in dem man z.B. in den "User Properties" Schrott einträgt... 'doppelte' Attribute gehören damit der Vergangenheit an. Die
  Arbeit hat sich also denke ich gelohnt da alles dadurch noch ein Stück robuster wurde. :D



>> 27.07.2008
[CO]
- Von Jens kam gerade die Anfrage ob es nicht irgendwie möglich sei im Export Dialog eine andere Ambient Farbe einzustellen
  da es bei Lightmaps scheinbar sonst ziemlich umständlich ist innerhalb 3ds Max die Ambient Farbe immer korrekt einzustellen.
  (wow, was für ein Satz *g*)



>> 26.07.2008
[CO]
- Da es ein Speicherchaos im Morpher Modifier gab und ich schlichtweg nicht an saubere Daten davon kam Experimentierte
  ich etwas um der Sache auf den Grund zu gehen. Nach einer Weil nahm ich dann einfach '3dsexp.vcproj' aus dem 3ds Max
  SDK als 'Ausgangsbasis' für eine komplett neue VC Projekt Datei - nach einem Test ob es so herum geht, der Erfolgreich
  verlief, bastelte ich diese VC Projektdatei entsprechend um damit das für den 3ds Max Scene Exporter alles passt. Wow,
  das ist ziemlich Tricky die Compiler Einstellungen so hinzu bekommen das 3ds Max keine Probleme macht. Nun scheint es
  jedenfalls zu funktionieren und meine Tests mit dem Morpher Modifier lieferten scheinbar ENDLICH korrekte Daten.
- PLSceneMesh um Morph Target Export erweitert, konnte den Code aus dem alten Model Exporter fast komplett übernehmen
- PLSceneObject::WriteToFile: Hängt 'SNMMeshMorph' an damit man bequem Morph Targets z.B. über den Debug Dialog ansteuern
  kann - Option im Exporter Dialog zum unterdrücken dieses 'Features' fehlt noch



>> 23.07.2008
[CO]
- PLSceneExportOptions: Um Format Versions Informationen erweitert + Support für 'V0', sprich, Scene Renderer
  Namens Änderung behandlung...



>> 25.04.2008
[CO]
- PLSceneNode::WriteVariables(): Bevor der Variablen-String gespeichert wird, wird nun geprüft ob 'Flags' drinnen steht und falls ja wird
  eine Fehlermeldung ausgegeben da dies 'möglicherweise' zu einer ungültigen XML Datei führt. (zwei Attribute mit gleichem Namen) Man könnte
  auch versuchen das 'herauszuschneiden', das wäre aber sicherlich fehleranfällig und eventuell auch mal unerwünscht.



>> 17.04.2008
[CO]
- Entfernte nach Rücksprache mit Jens den 3ds Max 8 Support. Nun also nur noch 3ds Max 2008. Die ältere Version hatte einige üble Macken
  wie z.B. das man selbst per Hand eine aktuelle 'IGame.dll' einspielen muss und wehe dem man vergisst das. Auch gingen irgendwie einige
  Direct3D FX Funktionen nicht so wie diese sollten so das ich 'Hacks' im fx-Shader selbst machen musste. (feste Reihenfolge wie die
  Parameter kommen MÜSSEN, war sehr unschön und Fehleranfällig...)



>> 04.04.2008
[CO]
- Support für "Bake Shell" 3ds Max Materialien eingebaut, also das was "Render To Texture" in 3ds Max erzeugt. Damit kann man direkt so
  die Materialien Exportieren ohne nach dem erzeugen der Lightmaps nochmal per Hand herumfummeln zu müssen. Das Lightmaps Tutorial
  muss ich noch etwas aktualisieren - das Experimentieren in 3ds Max mit der Thematik nahm mehr Zeit in Anspruch als erwartet. Mehr
  Details stehen im PLMesh-Diary.



>> 01.04.2008
[CO]
- Verschob das Kopieren der Texturen von PLScene::CopyTexture() in den PLSceneTexture-Konstruktor, dort passts besser rein
- Wird 'PixelLight_SRShaderLighting.fx' in einem Material verwendet, so wird nun auch "compressedNormalMap" intern berücksichtigt:
  'plt'-Dateien werden wie gehabt falls vorhanden automatisch mitkopiert, ist keine solche Datei vorhanden aber "compressedNormalMap"
  auf 'true', so wird nun eine automatische 'plt'-Datei erzeugt in dem bekannt gemacht wird das 'Compression="DXT5_xGxR"' eingetragen
  hat. Dies müsste den Workflow nochmal minimal verbessern da es schonmal passieren kann das man vergisst diese Datei per Hand anzulegen
  wenn man komprimierte Normal Maps nutzt. 'Komplett Automatisch' kann man das leider nicht universell erkennen ob eine dds-Textur dieses
  Format nutzt oder nicht. Verschiedene Tools nutzen interne dds-Flags um soetwas festzuhalten, allerdings ist das wenn ich das richtig
  gesehen habe nicht 'Standard' (sprich, jedes Tool macht das wie es im passt) und daher mach ich da lieber keine komplett automatische
  Erkennung da soetwas sehr schnell, sehr böse nach hinten losgehen kann.



>> 11.03.2008
[CO]
- Und noch einen 'das sollte aber nicht so sein' Punkt meiner Liste abgearbeitet: Mir viel in der 'Tomb'-Szene bei der 'Painting'-Node auf das
  die Bounding Box nicht korrekt war. Es stellte sich geraus das das Problem 'natürlich' im 3ds Max Scene Exporter lag. Selbst nachdem ich extrem
  lange herumprobierte, las, googelte, herumprobierte etc. schaffe ich es schlichtweg nicht die korrekte Bounding Box für ein Mesh mit hilfe
  der IGame oder 3ds Max Funktionen zu ermitteln - ich glaub ich bin einfach zu Dumm für 3ds Max, oder die API ist einfach nur *peep*.
  Nachdem ich nun keine Lust habe 'noch' mehr Zeit da reinzustecken entschloss ich mich kurzerhand die Bounding Box selbst zu bestimmen - das ist
  eine Zeile Code zusätzlich. Nun kann es natürlich sein das in 3ds Max eine Bounding Box anderst ist als eine die zu 100% alle Vertices korrekt
  einhüllt. Aber ich habe nun einfach wie gesagt genug davon, immer diese 'Sonderfälle' und 'Merkwürdigkeiten' + die miese Dokumentation die
  mehr Fragen offen lässt als beantwortet - da wird man noch irre bei. :/
- PLSceneObject: Setzt kein 'NoAutomaticBoundingBox'-Flag mehr, das war zwanr insgesammt irgendwie nett so wichtig Informationen direkt in der
  Exportierten Szene zu haben - aber das mit den Bounding Boxes in 3ds Max macht mich gerade offen gesagt ganz irre. Nun wird also beim Laden
  der Szene 'automatisch' die Bounding Box des jeweiligen Meshs genommen, die Ladezeiten verlängert das nicht wirklich und so wird die Exportierte
  Szene auch ein wenig kompakter. Will man warum auch immer das mal nicht so haben kann man dieses Flag immer noch in den 'User Properties' von
  Nodes per Hand eintragen.
- Ging heute mal der Sache nach wieso in der UBahn-Szene der Speicherverbrauch beim Export so in die höhe schießt so das Jens scheinbar öfters
  sogar ein 'out of memory' bekommt. Es stellte sich heraus das in PLScene::AddMesh() 'ReleaseIGameObject()' fehlte so das die IGame Daten
  'während' des Exports nicht freigegeben wurden sondern nur danach. Als ich 'ReleaseIGameObject()' einfügte wurde der Export dieser größeren
  Szene auf einmal 'sehr' langsam, langsam im Sinne von 'da müssen wir halt mal 5 Minuten beim Export warten'. Zum Glück klappte gleich die
  erste Idee wie das besser geht: Beim erkennen von 3ds Max Instanzen geh ich nun nicht mehr über das IGameObject sondern speichere in
  'PLSceneMesh' direkt den Original Zeiger auf das 3ds Max Object und vergleiche das dann direkt - damit gehts nun wieder genauso flott wie vorher,
  nur 'sehr' viel Resourcen schonender so das Jens nun nie mehr ein 'out of memory' bekommen müsste.
  IGame ist im grunde eine 'nette Idee', aber die Realsierung ist irgendwie 'unvollständig' so das man ständig 'direkt zu 3ds Max durchgreifen'
  muss was bei einem Wrapper ja eigentlich nicht ständig nötig sein sollte... nicht wenn man eigentlich 'nix besonderes' macht.
- Nahm 'PLScene::SaveMaterials()' heraus. Stattdessen werden die Materialien sobald diese 'Registriert' werden sofort gespeichert. Speicherbedarf
  mäßig ändert das natürlich nix, das brauchte eh schon nicht wirklich was... aber der Code wird etwas kompakter + der Export geht etwas schneller
  da die Texturen nun 'verteilter' herumkopiert werden anstatt alle auf einmal. So kann also die Festplatte im Hintergrund gemütlich herumrödeln
  während bereits die nächsten Daten verarbeitet werden. :)
- Ich weis nun wieder wieso ich damals beim z.B. Kamera Export bei 'Near Clipping Plane' prüfte ob der Einsgestellte Wert größer als '0.1' ist...
  ich viel gerade fast vom Stuhl als ich die aktuelle Version der 'Cabine'-Szene Exportierte und wo man nur hinblickte 'z-fighting' der schlimmsten
  Art zu sehen war! Zum Glück hatte ich recht schnell raus woran das lag: In dieser Kabine stehen die 'Near Clipping Plane'-Einstellungen auf 0 bzw.
  auf '1.0000000e-006', aber man bekommt nur 0 in z.B. den 3ds Max GUI Controls angezeigt. Das sollte natürlich nicht sein, aber der Exporter sollte
  in der Richtung auch 'freiheiten' lassen falls das warum auch immer mal Absicht ist. Daher fügte ich an diesen Stellen 'Warnungen' ein die einen
  im Exporter Log darauf aufmerksam machen das diese Werte normalerweise nicht sein sollten und es zu problemen kommen kann. (und normalerweise auch
  kommen wird :) So hat man weiterhin 'Freiheit', aber wenn man sich wundert wieso alles so kaputt aussieht hilft bereits ein Blick ins Log um dem
  'Problem' auf die Schliche zu kommen. :D
- Vertauschte bei beim Log 'Hints' und 'Errors'. Die Reihenfolge 'Errors', 'Warnings', 'Logs'... ergibt wesentlich mehr Sinn da wenn das Log aktiv
  ist 'zumindestens' wirklich schlimme Fehler drinnen stehen sollten... 'Hinweise' sind da ja eher 'untergeordnet'. :)



>> 10.03.2008
[CO]
- Da die Binormal und Tangent Vektoren von IGame oft warum auch immer nicht korrekt sind, teils ja noch nicht einmal diese Normalen alle
  Senkrecht aufeinander stehen (!) werden diese Vektoren nun im Exporter 'von Hand' berechnet - jetzt klappts auch mit dem 'Parallax Mapping'
  bei Exportierten Szenen! (Jens berichtete vor ein paar Wochen von Problemen damit)
- Vor ein paar Tagen viel mir in der 'House'-Test Szene die sich im 'PLDemos'-Repository befindet auf das vom Material 'Bark' mehrere Fassungen
  ('Bark_1.mat' etc.) gespeichert wurden was aber nicht hätte sein dürfen. Ging der Sache heute mal nach und fand den Grund für diesen Bug:
  Beim 'vergleichen' von Materialien darf man wie es aussieht nicht die Addressen der IGame-Materialien vergleichen da diese immer unterschiedlich
  sind... man muss das interne 3ds Max Material vergleichen das diese Wrappen. (Anmerkung: Material Namen darf man natürlich erst recht in 3ds Max
  NICHT als Kennung nehmen da es mehrere unterschiedliche Materialien mit gleichen Namen geben kann, darum dann beim Export '_0' etc.)
  So langsam wird meine Liste an 'da stimmt was nicht'-Dingen im Exporter kleiner... war wirklich nicht verkehrt mal selbst die ganzen Grafiken
  aufzuräumen und anhand dessen gleich den Exporter nochmal ganz genau abzuhorchen. :D
- ... natürlich, war absolut klar das das obere mit den Normalen nicht 'immer' geht - sonst wäre es kein 3ds Max! :/
  Ich habe gerade gemerkt das bei der "Statue" bei PLSamples die Beleuchtung nun weniger schick aussieht, gerade um die Nase herum. Also überall
  sieht das nun besser aus, nur dort nicht... ich liebe diese xxx Sonderfälle. *gruml* Ich nehme mal an das hier die Binormal & Tangent Normalen
  'gezielt verändert' wurden damit die Beleuchtung so aussieht wie sie aussieht - oder es gibt Situationen die im aktuellen Algorithmus zum eigenen
  berechnen noch nicht ausreichend berücksichtigt werden. Mir viel momentan keine bessere Lösung ein als in den 'User Properties'
  'OriginalNormals' einzubauen, sobald das dort drinnen steht werden die 'Original Normalen' verwendet und keine selbst berechneten - das sollte
  allerdings die Ausnahme bleiben. Vielleicht kommt man ja irgendwann dahinter wie man das alles automatisch immer korrekt hinbekommt, im moment
  bin ich aber offen gesagt ratlos.



>> 09.03.2008
[CO]
- 'Offset Mapping' in 'Parallax Mapping' umbenannt da es genauso in PL selbst so genannt wird. Da war ich mir damals einfach unschlüssig
  welchen der 3 gängigen Namen dafür ich denn nun nehmen soll. :/
- Bugfix: Wenns dumm lief wurde bei Projektiven Lichtquellen bei 'ProjectedMaterial' Absolute Dateinamen gespeichert was natürlich nicht
  ok war



>> 08.03.2008
[CO]
- PLSceneObject::WriteToFile(): Der Exporter ist nun in der Lage zu erkennen wenn die 3ds Max Node eine Instanz ist, aber ein anderes Material
  als jenes des 'Originales Meshs' genutzt wird - in dem Fall bekommt die resultierende PL Scene Node ein 'Skin' zugewiesen.
- Da es in der Vergangenheit bei Jens leider immer wieder Versions Probleme gab: Der Exporter prüft nun die 3ds Max und IGame Version +
  in der Szene landen noch genauere Informationen zu den Versionen.



>> 07.03.2008
[CO]
- PLSceneNode: Gibt man bei den 'User Properties' einer '3ds Max Node' Flags an, so werden eventuell darin vorkommende '"' automatisch entfernt -
  denn aus Gewohnheit passierte es mir natürlich das ich die angegebenen Flags in '""' schrieb :D (was natürlich kein Fehler sein soll)
- Über die 'User Properties' einer '3ds Max Node' kann man nun mit hilfe von z.B. "Class=MyClass" die Klasse der erzeugten PixelLight Scene Node
  ändern - das ist extrem praktisch, denn so lassen sich nun in 3ds Max selbst ALLE PixelLight Scene Nodes erzeugen - zur Not halt über so eine
  'Dummy Node' wenn es sich um keine 'Build In'-Klasse des Scene Exporters handelt.



>> 06.03.2008
[CO]
- Beleuchtung lässt sich nun auch direkt von 3ds Max aus über 'Object Properties' -> 'Adv. Lighting' -> 'Exclude from Adv. Lighting Calculations'
  aktivieren/deaktivieren - dadurch muss man das 'NoLighting' nicht mehr per Hand über die User-Properties setzen.



>> 03.03.2008
[CO]
- PLSceneMaterialSRShaderLighting::SaveParameters(): Konnte hier endlich einen dummen Hack herausnehmen da "pParamBlock->GetLocalName(i)"
  nun den korrekten Map-Namen liefert + die Parameter werden nun soweit korrekt Exportiert... hatte dies zuletzt mit 3ds Max 8 getestet und
  da ging es nicht - hab das gerade nicht getestet, denn den 3ds Max 8 Support könnten wir fallen lassen da es hier auch noch andere Probleme
  geben 'kann' wenn z.B. die IGame dll's Versionen nicht passen. (das wird mir langsam zu dumm, darum weg damit würd ich sagen :D)
- PLSceneMaterialStandard: Diffuse & Specular Farbe wird nun ebenfalls Exportiert



>> 01.03.2008
[CO]
- Bugfix: Bei "ShellExecute" sollte man den Dateinamen mit '"' versehen übergeben da ansonnsten es passieren kann das in einen Pfad mit Leerzeichen
  drinnen Exportiert wird (so wie es bei 3ds Max 2008 als Standard der Fall ist...) und dann kann z.B. der PLSceneViewer das natürlich nicht mehr
  korrekt laden (was aber nicht seine 'schuld' ist *g*)
- Bugfix: PLScene::CopyTexture() war noch nicht ganz ok... Hat man die Texturen z.B. in einem zum 3ds Max relativen Pfad '..\Textures\' gespeichert
  könnten die Texturen nicht gefunden werden



>> 18.01.2008
[CO]
- Projekt, Libs und Includes für 3ds Max 2008 hinzugefügt... hier erstmal 'alle' entsprechenden Dateien da der Exporter umfang
  mäßig noch lange nicht fertig ist und daher noch nicht klar ist was noch alles benötigt wird.



>> 23.11.2007
[CO]
- Folgende Parameter unseres FX-Shaders werden nun ebenfalls korrekt Exportiert: useOffsetMapping, heightMap,
  emissiveMap, lightMap, diffuseRampMap, specularRampMap, edgeRampMap



>> 21.11.2007
[CO]
- Passte das automatische auffinden des PL Scene Viewers an die SDK änderungen an (das per Hand einzutragen wäre
  ja unzumutbar *g*)



>> 26.10.2007
[SB]
- .def-Dateien gelöscht



>> 23.10.2007
[SB]
- Probehalber die .def-Dateien aus dem Projekt herausgenommen, und statt dessen extern "C" {} verwendet, um die Plugin-Funktionen
  undekoriert zu exportieren. Ich bin mir nicht sicher, ob die Namen ausreichen oder ob Max evtl. die Nummern der Funktionen in
  einer bestimmten Reihenfolge haben will. Falls das aber so geht fände ich es so besser, da man damit weniger Fehler machen kann,
  als wenn man noch eine externe Definitionsdatei einbinden muß :-)



>> 06.10.2007
[CO]
- Helper-Nodes werden nun als SNHelper gespeichert
- PLScene::AddMesh() aktualsiert damit Instanzen wieder korrekt erkannt werden
- An PLSceneSpline weitergearbeitet... allerdings werden die Positionen der Knoten warum auch immer noch nicht korrekt
  positioniert...



>> 05.10.2007
[CO]
- Licht Export nutzt nun fast nur noch IGame. Statt 'Near Attenuation End' wird nun 'Far Attenuation Start' für 'ZNear'
  verwendet da man über das IGame-Interface an diesen Wert recht einfach kommt.
- PLSceneContainer::PostProcess(): Beim Berechnen der Bounding Box sollte auch von Portalen die Bounding Box miteinfließen -
  macht man das nicht, so kann es sein das wenn ein Portal einen "merkwürdigen" Node Mittelpunkt hat die Container Bounding
  Box derart 'verfälscht' wird das der Test ob die Portale 'in' die Zelle zeigen versagen kann.
- PLScenePortal: 'Center' und 'Normal' liegen nun im World Space. 'Normal' lasse ich mir direkt von IGame über eine Face
  Normale zurückgeben. Der Test ob ein Portal korrekt in die Zelle zeigt findet nun ebenfalls im World Space statt... dadurch
  ist die Implementation etwas einfacher geworden.



>> 03.10.2007
[CO]
- 'No Duplicates'-Option heraus genommen da dies nun 'immer' automatisch gemacht wird
- Vereinfachte/Optimierte den Mesh Export: statt Listen etc. liegen die Vertex Daten etc. nun direkt in einem großen Buffer
  so das man so wenig wie möglich Dynamische Speicherreservierung hat - denn die Datenmengen werden leider teils recht groß
  so das hier wirklich jedes bischn zählt.
- PLSceneObject::PLSceneObject: So wie es aussieht ist es hier unnötig 'InitializeData()' aufzurufen... wird das gemacht
  sieht es sogar aus als ob es ein Speicherleck gäbe da 3ds Max dann bei jedem Export immer mehr Speicher frisst - leider
  ist nicht wirklich Dokumentiert WAS genau diese 'Initialisieren'-Funktion macht so das man Raten & Experimentieren muss.
- 'stricmp' durch '_stricmp' ersetzt damit die Compiler-Warnungen verschwinden. Leider geht dies über die std::string
  Klasse nur sehr umständlich... z.B. müsste man die zu vergleichenden Strings kopieren, diese kopien in z.B. kleinbuchstaben
  umwandeln und diese Strings dann vergleichen - 'minimal' umständlich, daher lieber über diese Funktion.



>> 02.10.2007
[CO]
- PLScene::~PLScene(): Speicherleck beseitigt: Die Textur Einträge wurden nicht gelöscht
- PLSceneExportOptions::~PLSceneExportOptions(): Speicherleck beseitigt: Die Kontainer Einträge wurden nicht gelöscht
- PLSceneMesh::PLSceneMesh() & PLSceneNode::IsRotationFlipped() & PLSceneNode::PLSceneNode() & PLScenePortal::PLScenePortal():
  Hier fehlte jeweils ein 'ReleaseIGameObject()' Aufruf.
- Materialien wurden gespeichert auch wenn 'Export Materials' deaktiviert war
- Meshs wurden gespeichert auch wenn 'Export Meshs' deaktiviert war
- Bei Jens konnte warum auch immer 'PLGeneral.dll' beim 3ds Max starten nicht gefunden werden und daher fing er wieder ein
  wildes herumkopieren an... er meinte das er sogar den "'Data'-Ordner" (?) in ein 3ds Max Verzeichniss kopieren musste - ganz
  offen gesagt kann ich mir absolut nicht erklären wieso diese Probleme bei ihm aufgetreten sind, denn ich hatte noch nie
  ähnliche Probleme. Um soetwas nun ein für alle mal beim 3ds Exporter zu vermeiden entschloss ich mich dazu KEINE PL
  Dinge mehr im Exporter zu nutzen und stattdessen einfach die std-Klassen zu nutzen... auch wenn das ein Umgewöhnen ist
  und ich diese Klassen ganz offen gesagt nicht sondlicher prall finde. Also wenn jetzt immer noch ein herumkopieren stattfindet...
  Eventuell könnte das später auch mal praktisch werden das der Exporter komplett eigenständig ist - z.B. wenn man das von
  anderen weiterentwickeln lässt die allerdings warum auch immer keinen Zugriff auf das PL SDK haben sollen. Da der Exporter
  nun kein 'PLGeneral.dll' mehr benötigt kann kann man den Exporter auch relativ problemlos so ohne PL Zugriff herausgeben.
  (das wäre auch über eine statische Version von PLGeneral gegangen, soetwas haben wir allerdings momentan nicht)



>> 23.09.2007
[CO]
- In der VC-Projektdatei für PL3dsMaxSceneExport8 wurde auch im Debug-Modus "PLGeneral.lib" eingebunden statt "PLGeneralD.lib".



>> 23.09.2007
[CO]
- Nachdem ich gestern recht schnell merkte das PLSceneMaterial recht umfang reich wird entschied ich mich dazu den Parameter
  Export von speziealierten Material Klassen erledigen zu lassen. Also legte ich 'PLSceneMaterialSRShaderStandard',
  'PLSceneMaterialSRShaderFX' und 'PLSceneMaterialSRShaderLighting' an wobei ersteres das aufwändigste ist da diese Implementation
  versucht die FX-Variablen möglichst geschickt zu Exportieren.
- Verpasste 'PixelLight_SRShaderLighting.fx' eine weitere Variable Namens 'alphaReference' damit man noch etwas mehr Kontrolle
  über die Semi-Transparenten Texturen hat. 'reflectionColor' heißt nun 'reflectionMapColor' da diese Farbe wirklich NUR im
  zusammenspiel mit einer ReflectionMap sinn macht. ('diffuseColor' etc. hingegen machen auch ohne Texturen Sinn!)
- Fügte eine weitere Option Namens 'smart material parameters' hinzu die standardmäßig aktiv ist. Ist dies aktiv, so werden
  Material Parameter so geschickt wie möglich Exportiert... Parameter mit Standard-Werten werden nicht gespeichert und gerade
  in 'PLSceneMaterialSRShaderLighting' wird geprüft ob ein Parameter momentan überhaupt benötigt wird. Natürlich könnte das
  auch mal unerwünschte Seiteneffekte erzeugen wie z.B. das 'EmissiveMapColor' zwar schwarz ist, man 'EmissiveMap' aber trotzdem
  haben will da man z.B. zur Laufzeit den Wert Dynamisch ändert - wobei man in dem Fall 'EmissiveMapColor' auch 'so gut wie schwarz'
  machen könnte so das es nicht wirklich Sichtbar ist, aber trotzdem nicht komplett Schwarz ist. :)
  Anfangs überlegte ich mir hier verschiedene Optionen anzubieten um etwas mehr Kontroll zu haben - allerdings lies ich es dann
  da das garantiert eher Kontraprodoktiv wäre weil keiner wirklich damit klar kommt. *g*
- 'bUserPropNoVariables' und 'bUserPropNoModifies' in 'bUserPropVariables' und 'bUserPropModifies' umbenannt - diese 'verneinung'
  brachte hier keine Vorteile sondern machte z.B. das im Export Dialog nur etwas umfangreicher. (jedes bischn an Übersichtlichkeit
  zählt *g*)
- Stellte an einigen Stellen von '%g' auf '%e' um damit die Genauigkeit besser ist... denn öfters bekam man bei z.B. einem sehr
  kleinen Wert '0' obwohl es nicht 0 war! Zwar finde ich persöhnlich diese Exponenten-Schreibweise nicht soo übersichtlich, aber
  korrektheit ist hier denke ich beim Export einfach wichtiger.
- Merkte gerade das die Normalen in PLSceneMesh::GetVertex() noch im Object-Space zurückgeben wurden - das sollte natürlich
  World Space sein
- Als in der Dungeon-Demo Szene ein paar exportierte Mesh Normalen immer noch nicht ganz passten schaute ich mir den entsprechenden
  Code nochmals an und experimentierte etwas... es stellte sich am Ende heraus das PLTools::Rotate() noch nicht ganz ok war,
  wie es aussieht muss ich wenn ich 'Quat' von 3ds Max nehme die Multiplikation umdrehen. Nun sehen 'endlich' auch alle Normalen
  korrekt aus. :D



>> 22.09.2007
[CO]
- Bounding Boxes von z.B. Zellen werden nun im 'Post Process'-Schritt berechnet damit das problemlos sauber Rekursiv möglich
  ist. Ist die eigentliche Szene in einen weiteren Kontainer 'eingebettet' (z.B. einem Physik-Kontainer) so hat dieser die
  gleiche Bounding Box wie die Szene selbst.
- PLSceneCamera::WriteToFile(): Nahm den 'Aspect'-Export erstmal heraus da hier bei den von mir verwendeten Test Szenen
  oft immer wieder ein anderer Aspect stand und das Ergebniss in PL dann teils merkwürdig aussah... das könnte zu verwirrungen
  führen. :D
- An 'PLSceneMaterial' weitergearbeitet, konkreter am Material Parameter Export. Der Export von 3ds Max Standard Materialien
  und Materialien mit 'fremden' FX-Shadern ist mittlerweile wohl soweit ok. Für unseren eigenen 'PixelLight_SRShaderLighting.fx'
  Shader für 3ds Max entschied ich mich schwer spezialiserten Code zu schreiben damit die resultierenden PL-Materialien möglichst
  gut passen ohne zuviel unnötigen Schrott zu haben... zumdem könnte man die Einstellungen dieses Shaders sowieso nicht
  komplett automatisch rausschreiben lassen da man im fx Shader einfach ein paar Dinge etwas anderst machen muss als
  das in PL selbst möglich ist. Z.B. kann/muss man hier im fx Shader Maps über Schalter an/aus schalten, es kann NUR eine
  2D ODER Cube-Reflektion Map genutzt werden + ein 'intelligent' Export der Pameterter ist wünschenswert so das z.B. Maps
  nicht Exportiert werden wenn diese keinen Einfluss auf das Ergebniss haben. Kurz, will man die Materialien möglichst 'sauber'
  Exportieren so muss man einiges an verschiedenen Fällen beachten.
  Heute war mal wieder so ein Tag an dem ich mich schwer über die schlampige 3ds Max API ärgerte... An Parameter Namen kommt man
  über die Funktion 'GetLocalName()'... allerdings natürlich nicht generell, für Bitmaps bekommt man hier nur ein nettes '??'
  zurück. Ich versuchte einige Stunden lang an den Parameter Namen zu kommen bis ich es schließlich aufgab - ich fand nur
  xxx verschiedene Wege um an den 'Bitmap Dateinamen' zu kommen, aber für den einfachen Bitmap/Parameter Name fand ich nix.
  Da ich beim Export aber 'umbedingt' wissen muss für was diese Bitmap denn nun verwendet wird blieb mir nix anderes übrig
  als einen üblen Hack einzubauen: Anhand der Parameter ID die zum Glück in der richtigen Reihenfolge kommen, (?immer?)
  wenn auch nicht mit den ID's die man erwarten würde, finde ich momentan heraus ob das denn nun eine DiffuseMap, NormalMap
  usw. ist. Man darf nun also nicht mehr einfach im fx-Shader an der Parameter Reihenfolge etwas machen, denn dann muss dieser
  Code angepasst werden... sehr unschön, aber wie gesagt fand ich selbst nach Stunden keine andere Lösung. :(



>> 21.09.2007
[CO]
- Wie mit Jens vor einigen Tagen besprochen vereinfachte ich im Export Dialog die Log-Einstellungen. Intern hab ich nichts
  geändert, aber nach außen hin hat der User nur noch eine einfache kleine ComboBox aus der er ein 'log level' wählen kann.
  Sobald das Log aktiv ist, wird es nach dem Export IMMER geöffnet - Jens meinte das wäre das was er erwarten würde. :D
- Da ich nun erstmal alle Elemente drinnen habe versuchte den Export Dialog halbwechs übersichtlich zu ordnen... mal schaun
  ob Jens eine bessere Anordnung finden kann. :D
- Anhand der Log Information über 'ausgehende Portale' merkte ich gerade das 'PLSceneContainer::PostProcess()' noch nicht
  wieder richtig Implementiert war
- PLSceneLight-Konstruktor: War der Schatten-Wurf eines Licht-Objektes (!= Node :) deaktiviert, so bekam man den Hinweis
  das dieser Schatten-Typ nicht unterstützt sei... da war natürlich die Abfrage nicht ganz ok :D
- Speicherlecks behoben: '_vscprintf' rechnet NICHT '\0' mit ein und daher muss man 1 draufzählen - immer wieder ein Spaß
  an soetwas herumzu herumzudoktern...
- Hat eine Scene Node keine 'einheitliche' Skalierung wird im Log darauf hingewiesen... allerdings konnte dann schonmal soetwas
  wie z.B. '(1 1 1) ist keine einheitliche Skalierung' stehen da die Zahlen zu klein wurden. Daher stellte ich hier auf '%e'
  um damit man keine so verwirrenden Meldungen im Log stehen hat - auch wenn die Exponenten-Schreibweise nicht jedermans
  Sache ist, so ist das allemal besser als vorher. *g*
- PLSceneMaterial: Ein paar fx-Parameter können wieder Exportiert werden - hier muss ich allerdings noch etwas Arbeit reinstecken.
  Ich denke ich werde hier wohl nicht das IGame Interface nutzen da ich damit irgendwie selbst nach längerem herumprobieren
  einfach nicht an die entsprechenden Infos kam.



>> 19.09.2007
[CO]
- Der Exportierte Kamera FOV wird mit 0.74 Multipliziert damit das Ergebniss in PL in etwa genauso aussieht wie das im
  3ds Max Viewport (... keine Ahnung wieso das bei uns anderst aussieht...)
- PLSceneLight: Lustigerweise gibt die IGameObject Funktion 'InitializeData()' IMMER false zurück wenn die Funktion nicht
  implementiert ist... und 'scheinbar' ist diese bei Licht Nodes nicht implementiert - daher darf man das nicht prüfen. Keine
  Ahnung wer sich das ausgedacht hat - auch jedenfall finde ich das nicht so prall da ich als User mir also immer anschaun
  muss was diese Funktion benötigt und was nicht - denn in der Dokumentation steht natürlich nix darüber... brrr...
- Neue Standard Material Eigenschaften werden Exportiert: 'Opacity' und 'Two Sided'



>> 18.09.2007
[CO]
- Durch die Euler Winkel Änderungen in PLMath von heute ist es nun möglich im Exporter direkt die 3ds Max Funktion 'QuatToEuler'
  zu nutzen um einen Quaternion in Euler Winkel umzurechnen wie wir diese in unserem Szene Format nutzen.
- Bei Kameras wird der im 3ds Max Render Dialog eingestellte 'Aspect' mitexportiert. Stellte hier nichts auf das IGame-Interface
  um da es nicht wirklich einen Vorteil bringt - im Gegenteil, man kann darüber leider recht wenig an Infos rausholen.



>> 17.09.2007
[CO]
- Alle Projekte von PLBool auf bool zurückgestellt (siehe PLBase Diary-Entrag von heute)



>> 14.09.2007
[CO]
- Als ich mir die Kabiene von Jens gerade in PL nochmals gaanz genau anschaute fand ich einige Stellen die merkwürdig aussahen...
  allerdings dann zum Glück in 3ds Max auch, ist einfach noch 'Under Construction'. :D
  Allerdings zuckte ich etwas zusammen als ich ein kleines Tür-Schanier im nichts schweben sah - ein Blick in 3ds Max auf die
  Szene zeigte das dies nicht korrekt Exportiert wurde... und dabei hatte ich mich schon so gefreut das dies mit den Transformationen
  nun endlich immer korrekt zu sein schien. Etwas nachforschen und herumprobieren brachte allerdings eine sehr einfache und
  schlanke Lösung hervor... man muss 'einfach' die 'Parity' einer Matrize mit der Node-Skalierung multiplizieren. Hui, also
  mit 3ds Max arbeiten ist selbst mit dem IGame-Interface kein Zuckerschlecken!
- Neue PLTools-Funktion: 'Rotate()': Rotiert einen Vertex mit hilfe eines gegebenen Quaternions - ich fand im 3ds Max SDK keine
  solche (eigentlich absolut grundliegende) Funktion, also musste ich selbst was machen. Diese Funktion wird benötigt um
  Normalen-Vektoren vom 'World Space' in 'Node Space' umzurechnen. Natürlich ist im IGame-Interface nicht Dokumentiert in
  welchem Koordinaten System die Tangent & Binormal Vektoren liegen + dort kann man auch nicht wie bei den Vertex Normalen
  einstellen ob 'Object Space' oder 'World Space'... alles nicht sonderlich Konsistent und Bedienerfreundlich. :(
  Also musste ich einfach mal wieder wie sonst auch wild drauf los Experimentieren - ich nahm zuerst an das diese Daten im
  'World Space' vorliegen... zum Glück lag ich damit sofort richtig. Erweiterte in PLEngine::SNMesh die Debug-Visualierungs
  Möglichkeiten noch um das Anzeigen der Tangent & Binormalen damit man das optisch überprüfen kann ob diese halbwechs korrekt
  sind.
- Und noch eine merkwürdige Transform-Sache: Ist PLSceneNode::IsRotationFlipped() 'true' was bei z.B. Kameras oder Spot
  Lights der Fall ist, so muss zur Rotation eine -90 Grad Rotation um die X-Achse hinzugefügt werden damit die Rotation
  korrekt ist... nicht das einem irgendwann mal langweilig werden könnte...
- Stellte das ermitteln der Vertex Textur Koordinaten auf das IGame-Interface um. Das macht auch hier die Sache etwas einfacher
  + noch mehr mögliche Kombinationen werden intern automatisch unterstützt. (3ds Max bietet sehr oft für EINE Sache xxx
  Vorgehensweisen an was den Export definitv nicht einfacher gestaltet) Man muss zwar immer noch selbst per Hand einen
  möglichen 'uv generator' auf die erhaltenen Textur Koordinaten anwenden damit das immer korrekt aussieht, aber insgesammt
  scheint das so nun noch ein Stückchen besser zu funktionieren - in Jens Kabiene sehe ich nun die PL-Standard Textur wo ich
  bis jetzt nur weise Flächen sah. (hauptsächlich bei Dingen die Transparent sein sollen...)
- Die verschiedenen Textur Koordinaten Schichten werden per Default Automatisch Exportiert, es wird also alles Exportiert
  was zur Verfügung steht. Sind z.B. Lightmap Koordinaten vorhanden, werden aber nicht benötigt muss man das per Hand umstellen
  damit nicht zuviel Resourcen verschwendet werden.
  Sind in einem Channel innerhalb 3ds Max keine Textur Koordinaten, wird automatisch auch nix exportiert auch wenn in den
  Optionen eingetragen ist das z.B. uv in diesem Channel Exportiert werden soll. (das sollte keine Probleme machen...)
  So herum müsste das insgesammt unproblematischer sein, denn oft wurde hier vergessen die Einstellungen korrekt zu setzen und
  dann war das Rätelraten groß wieso z.B. die Lightmaps in PL so 'merkwürdig' aussehen...



>> 13.09.2007
[CO]
- Als Default-Einstellung wird der (per Default Automatisch) Eingetragene Scene Viewer sofort nach dem Export gestartet.
  Jens und Co. verwirrte es z.B. hin und wieder wieso 'Die Szene nach dem Export nicht sofort in PixelLight dargestellt wird'
  Da nicht ich damit arbeiten muss beuge ich mich natürlich solchen Wünschen auch wenn ich selbst das etwas anderst handhaben
  würde. :D
- Nach Rücksprache mit Jens nahm ich die 'Skalier'-Optionen aus dem Exporter heraus. Dies machte alles nur komplizierter
  ohne allzugroßen Nutzen zu bringen + an ein paar Stellen war das skalieren auch nicht unproblematisch... z.B. kann man
  natürlich z.B. Modifier Variablen die man als String in die User Properties von Nodes in Max eintragen kann nicht automatisch
  skalieren da man die Bedeutung der Daten nicht kennt. In der Vergangenheit führten diese Optionen auch immer wieder zu
  Verwirrung bei den Grafikern. Das hatte ich damals eingebaut da fast jede Szene die ich bekam andere Größenverhältnisse
  hatte... aber mittlerweile haben wir das so ausgejungelt das jeder sich für sein Projekt Konventionen aufzustellen hat
  welche Maßeinheiten etc. verwendet werden - das ist nicht unser Job Babysitter zu spielen. :D
  Für unsere eigenen Projekte nutzen wir wie gehabt '1 Einheit' = '1 Meter' in 3ds Max - und wenn sich ein Grafiker nicht
  daran hält bekommt er mit dem Linial was auf die Finger - chaotische Arbeitsweisen muss man nicht unterstützen. *g*
- Entfernte noch einige weitere Optionen die eher verwirrten und Probleme verursachten als welche zu lösen. Durch die Umstellung
  auf das IGame-Interface läuft das meiste nun sowieso halbswechs sauber Automatisiert ab.
- Export-Dialog an die Normalen erzeugung bei Meshs angepasst, das ist nun viel schlanker als vorher.
  (Künstlern kann man nicht wirklich zumuten Fließkomme-Zahlen etc. per Hand einzutragen *g*)
- Der Exporter schreibt ins Log welches Einheiten-System in 3ds Max verwendet wurde - damit kann man schneller
  Probleme klären wieso etwas nicht so ist wie es sein sollte.
- Falls in der 3ds Max Szene bei 'File Properties' -> 'Summary' etwas Eingetragen ist wird diese Information mit in die
  Szene geschrieben. Somit lassen sich nun auch Informationen wie z.B. 'Autor' mitexportieren. Zusätzlich wird gespeichert
  mit welcher Exporter Version die Szene Exportiert wurde. Diese 'kleinigkeit' kostet mich unverschämt viel Zeit da die
  entsprechende Doku praktisch nicht vorhanden ist und das alles 'minimal Chaotisch' ist. Nach einem (wie erwähnt ZU langem)
  Weilchen fand ich heraus das die Definitionen wie z.B. 'PIDSI_TITLE' nicht von 3ds Max sind, sondern von der Win32 API +
  an ein paar Informationen die im erwähnten 'Summary'-Tab in 3ds Max stehen kommt man schonmal direkt gar nicht ran... denn
  man muss die 'ID's' kennen. Nach etwas herumsuchen fand ich diese ID's zum Glück so das alle in diesem Dialog eintragbaren
  Infos mitexportiert werden können... dieses frustrierende Erfahrung zeigt mir mal wieder warum es Sinnvoll ist die Dokumentationen
  so GENAU wie möglich zu machen und diese ständig zu verfeinern wenn einem später noch etwas daran unangenehm auffällt - das
  spart am Ende VIEL Zeit! :)
- Nachdem ich gestern den 'Transform Bug' der leider schon extrem lange stört in PLScenePortal beheben konnte, versuchte ich
  die gleiche Vorgehensweise heute mal beim den Meshs... also Mesh Daten im World Space liegend zurückgeben lassen und diese
  dann in den Node Space umrechnen - es klappte! Ich hatte immer die Befürchtung das dies im Zusammenspiel mit Instanzing innerhalb
  von 3ds Max Probleme machen könnte - aber in der Dungeon Szene die davon reichlich gebrauch macht konnte ich keine Probleme
  feststellen. *schweiß von der Stirn wisch* (allerdings würde es mich nicht wundern wenn da dann doch irgendwann mal einer
  mit einer neuen Sitation kommt in der das dann eben nicht so einfach geht)
  Was momentan allerdings noch in der jetzigen Form Probleme macht ist das Exportieren der Node Rotation in 'Euler Winkel'
  da das umrechnen von 'Matrize in Quaternion', (geht scheinbar problemlos) und dann von 'Quaternion in Euler Winkel' nicht
  ganz unproblematisch ist. Damit das bei mir lokal erstmal fehlerfrei funktioniert ohne das hierdurch die Sache nochmals
  künstlich verkompliziert wird speichere ich momentan die Quaternions direkt in der Szene ab und in PLEngine::SceneNode
  hab ich einen lokalen Hack eingebaut damit diese Quaternion-Rotation direkt verwendet wird anstatt über 'Euler Winkel' zu
  gehen. Diese Geschichte mit der Rotation in den PL Scene Nodes ist sowieso noch nicht ganz ausgereift - das muss ich nun
  wirklich mal besser machen damit u.a. das mit dem Exportieren aus 3ds Max richtig funktioniert. Aber erstmal weiter mit
  dem Exporter damit da nun soweit endlich mal alles wichtige klar Schiff ist.



>> 12.09.2007
[CO]
- PLSceneMesh etwas aufgeräumt, u.a. wird den Funktionen welche die Daten Speichern eine Datei-Referenz + eine Referenz auf
  den Chunk-Stack übergeben. Bis jetzt waren diese Variablen Klassen-Mitglieder, was aber weniger 'schön' war.
- Stellte noch eine Wagenladung Zeiger auf Referenzen um. Interessant ist das in der 3ds Max API im grunde NUR Zeiger verwendet
  werden auch wenn eine Referenz den Job ebenfalls erledigen könnte + meistens ist nicht Dokumentiert ob dieser Zeiger auch NULL
  sein kann so das man einfach davon ausgehen muss... an der Sache kann man wohl erkennen wie alt eine Software bereits ist
  da heute der Trend definitiv in Richtung 'wo immer möglich Referenzen' geht + natürlich Dokumentieren was für Zustände
  Parameter annehmen können. :D
- PLScenePortal-Implementation müsste nun soweit ok sein... auf jedenfall werden nun auch in der Kabiene-Demo Szene von Jens
  die Portale korrekt Exportiert. Ich frage die Vertices hier in 'World Space' ab und rechnte diese in 'Node Space' um da
  es so herum keine Probleme gibt. Frage ich die Vertices jedoch in 'Object Space' ab, kann es vorkommen das die Portale
  leicht verschoben sind - wird irgend ein Object Offset oder so sein - allerdings konnte ich selbst nach längerem Nachforschen
  & Probieren nicht rausbekommen warum das so herum einfach nicht korrekt machbar ist. IGame ist zwar um einiges leichter zu
  nutzen als die Max API selbst, aber ganz ohne ist das leider auch nicht - vorallem da die Dokumentation mehr als dürftig ist
  und man bei dem meisten einfach drauflos Raten muss wie was funktioniert.
- Neue PLTools-Funktion Namens 'IsEmpty' hinzugefügt welche das gleiche macht wie Box3::IsEmpty() von Max, nur korrekt!
  Irgendwie liefert 'Box3::IsEmpty()' fast immer zurück das die Box 'leer' wäre da ich angeblich noch nix eingefügt hätte...
  SEHR merkwürdig... achja, mit der 3ds Max API arbeiten macht einfach nur Laune, das ist genauso lustig wie 'Topfklopfen'. :(
- Neue PLTools-Funktion Namens 'ValidateMinimumMaximum' hinzugefügt welche sicherstellt das die Werte in Box3 korrekt sind.
  Nach bestimmten Operationen ist es Empfehlenswert hier auf Nummer sicher zu gehen + ich hatte sogar in Jens Kabiene
  Nodes welche mir bei 'pIGameObject->GetBoundingBox(m_cBoundingBox);' nicht korrekte Werte zurückgaben... da gibts scheinbar
  Probleme beim vergleichen von negativen Werten. (iss ja auch soetwas von aufwändig *g*)



>> 08.09.2007
[CO]
- PLScene::AddMesh(): Die Mesh-Daten werden nun sofort gespeichert und wieder freigegeben, nur die grundliegensten Mesh
  Infos bleiben erhalten. Dadurch spart man einiges an Speicherherumgewurschtle bei größeren Szenen - vor geraumer Zeit
  bekam ich sogar mal von 3ds Max beim Export eine 'out of memory'-Fehlermeldung, allerdings war das eine so Chaotische
  Szene das ich das nicht weiter zu Exportieren versuchte. :D
- Die Mesh Vertices und Triangles können nun dadurch das sofort gespeichert wird einheitlich von der Szene Klasse verwaltet
  werden. Sprich, diese Daten werden nicht jedesmal erzeugt und gelöscht, sondern wenn nicht mehr benötigt in einen Pool
  zurückgelegt aus dem neu angeforderte Vertices herausgenommen werden... und erst wenn nix mehr da ist, aber etwas verlangt
  wird muss ein neues Objekt erzeugt werden. Das beschleunigt den Export etwas.



>> 28.08.2007
[CO]
- Einige Zeiger auf Referenzen umgestellt
- PLSceneNode::WriteToFilePosRotScaleBoxFlags() speichert nur noch und muss die Werte nicht mehr Ermitteln. Dies geschieht
  nun im PLSceneNode-Konstruktor.
- PLSceneMesh auf IGame Interface umgestellt, die gesammte Berechnung der Normalen wird nun davon übernommen
- PLScene::WriteToFile() nutzt nun direkt WriteToFilePosRotScaleBoxFlags()
- PLSceneContainer::WriteToFile() nutzt nun direkt WriteToFilePosRotScaleBoxFlags()
- PLSceneContainer::PostProcess() macht nix mehr, das berechnen der Bounding Box geschieht nun direkt wenn Nodes in einen
  Container eingefügt werden
- PLScene::CopyTexture(): Erzeugt nicht mehr selbst 'plt'-Dateien für Normal Maps - stattdessen werden diese Dateien wenn
  vorhanden einfach mitkopiert (Grafiker hat mehr Kontrolle)
- In den Konstruktoren wird alles Initialisiert was möglich ist... denn hier ist es im Gegensatz zu innerhalb von PL wo
  man 'genau weis' (bzw. davon ausgehen kann :) das neue Objekte sauber initialisiert sind leider nicht so. 'Point3' von
  3ds Max wird z.B. NICHT initialisiert, was aber auch in der Doku steht. Allerdings steht in der Doku das 'Box3' 'leer'
  gesetzt heist... was auch immer das heisen mag, die Vektoren davon sind jedenfalls nicht Null wie man es erwarten
  würde. Um hier also Problemen gleich den Zündstoff zu nehmen, wird im Exporter IMMER Initialisiert.



>> 19.08.2007
[CO]
- Entfernte wie mit Jens besprochen den Support für 3ds Max < Version 8. Zum einen kommt bald bereits Version 10 auf den
  Markt + für die neueren 3ds Max Versionen gibt es speziell für Exporter schwer vereinfachte und komfortable Interfaces...
  ich arbeite mich momemtan in diese ein da man darüber eventuell endlich den merkwürdigen Transform Bug wegbekommt + der
  Exporter als solches übersichtlicher wird... 3ds Max ist leider ein wares Monster und es gibt für alles zig möglichkeiten
  und kombinationen etwas zu erreichen was einem das Leben im Exporter leider nicht sonderlich einfach macht. :(
- IGame (heißt mittlerweile offiziell '3DXI') Bibliothek auf Version 2.2 aktualisiert
- Nahm einges an Defines heraus die eine Abwärtskompatibilität sicherstellten, dies ist nun zum Glück unnötig
- Fing an den Exporter vorsichtig & schrittweise auf IGame umzustellen



>> 18.08.2007
[CO]
Der 3ds Max Scene Exporter schreibt nun noch folgenden total wichtigen und unverzichtbaren Hinweis ins Log:
  *If the 'application/viewer' you are using is writing a log, do ALSO have a look at it for application relevant
   information like performance/compatibility warnings*
-> Jens bestand nach langer Diskussion darauf auch wenn ich das als etwas unnötig empfinde. :(



>> 09.06.2007
[CO]
- Fügte bei allen Tools VC-Projekten Konfigurationen mit dem Namen 'Debug_SDK' hinzugefügt welche fast identisch mit
  'Debug' sind, aber im gegensatz dazu Release Engine Libraries nutzen. So können später auch Leute ohne die Engine Codes
  daran arbeiten + mit den Release Builds zu arbeiten ist recht angenehm da um einiges flotter als Debug.
- Die 3ds Max Exporter sind nun von PLGeneral Abhängig, ohne die Abhängigkeit wurde es langsam zu chaotisch + nun kann
  man u.a. auch unsere eigene String Klasse nutzen ohne sich von std::string in den Wahnsinn treiben lassen zu müssen oder
  die Log Klasse ohne in den Exportern das nochmals von neuem Implementieren zu müssen. :D
  Wenn das PL SDK Installiert ist geht startet Max wie gehabt, wenn nicht, so muss PLGeneral.dll im Max Hauptverzeichniss
  liegen - das ist denk ich verschmerzbar.



>> 02.06.2007
[CO]
- Der Name der 'StartCamera' wird korrekt Exportiert wenn Zellen verwendet werden



>> 10.05.2007
[CO]
- Sortierte ins Diary so richtig alte Einträge aus "PLSDK/internal/old_diaries.zip" ein



>> 09.05.2007
[CO]
- Fügte ins Diary alte Einträge aus "PLSDK/internal/old_diaries.zip" von vor "14.09.04" ein.
  Zwar hatten wir damals dort kein Datum dazugeschrieben - nun haben wir aber zumindestens endlich wieder
 'alle beieinander' *g* was mir irgendwie wichtig ist damit man wirklich alles nachlesen kann.



>> 20.04.2007
[CO]
- Ein paar 'return' und 'continue' entfernt



>> 05.03.2007
[CO]
- Container in exportierten Szenen erhalten automatisch ein 'Shadow'-Flag. Da die Schatten ebenfalls 'Rekursiv' aktiviert werden
  werfen Nodes eines Containers der kein Shadow Flag hat ebenfalls nie Schatten. (das ist kein Bug, das muss so sein :)
- 'Aspect' & 'ZNear & 'Light shape' bei Spot Lichtern wird mit exportiert



>> 26.02.2007
[CO]
- "C4002: too many actual parameters for macro 'identifier'" Warnungen für Max 5 deaktiviert, da können wir nix dran ändern :(
- Wieder auf klassische C-String Funktionen zurückgestellt + überprüft das es keine Buffer Überläufe geben kann. Beim Model
  Exporter hab ich nicht auf Buffer Überläufe hin gesichert, denn das wäre dort zuviel Arbeit für nix... dieser Exporter muss
  entweder bei Zeiten komplett überarbeitet werden, oder man kann ganz drauf Verzichten wenn/sobald der Szene Exporter auch
  Animationen Exportieren kann so das man dann einen Exporter für alles hat. (falls das erwünscht/sinnvoll ist)



>> 11.02.2007
[CO]
- Auf VC 2005 umgestellt
- Da bei den Max Exporter *sehr* viele 'Veraltet- Warnungen durch die Max eigenen Header kommen wo wir nicht wirklich
  etwas dran ändern können, deaktivierte ich diese Warnungen über:
  Befehlszeile -> Zusätzliche Optionen -> /D "_CRT_SECURE_NO_DEPRECATE"
  Desweiteren ist bei diesen Max Projekten das Exception-Handling aktiviert da es sonst nur Probleme gibt.
  Zudem muss man bei Max for-Scope deaktiveren - huihui, was für ein Chaos.
- Da 'NVMeshMender.h' 'd3dx9.h' einbindet bekam ich zuerst folgende Fehlermeldungen:
    c:\programme\microsoft visual studio 8\vc\platformsdk\include\winnt.h(222) : error C2146: Syntaxfehler: Fehlendes ';' vor Bezeichner 'PVOID64'
    c:\programme\microsoft visual studio 8\vc\platformsdk\include\winnt.h(222) : error C4430: Fehlender Typspezifizierer - int wird angenommen. Hinweis: "default-int" wird von C++ nicht unterstützt.
    c:\programme\microsoft visual studio 8\vc\platformsdk\include\winnt.h(5940) : error C2146: Syntaxfehler: Fehlendes ';' vor Bezeichner 'Buffer'
    c:\programme\microsoft visual studio 8\vc\platformsdk\include\winnt.h(5940) : error C4430: Fehlender Typspezifizierer - int wird angenommen. Hinweis: "default-int" wird von C++ nicht unterstützt.
    c:\programme\microsoft visual studio 8\vc\platformsdk\include\winnt.h(5940) : error C4430: Fehlender Typspezifizierer - int wird angenommen. Hinweis: "default-int" wird von C++ nicht unterstützt.
  -> Fand aber zum Glück recht schnell raus was probleme machte bzw. wie man das 'löst':
  Bei den 'zusätzlichen Include Verzeichnissen' MUSS man
    '$(VCInstallDir)PlatformSDK\include'
  VOR
    '../../PLEngine/PLRendererD3D9/external/win32/dx_9/Include'
  einfügen, dann gehts. (ich erspare mir weitere MS-Kommentare *g*)



>> 29.01.2007
[SB]
- CMake Projektdateien für alle PLTools-Projekte hinzugefügt



>> 29.01.2007
[CO]
- Verschob wie besprochen einige Projekte von Unterverzeichnissen in den Grundordner
- VC Projekt-Dateien wie besprochen in die jeweiligen Grundordner verschoben



>> 17.01.2007
[CO]
- Gloss und Shininess Material Einstellungen wurden nicht Exportiert... hätte schwören können das ich das schonmal eingebaut
  hatte... in der Exporter Doku wurde es auf jedenfall bereits reingeschrieben, war wohl vor der Material & Effekt System
  umstellung. :)



>> 11.01.2007
[CO]
- Räume die Codes hier und da etwas auf
- Bugfix: Jens berichtete von "sehr" merkwürdigen Textur Bugs in zusammenspiel mit mehreren Maps pro Material, als ich mir
  die Test Szenen von ihm anschaute fand ich das Problem recht schnell: In PLSceneMesh::GetVertex() wurden immer eifrig die
  gefunden Textur Koordinaten hinzugefügt, ohne dabei zu prüfen ob eine Map einen Texture Coordinate Channel nutzt der bereits
  registriert wurde. Baute also einen kleinen Channel Test ein und nun iss der Bug weg der Jens schier in den Wahnsinn trieb. :)



>> 30.12.2006
[CO]
- PLSceneNode::WriteModifiers(): 'Flip' beim Rotation Controller wurde nicht korrekt Exportiert
- Kleine Änderung in PLScene::AddMesh() damit Max Instanzen korrekt berücksichtig werden



>> 24.10.2006
[CO]
- Exportiert nun ebenfalls 'AmbientColor' & 'BackgroundColor'
- 'PostProcess' kann direkt beim Export eingestellt werden (damit man da nicht jedesmal per Hand herumfummeln muss)



>> 22.10.2006
[CO]
- Über z.B.
    Flags=NoLighting|NoCulling
  können in den Max Object User Properties weitere PL Scene Node Flags per Hand gesetzt werden.
- 'ReflectionMap' und 'ReflectionFactor' werden mit exportiert
- PLSceneLight::WriteToFile(): Es wird nun geprüft ob das Licht auf GenLight gecastet werden kann - leider etwas umständlich,
  allerdings fand ich keine andere Lösung. Macht man hier keinen Test, kann (und tat es natürlich auch) es zu einem Crash
  kommen wenn z.B. VRay-Lichter genutzt werden. :(



>> 21.10.2006
[CO]
- PLSceneMesh: Nachdem der MeshMender fertig ist, MÜSSEN natürlich auch ALLE alten Textur Koordinaten übernommen werden -
  bis jetzt wurde nur die erste Texture Koordinaten Schicht übernommen so das z.B. Lightmap Koordinaten übern Jordan gingen.



>> 20.10.2006
[CO]
- PLBool eingefügt damit sich die Projekte wieder übersetzen lassen



>> 20.08.2006
[CO]
- PLScenePortal: Beim herauszufinden ob ein Portal in die richtige Richtung zeigt konnte es noch zu Problemen kommen, dann
  wurde angewarnt obwohl das eigentlich korrekt war wie das Portal ausgerichtet war.
- Experimentelles 'einbetten' der exportierten Szene in einen Container wie z.B. SCPhysicsWorld eingebaut.



>> 14.08.2006
[CO]
- Licht: 'On' Max Einstellung wird nun mit exportiert



>> 13.08.2006
[CO]
- Path Controller: Wenn 'Follow' aktiv ist, wird automatisch ein SNMMoveRotation Scene Node Modifier angehängt so das die
  Node immer in die Bewegungsrichtung schaut.
- PLSceneSpline::WriteToFile(): Die Path-Knoten müssen natürlich noch relativ zum Container gemacht werden.



>> 31.07.2006
[CO]
- Jens schüttelte eine Szene aus dem Ärmel die den Szene Exporter zum Crashen brachte. Dieser Crash passierte als ich
  von Max für ein Objekt eine Bounding Box haben wollte, da gabs mal wieder besonderheiten mit Space Warps etc. (was
  auch immer das sein mag :)
  Hab dies nun etwas umgebaut und so gehts endlich. Konnte keine BB ermittelt werden, wird nun auch wenigstens noch die
  Position der Node berücksichtigt. Desweiteren war das erzeugen von Hash Keys für Vertices in dieser Szene total witzlos,
  denn da hier die Vertex Position alle sehr klein sind, kam am Ende immer der gleiche Key heraus. Spielte noch etwas
  mit der Hash Key Generation herum und so gehts nun besser bei den getesteten Szenen.
- Im Exporter Dialog lässt sich nun ein gewünschter Scene Renderer auswählen. Scene Renderer werden zwar bestimmt nicht 
  im Szene Format bleiben, aber solche Infos werden sicherlich später auch noch in Form einer seperaten 'Scene Info' Datei
  vorhanden sein und für den Grafiker ist es hilfreich diese Info hier bereits selbst direkt Einstellen zu können.
- PLSceneMesh: Sicherheitsabfragen eingebaut damit dem NVMeshMender NIE ungültige Dreicke übergeben werden was zum Crash
  führt.
- Schwächte die 'Warnung' "Node name '%s' does not follow the name convention cell_<cell name>_<node name> or
  cell_<cell name>_<mesh name>_<instance name>. Node is added to the scene root." zu einem 'Hint' ab. 'Normalerweise' *sollte*
  sich jede Node in einer Zelle befinden damit alles Einheitlich ist, aber gerade bei kleinen Beispiel/Test-Szenen hat man
  häufig nur eine Szene mit einer Handvoll 'herumfliegenden' Nodes welche nicht in Zellen verteilt werden müssen. In dem
  Fall kann man, wenn einen die vielen Hint-Log Ausgaben nerven einfach die Hints-Deaktivieren, aber Warnungen welche
  wichtiger sind immer noch Anzeigen lassen.



>> 26.07.2006
[CO]
- Die Bounding Boxes müssen bevor diese in die Szene Datei geschrieben werden natürlich auch noch Skalierung berücksichtigen



>> 20.07.2006
[CO]
- Splines lassen sich exportieren, diese werden dann nicht als Scene Nodes sondern als 'Path'-Resourcen gespeichert.
- 'LookAt' und 'Path' Max Node Controller werden nun erkannt und Exportiert. Eine 'Target Camera' oder 'Target Spot Light'
  schaut in Max zwar ebenfalls zu einem Ziel, dies geschieht aber NICHT über einen Controller und daher muss dies im Exporter
  auch getrennt behandelt werden. Es ist nun möglich z.B. Kameraflüge direkt aus Max zu exportieren oder z.B. Lichter oder andere
  Objekte welche immer zu einem bestimmten Ziel schaun... zumindestens kleine Demos kann man damit nun also bereits direkt aus
  Max Exportieren. :)



>> 19.07.2006
[CO]
- Camera z-near & z-far Einstellungen können auf Wunsch exportiert werden (clip manually)
- 'Hide', 'Freeze', 'Renderable' und 'CastShadows' Node Einstellungen werden als Flags mitexportiert. Jedoch ist es nicht
  wirklich Ratsam bei jedem Licht in Max 'CastShadows' aktiv zu lassen.
- PLSceneNode::WriteToFilePosRotScaleFlags(): Das mit den Rotationen als Euler Winkel Exportieren klappt nun endlich korrekt.
- Wird ein '.' in einem Node Namen gefunden, wird eine Warnung ins Log geschrieben und dieses Zeichen durch '-' ersetzt. In
  PL ist '.' für die Namens Hierarchie zuständig, dummerweise ist es in Max aber gängig auch Punkte in Namen zu verwenden.
  Z.B. wird bei einer 'Target Camera' automatisch eine Node wie z.B. 'Camera01.Target' erzeugt welche als Ziel dient.
- Wird 'Root' oder 'Parent' als Scene Node Name gefunden, so wird eine Warnung ins Log geschrieben und dieser Name wird geändert.
  In PL sind dies Reservierte Namen welche in der Namens Hierarchie verwendet werden.
- Unbekannte Nodes werden nun nicht mehr einfach Ignoriert, sondern als SNUnknown in der Szene gespeichert... denn diese Nodes
  können immer noch 'Ziele' anderer Nodes sein. ('look at')
- Hat eine Max Node ein 'Target', so wird automatisch der PL Scene Node ein 'SNMTargetRotation'-Modifier angehängt so das die
  Scene Node immer zum Ziel 'schaut'.
- In PLScene gibt es nun eine HashMap um von einer Max Node eine 'PL Scene Node' zu bekommen. In PLSceneNode::WriteModifiers() wird
  dies dafür verwendet den Korrekten 'Target Node' Namen zu finden. In dieser HashMap wird mit Zeigern auf diese Max Nodes gearbeitet,
  denn die Namen sind in Max eher optional und es ist auch nicht verboten mehere Nodes mit gleichen Namen zu haben - darum ist
  der Name ziemlich nutzlos um eine Node abzufragen. :)



>> 18.07.2006
[CO]
- Erstaunlicherweise scheint Jens auf jeden Bug den es im Exporter gibt sofort zu stoßen. In PLSceneNode::WriteToFilePosRotScale()
  dürfen spezielle Nodes wie Lichter NICHT Skaliert werden, Lichter an sich haben in PL auch keine Skalierung - NUR der Licht
  Radius wird skaliert!
- PLSceneLight: Je nach Licht-Typ wird nun eine andere Licht-Scene Node exportiert. (Point, Spot & Directional) Hat dieses
  Licht noch eine 'Projector Map', so wird ein 'projective'-Licht exportiert.
- PLSceneMaterial::Save() & PLScene::AddMaterial(): Hier wird nun noch zusätzlich geprüft ob eine Texture-Map gerade 'aktiv' ist.
  Es kann zwar eine Texture Map eingetragen, aber gerade nicht als Aktiv gekenntzeichnet sein.  
- About Dialog: Hier kann man nachsehen WANN diese Exporter Version übersetzt wurde, so lassen sich auch letzte Zweifel ausschließen
  ob gerade die aktuellste Version verwendet wird. :)
- Die '.scene' Dateiendung wird nun IMMER in Kleinbuchstaben umgewandelt um eventuellen problemen mit falscher groß/kleinschreibung
  entgegenzuwirken... Max hat auch die dumme Angewohnheit Dateiendungen groß zu schreiben wenn man diese nicht per Hand schreibt.



>> 17.07.2006
[CO]
- PLSceneLight::WriteToFile(): Der Falsche Licht Radius wurde Exportiert, Exportiert wird nun korrekt 'far attenuation end'.
- PLScene::CopyTexture(): Absolute Textur Dateinamen machen noch Probleme, nun müssten Texturen immer korrekt kopiert werden.
- PLSceneNode::WriteToFilePosRotScale(): Es konnte vorkommen das eine Skalierung Exportiert wurde obwohl diese immer 1 war ->
  Rundungsfehler werden nun kompensiert. 'none uniform scale hint' wurde immer ausgegeben sobald skaliert wurde, hier fehlte
  natürlich noch eine entsprechende Abfrage.



>> 12.07.2006
[CO]
- Soll die Szene beim Export Skaliert werden geht dies nur noch über einen Faktor (uniform scale) und nicht mehr über jede
  Achse. Zum einen ist das in den Optionen wohl leichter & schneller eingestellt, zum anderen sind nicht uniform Skalierungen
  sowieso problematisch und für eine ganze Szene auch weniger Sinnig.
- PLSceneMesh::PLSceneMesh(): Bevor die Geometrien erzeugt werden, kann der Exporter auf Wunsch eigene Normalen berechnen oder
  Tangenten & Binormalen welche man für 'per pixel lighting benötigt. So muss man das nicht nachträglich im Mesh Editor machen
  oder jedesmal von SNMesh sobald ein Mesh geladen wird. Da diese Normalen Berechnung nicht ganz trivial ist verwende ich hier
  erstmal den 'NVIDIA Mesh Mender' der recht gute Ergebnisse liefert - irgendwann später wenn wir Zeit, Lust & genug 'Personal'
  haben können wir hier ja was eigenes machen, derzeit wäre dies denk ich unnötige extra Arbeit... würden wir diese Max IGame
  Interfaces nutzen könnten wir direkt dort die Daten ablesen ohne das selbst berechnen zu müssen, da wir aber bei den Max
  Versionen abwärtskompatibel bleiben wollen muss man halt mehr Arbeit reinstecken.
- Auf wunsch kann die exportierte Szene nun automatisch nach dem Export mit einem angegebenen Programm geladen & betrachtet
  werden, das müsste den 'Workflow' nochmal ein Stückchen verbessern. Als 'Default Viewer' wird versucht einen absoluten Pfad
  zu 'PLSampleContainer.exe' zu finden, wenn das Glückt, hat man gleich standardmäßig was brauchbares Einstellt und muss da nix
  per Hand eintragen. *Max starten, Szene Laden, Szene Exportieren* und schon sieht man diese Szene 'in PixelLight' ohne noch
  selbst irgendwelche Programme starten zu müssen - NOCH EINFACHER geht das nun doch nun wirklich nicht mehr! ;-)
- Die Exporter Einstellungen werden nun automatisch gespeichert so das beim nächsten Start von Max die Einstellungen noch
  die 'alten' sind. Auch kann man jederzeit andere Einstellungen einladen & wegspeichern - kann mir vorstellen das dies
  durchaus mal sehr Hilfreich sein kann wenn ich z.B. Jens, oder er mir bestimmte Einstellungen 'rübergibt'... dann kann man
  sich einfach diese ini-Datei rüberreichen anstatt Werte einzelnd durchzugeben, einen Screenshot zu machen oder was auch immer.
  Die aktuellen Einstellungen werden in 'PixelLight_SceneExporterSettings.ini' gespeichert, durch den langen Namen sollte es
  eigentlich nie passieren das ein anderes Max Plugin eine Config mit genau dem gleichen Namen hat - denn dann wäre das automatische
  wegspeichern von Einstellungen etwas heikel..
  Die Implementation des Laden & Speicherns gefällt mir nicht sonderlich da man das 'per Hand' machen muss, aber mir viel
  keine einfacherere Möglichkeit ein ohne gleich mit einem universellen killer-System auf Spatzen zu schießen. Daher denke ich,
  dass man dies so lassen kann.
- Fügte im Log noch 'Hint' hinzu, hier werden Tips/Hinweise ins Log geschrieben
- Hat eine Scene Node eine nicht einheitliche Skalierung, so wird nun so ein 'Hint' ins Log geschrieben - nur so als Hinweis...
  denn es 'könnte' Probleme bereiten, und dann hat man wenigstens schonmal ein paar mehr Anhaltspunkte wo man suchen muss.
-> aktualisierte die Szene Exporter Doku auf der Teamseite



>> 10.07.2006
[CO]
- PLSceneMaterial: Berücksichtig nun auch 'Direct3D Materialien'
- PLSceneLight::WriteToFile(): Schreibt 'Range', dafür wird 'Attenuation End' verwendet
- PLScene::CopyTexture() kann nun optional mitgeteilt werden ob es sich bei der Textur um eine Normal Map handelt, dies
  kann automatisch beim Exportieren eines Materials erkannt werden. Ist es eine Normal Map, so wird automatisch eine entsprechende
  'plt'-Datei erzeugt über die die Textur Kompression für diese Textur deaktiviert wird... bei Normal Maps darf keine zumindestens
  'normale' Textur Kompression verwendet werden da dies ansonnsten einfach nicht korrekt aussieht.



>> 21.06.2006
[CO]
- Material Dateien können nun herausgeschrieben werden
- Jedesmal wenn eine Textur kopiert wird, regestriert die Szene dies und am Ende des Export Logs werden neben den
  verwendeten Materialien auch die verwendeten Texturen in den Statistiken aufgelistet.



>> 20.06.2006
[CO]
- Mesh & Material Export verbessert. Materialien werden nun in einer eigenen Klasse verwaltet. Es sollte auch keine Probleme
  geben wenn mehrere Max Materialien den gleichen Namen haben, denn ein Max Material wird anhand seines Zeigers verwaltet. Tritt
  ein Material Namenskonflikt auf, so wird eine Warnung ins Log geschrieben und der Material Name wird so geändert das es
  keinen Konflikt gibt.
- Ist in den Optionen 'CopyTextures' aktiviert, so werden die Texturen nun korrekt Exportiert
- Fügte noch Max 8 Versionen vom Szene & Modell Exporter hinzu, zwar geht auch die 7'er Version in Max 8 aber so ist's wohl
  etwas sicherer. Mittlerweile haben wie also Support bis Max 5 runter, und Jens würde das gerne erstmal beibehalten. Zum
  Glück läuft der Code derzeit noch auf allen Versionen so das man nur jeweils mit einem anderen Max SDK übersetzen muss. :)
- Eweiterte die Szene Exporter Log Statistiken um weitere Material Infos. So kann man genau sehen welche Materialien in der
  Szene konkret verwendet werden, wie oft, und wie oft prozentual gesehen im vergleich zu den anderen Materialien. Muss man
  mal Materialien wegrationalisieren, weis man sofort was wichtig ist und was weniger.



>> 29.05.2006
[CO]
- Über die User Properties lassen sich nun noch Scene Node Modifier definierten, z.B. um Physikalische Eigenschaften zuzuweisen
- Aktualisierte die Szene Exporter Doku auf der Teamseite.



>> 28.05.2006
[CO]
- Portal Vertices werden exportiert. Um an die Vertices zu kommen verwende ich anstelle von 'TriObject' 'PolyObject'. Man
  kann jedoch nicht einfach direkt so die Vertices rausschreiben, sondern muss zuersteinmal über die Kanten Informationen
  die korrekte Reihenfolge der Vertices herausbekommen. 'Normalerweise' sind die Kanten selbst gleich in der korrekten
  Reihenfolge, aber zur Sicherheit hab ich es so Implementiert das ich davon ausgehe das die Kanten nicht korrekt
  sortiert sind. (sicher ist sicher :)
  Die Normalen der Portal Polygone MÜSSEN immer IN die Zelle zeigen in der diese selbst sind. Jens hat netterweise aber
  in der Dungeon Szene den Fall eingebaut das Portale in die 'falsche' Richtung zeigen. Der Exporter 'erkennt' soetwas
  und gibt eine Warnung aus und wenn in den Optionen aktiviert, wird die Vertex Ausrichtung automatisch korrigiert.
  Standardmäßig ist diese Korrektur aber genauso wie das mit den Leerzeichen/Tabs korrigieren deaktiviert denn es könnte
  Absicht sein das ein Portal von der Norm abweicht.



>> 19.05.2006
[CO]
- Klärte heute mit Jens was WIE genau wir Mesh Namen behandeln. Anfangs hatten wir nur die Namenskonvention 
  cell_<cell name>_<mesh name>_<instance name>
  Da man jedoch in der Szene auch viele Nodes hat welche ein Mesh haben das sonst nirgends verwendet wird wurde oft
  <instance name> weggelassen und darum entschieden wir uns das
  cell_<cell name>_<node name>
  ebenfalls eine gültige Schreibweise ist wenn ein Mesh nicht instanziert wird. Dabei klärten wir allerdings nicht das Detail
  ob cell_<cell name>_<node name> zwanghaft sein eigenes einzigartiges Mesh hat oder ob das gleiche Mesh wie beim Instanzing
  verwendet wird. Daher nahm ich das erstere an da es ja durchaus sein könnte das man so ein eigenes Mesh aber mit gleichen
  Namen haben will. Allerdings führte das heute zu verwirrungen da <instance name> auch weggelassen wurde wenns einfach 
  'die erste Instanz' war... und dann gabs natürlich Warnungen das es Namenskonflikte bei den Meshs gibt. Zudem wurde aber
  nicht gewarnt wenn zuerst das instanzierte Mesh erzeugt wurde, und dann das nicht instanzierte... das war also nicht wirklich
  praxistauglich und alles eher verwirrend als sinnig. ;-)
  cell_<cell name>_<node name> ist nun 'einfach' eine bequemere schreibweise für cell_<cell name>_<mesh name>_<instance name>
  wenn es ENTWEDER nur ein Mesh dieser art gibt, oder es die erste Instanz ist... aber da es hier keinen Unterschied mehr gibt
  braucht man sich da keine tiefgründigeren Gedanken mehr zu machen.



>> 18.05.2006
[CO]
- Erweiterte Kontainer & Zellen um eine World Space Bounding Box welche in der XML Szene Datei mitgespeichert wird. Auch
  wird der Mittelpunkt berechnet und als Position gespeichert. Die Positionen aller Scene Nodes werden relativ zu ihrem
  Kontainer gespeichert.
- Den großteil des Tages verbrachte ich damit herauszufinden wieso Rotationen von Objekten nicht passten... am Ende stellte
  sich heraus das die Reihenfolge der Matrizen Multiplikation in PLMath äußerst ungünstig war. Nachdem ich dies verbessert
  und einige entsprechende Mathe Funktionen noch etwas verbessert hatte klappte auch das mit den Rotationen korrekt.
  Die Dungeon Szene lässt sich nun bereits recht brauchbar Exportieren und in z.B. PLSampleContainer einladen. Als nächstes
  müssen noch ein paar kleinigkeiten bei den Portalen verbessert werden.
- Bugfixing



>> 17.05.2006
[CO]
- Hat man die Log Ausgabe 'Scene' aktiv, so kann man hier auch erfahren welche Max Nodes eine Zelle bzw. ein Mesh 'erzeugten'.
- PLSceneContainer: Get() Funktion hinzugefügt welche genauso funktioniert wie PLEngine::SceneContainer::Get()
- Jede Zelle hat nun jeweils eine Liste an 'ausgehenden' und 'eingehenden' Portalen. Die erstere Liste wird direkt beim
  zusammenstellen der Szene gefüllt, die zweite Liste wird in einem 'Nachbearbeitungs'-Schritt ermittelt. Bei den Szene
  Statistiken steht nun bei jeder Zelle welche Portals 'raus', und welche 'rein' gehen. Ist 'raus' != 'rein', so wird
  eine Warnung ausgegeben, das könnte zwar beabsichtigt sein für lustige Effekte, aber 'normalerweise' will man das nicht
  haben. Diese Portal Info ist enorm hilfreich um Portal Fehler aufzuspüren. :)



>> 16.05.2006
[CO]
- Zwischen groß/kleinschreibung wird beim Exporter nicht unterschieden. Da beim Hashing das aber sehr wohl einen unterschied
  macht, muss man vorher die Strings in lower case konvertieren bevor man diese mit den Hash Maps verwendet.
- cell_<cell name>_<node name> ist nun 'korrekt'. Hat eine Node ein Mesh welches nicht Instanziert werden kann/soll, kann man
  dies nun so schreiben. Die Szene Exporter Doku auf der Teamseits wurde entsprechend erweitert.
- Leerzeichen/Tabs innerhalb von Namen können nun optional (default: nix ändern) entfernt werden, generell wird eine Warnung
  ausgegeben wenn soetwas gefunden wird - denn da dies iirgendwo, irgendwann mal probleme machen könnte sollte man das vermeiden.
- Options Dialog um mehr Log Einstellungen erweitert, standardmäßig wird nur das wichtigste ausgegeben. Aber man kann wenn man
  will auch noch genauere Szene & Mesh Informationen ausgeben lassen... allerdings wird dieses Log dann 'etwas' umfangreicher.
  Das Log der aktuellen Dungeon Demo Szene ist mit allen Infos z.B. über 30 MB groß. ;-)



>> 15.05.2006
[CO]
- Hier und da noch etwas Aufgeräumt & Bugfixing
- PLSceneContainer::AddMaxNode(): Prüft die Max Node Namen nun sehr viel genauer und schreibt ins Log wenn etwas nicht ok ist.
- PLSceneMesh: Verwendet nur eine einzige globale Vertex Hash Map für die Mesh Optimierungen anstatt pro Mesh eine Map zu
  erzeugen und wieder zu zerstören, statdessen wird diese Map nun jeweils nur 'gelöscht' was um einiges flotter geht. Diese
  Map ist nicht statisch sondern liegt in PLScene damit der Speicher nach dem Export wieder freigegeben wird und nicht erst
  wenn Max beendet wird. PLSceneMesh muss ich die Tage noch etwas aufräumen.



>> 14.05.2006
[CO]
- Log System & Ausgaben überarbeitet
- Da das sammeln der Szene Daten & das speichern der Meshs etwas dauern kann, wird hier entsprechend der Max Fortschrittsbalken
  aktualsiert.
- Am Ende der Log Datei werden nun ausführliche Statistiken ausgegeben



>> 13.05.2006
[CO]
- Habe den 3ds Max Scene Exporter komplett überarbeitet da die Anforderungen an diesen Exporter ständig wachsen. Alles ist nun
  sauber OOP aufgebaut und besser strukturiert & kommentiert. Zwar kann man bereits wieder Szenen Exportieren, aber noch fehlen
  ein paar Features + natürlich jede menge an Feinschliff. :)



>> 09.05.2006
[SB]
- Externe Libraries nach "external" verschoben und die Projekte entsprechend angepaßt



>> 27.03.2006
[CO]
- Scheinbar kann es passieren das ein Vertex mehrmals den gleichen Bone nur mit anderen Gewichten zugewiesen bekommt was 
  dann natürlich in der Engine beim Skinning einen verschwenderischen mehraufwand für nix bedeutet. 
  PLModelEnumProc::AddVertexWeight() prüft nun ob so ein Fall vorliegt, wenn ja, so werden die Gewichte einfach addiert.
  Dadurch hat man nun beim Soldaten 5091 statt 5115 Gewichte, kein gigantischer Unterschied, aber wenigstens 'etwas'. ;-)
- Bei Physique wird beim Exportieren nun automatisch die Initial Pose ermittelt und zum Speichern der Vertices verwendet. 
  Auch sind nun alle Animationen relativ zu dieser Pose und nicht mehr zu dem gerade beim Exportieren ausgewählten Frame.
  Nahm die Option 'Skeleton Animation Base Relative' heraus da eigentlich überflüssig - ALLES ist ja IMMER relativ zu 
  einer Initial Pose... und bei Physique wird diese beim Export ja nun automatisch korrekt ermittelt. Bei 'Skinning' 
  sollte man momentan in Frame 0 die Initial Pose haben - noch hab ich mir nicht genauer angeschaut wie man bei dieser 
  Technik an diese Initial Pose kommt.
... momentan werden die Matrizen aus Max noch nicht korrekt exportiert. Sobald ich das sauber hinbekommen habe das es mit 
unseren Rotationen zusammenpasst werd ich den Max Exporter mal etwas aufräumen da er dann erstmal alles sauber könnte 
müsste was wir brauchen.



>> 16.03.2006
[CO]
- Fand einen Bug in PLModelEnumProc::AddBone(): Da hier auch die Parents eines Bones Eingetragen werden, darf man natürlich 
  die Bone ID nicht nach dem Eintragen der Parents anhand der Anzahl der aktuellen Bones ermitteln. ;-)
- PLModelEnumProc::WriteMesh(): Hier wird nun auch der Fall berücksichtigt wenn ein Vertex in einem Skinned Mesh mal kein 
  Gewicht hat, bisher gabs hier dann Division durch 0.
- Das Exportieren von Jens PL Character als ein Mesh klappt mittlerweile recht gut. Das Modell besteht aus 3 Teilen, wobei 
  der Helm nicht geskinnt ist und sich derzeit dann noch nicht mitbewegt - mal nachfragen wie Jens das in Max gemacht hat 
  das sich der Helm dort mitbewegt, und dann mal schaun wie man das mit Exportiert bekommt. Musste die Codes für die Morph 
  Targets noch etwas umschreiben da NUR das Gesicht Morph Targets hat, das wird bei uns ja dann alles als ein Mesh zusammen 
  geworfen und das klappt noch nicht so ganz. Nun funktioniert dies aber ziemlich gut. Irgendann später müsste man den 
  Exporter mal so richtig aufräumen, aber das ist momentan noch nicht wirklich wichtig... zudem ändert sich hier auch 
  immer mal wieder etwas wenn der Exporter noch etwas mehr können soll. :)



>> 06.01.2006
[CO]
- Mesh & Scene Max Exporter exportieren nun zusätzliche Material Einstellungen:
  Ambient, Diffuse, Specular, Self-Illumination, Glossiness, Opacity, Wire, 2-Sided



>> 15.11.2005
[CO]
- 3ds Max Model: Die Vertex Gewichte sind nun nach ihrem Einfluss geordnet, Gewichte mit mehr Einfluss werden also beim 
  Skinning zuerst verwendet. Gewichte welche keinen Einfluss haben werden nicht mit Exportiert.



>> 12.11.2005
[CO]
- 3ds Max Model & Scene Exporter an neues XML Material Format angepasst



>> 11.10.2005
[CO]
- Die Scene kann nun auch global Skaliert werden, dabei können entweder die Scene Nodes oder die Meshs Skaliert werden - wie 
  man es selbst braucht :)
- Node Skalierung wird übernommen, an die Skalierung kommt man anscheinend nur über nen kleinen Umweg
- 'Object offset from node' wird berücksichtigt
- Instanzen werden erkannt. Ist ein Objekt eine Instance eines anderen, so teilen sich diese Objekte ein Mesh.
- User Properties werden bei den Scene Nodes als Attribute angehängt. Z.B. kann man bei einer Kamera 'PerformPause="0" 
  CameraFlags="Free"' bei 'User Defined' eintragen und somit kann man diese Kamera standardmäßig frei Steuern.
- Scene & Mesh Exporter: Zum Kopieren von Dateien wird nun 'CopyFile' anstatt ein System Call verwendet - dadurch erscheinen 
  keine Störenden DOS-Fenster mehr. :)
- Wird ein Name von mehreren Objekten verwendet, so wird nun eine Warnung ins Log geschrieben. Jedes Objekt sollte 
  einen eigenen Namen haben, ansonnsten gibts Konflikte bei z.B. dem Speichern der Meshs da der Mesh Name der gleiche ist 
  wie der Objekt Name. Bei Jens altem 'Omas Hütte' Modell trat dieser Fall auf - da war Objekt 'object02' doppelt, und schon 
  hatte man anstatt eines auf dem Boden stehenden Stuhles ein in der Luft schwebendes Kissen und ich schaute natürlich 
  erstmal etwas geschockt! ;-)
- Das Speichern der Daten auf verschiedene Art wie beim Mesh Exporter funktioniert nun. Man kann alles in einen Ordner 
  knallen lassen, die Daten gleich auf verschiedene Ordner verteilen oder wenns ganz schick sein soll auch gleich diese 
  Daten in den verschiedenen Ordnern in einen extra Unterordner kopieren. So kann man dann gaaaanz einfach die Resourcen der 
  verschiedenen Scenen getrennt ablegen.



>> 10.10.2005
[CO]
- Hab heute am Scene Exporter weitergewerkelt, bzw. konkret damit angefangen - bis jetzt stand ja nur quasi das Framework. :)
  Es sind bereits 3 Scene Node Typen Exportierbar: PLCamera, PLTLight und PLTObject. Dabei werden auch bereits ein paar 
  Einstellen wie Kamera FOV, zNear/ZFar, Renderer Licht, Licht Farbe oder ob ein Objekt Schatten wirft direkt aus Max 
  übernommen. Diese Dinge Dokumentiere ich gleich nebenbei ausführlich so, das die Grafiker nachvollziehen können was genau 
  wie Exportiert wird. Mit dem was nun bereits geht konnte ich Jens kleinen Mini Dungeon Test der aus 31 Nodes besteht 
  Problemlos Exportieren und im Scene Editor einladen. Jetzt muss ich eigentlich dieses Projekt nur noch um weitere Features 
  wie Skalierung etc. erweitern damit es unseren aktuellen Anforderungen genügt. Auf jedenfall hab ich endlich diese kleine 
  Test Scene brauchbar zum PerPixelLighting Renderer sauber zu machen. Eventuell könnte man also die SpaceTaxi Welten gleich 
  komplett in Max erzeugen und die Scene als ganzes nur noch Exportieren und im Scene Editor dann noch nen paar 
  Feineinstellungen machen. Später wird der Exporter noch um 'Advanced' Dinge wie Lightmaps, Physik Einstellungen etc. 
  erweitert.



>> 12.09.2005
[CO]
- Max Exporter in den neuen einen Extra 3ds Max Ordner verschoben, hier liegt auch der neue kleine Scene Exporter. So kann 
  man es sich sparen die Max Libs jedesmal in jeden Projekt Ordner mit reinzukopieren.
  Beim neuen Scene Exporter wollte ich es anfangs so lösen das dieser das bereits vorhandene Model Export Plugin verwendet 
  um die einzelnen Meshs zu exportieren - dies wäre aber schnell zu Aufwändig gewesen, vorallem wenn Animierte Modelle etc. 
  mit ins Spiel kommen hätte das wohl im Chaos geendet. Stattdessen erstellte ich auf Basis des bereits vorhandenen Model 
  Exporters einen komplett eigenständigen Scene Exporter. Der ganze Animations Code konnte dabei gleich raus da beim 
  Exportieren ganzer Scenen keine Animationen berücksichtigt werden sollten - wie erwähnt zu kompliziert wenn das den 
  gleichen komfort haben soll wie beim extra Model Exporter. Der Scene Exporter ist also NUR für Statische Scenen gedacht, 
  bzw. Exportiert nur solche. Dabei werden die Modelle der Objekte einzelnd gespeichert und das XML Scene Format 
  entsprechend exportiert. Derzeit noch recht übersichtlich, aber spart bereits viel Arbeit wenn man eine Scene aus Max 
  bestehend aus verschiedenen einzelnen Objekten Exportieren möchte - so muss man nicht jedes Mesh der Objekte einzelnd 
  Exportieren und am Ende all diese Objekte wieder in PL zu einer Scene zusammenschieben. Dieser Exporter ist allerdings 
  NUR als Scene-Unterstützung gedacht, keineswechs um komplett fertige Scenen mit Animation etc. (am besten gleich noch 
  mit der ganzen über Max Definierten Spiellogig ;-) zu exportieren. Man kann hier also in Max Definierte Scene Grundgerüste 
  oder Scene Teilstücke welche aus verschiedenen Objekten bestehen exportieren, und diese Teil Scenen dann beqeuem in 
  PixelLab Scene Editor einladen... so müsste es möglich sein seine Scene aus einzelnden Objekten oder solchen 'sub-Scenes' 
  zusammenzustellen. Bevor man also diese Scenen dann konkret in seinem Programm verwendet muss man diese in PixelLab noch 
  vervollständigen. Noch ist der Scene Editor quasi nur Mesh Editor ohne Animationen, das weitere werde ich nun Schritt für 
  Schritt einbauen.
  Ich denke das mit den Lightmaps wird dann auch der Scene Editor übernehmen, bei mir sträubt sich einfach alles gegen den 
  Gedanken das im Model Exporter zu haben... das passt dort irgendwie absolut nicht hinein. :)
  Lightmaps sind für statische Scenen, und mit dem Model Exporter Exportiert man 'normalerweise' seine Dynamischen 
  Spielobjekte - keine ganzen Scenen...



>> 23.08.2005
[CO]
- Max Exporter: Hat nun 3 verschiedene VC Projekte - je eines pro Max Version. So muss man nicht mehr per Hand die Include 
  und Lib Pfade ändern um für eine bestimmte Max Version zu übersetzen. (die Codes selbst bleiben immer gleich :)



>> 01.06.2005
[CO]
- Max Exporter: Neue Optionen:
  - 'Short names': Wenn Aktiv werden die Material Namen verkürzt. ZU lange Dateinamen können 
    Probleme versursachen...
  - 'Sub directories', ist die Option 'PL directories' Aktiviert kann man damit Angeben das die Daten in
     Unterordner wie 'Data/Textures/MyMesh/' gespeichert werden um Namenskonflikte zu verhindern.



>> 16.05.2005
[CO]
- Materialien Export erweitert/verbessert. Gibt nun im Material u.a. alle im Max Material eingetragenen Texturen als Layer
  aus.
- Neue Option: 'PL directories': Wenn aktiv werden die verschiedenen Resourcen gleich in entsprechende Unterordner wie bei 
  PL üblich (also unsere Vorgaben :) gespeichert.



>> 11.04.2005
[CO]
- Kleinen Bug im Max Exporter behoben wodurch man Max nach dem Exportieren neu starten musste da der Hierachie Tab
  blockiert war... bei StartProgressBar() fehlte einfach nur ein EndProgressBar(). :)



>> 25.02.2005
[CO]
- Jens machte mich darauf aufmerksam das bei den Notetrack Key für Animations-Definitionen der letzte Frame
  nicht berücksichtigt wird. Ich behob dies so das nun auch der letzte Frame einer Animation korrekt beachtet 
  wird.



>> 19.02.05
[CO]
- Behob im Max Exporter einen Bug (den Jens fand :) wodurch Animationen teils falsch Exportiert wurden sobald sich das das 
  Skelett durch die Animation 'fortbewegte'.



>> 18.02.05
[CO]
- Export Einstellungen werden nun im Log mit ausgegeben
- Neue Einstellmöglichkeit: 'Animation base relative': Damit kann man bestimmen ob die Animatione relative 
  zum allerersten Frame sind oder relative zu ihrem ersten Animations Frame.



>> 15.02.05
[CO]
- Passte die letzten Tage ME und Max Exporter an die Mesh Animation Änderungen an. Im ME kann man nun ganz wunderbar alle 
  möglichen Animationen miteinander kombinieren. :)
- Neue Optionenen: All bones: Damit werden ALLE Bones in der Szene exportiert, auch wenn diese keine Vertices
                   beinflussen. Ansonnsten werden nur Vertex beeinflussende Bones + deren Parents
                   exportiert.
  Optimize animations: In Animationen werden nur von dieser Animation animierte Bones + die
                       animierten Bone Key Frame Komponenten exportiert.
  Max delta: Wenn die Animationen Optimiert werden sollen gibt dieser Werte die Tolleranz an.



>> 12.01.05
[CO]
- Morpher Modifier Daten werden nun als Morph Targets exportiert. Desweiteren können nun auch Morph Target
  Animationen Exportiert werden - funktioniert genauso wie bei den Skeleton Animationen. :)



>> 03.01.05
[CO]
- Rausgefunden wie man an die Morpher Modifier Daten kommt. Noch wird nichts Exportiert - aber das ist nun
  kein Problem mehr. ;-)



>> 02.01.05
[CO]
- Note Track Keys können nun optional beim Exportieren berücksichtig werden. In diesen Keys lassen sich u.a.
  Animationen und Events definieren welche dann direkt so mit Exportiert werden. In der Exporter Doku steht
  genaueres.



>> 01.01.05
[CO]
- Die höchste Anzahl an Gewichten welche ein Vertex im Modell hat wird nun im Log angezeigt.
- Options sind nun nach General, Materials, Mesh, Skeleton und Animations aufgeteilt... wie quasi das PL Mesh
  Format selbst. Dadurch ist es nun möglich z.B. NUR Skeleton Animations zu exportieren so das man dann
  mehrere Meshs diese sich teilen können... 'mesh' ist nun sogesehen also auch noch das Skeleton Animation
  Format von PL. :)
- Optimierte das erkennen und verwerfen von doppelten Vertices mit hilfe einer Hash Table, dadurch wurde das
  optimierte Exportieren ganz erheblich beschleunigt. :)



>> 31.12.04
[CO]
- Max Exporter um mehrere Texture Koordinaten pro Vertex erweitert. Desweiteren können nun neben Statischen und Skinned
  Meshs auch Physique Meshs gespeichert werden. (Character Studio)
  Im Options-Dialog lässt sich nun zusätzlich einstellen ob Normalen exportiert werden, wie viele komponenten eine Textur
  Schicht hat und wie viele Textur Schichten es gibt. Auch ob die Face Orientierung vertauscht werden soll kann eingestellt
  werden. Optional können doppelte Vertices erkannt und entfernt werden.
  -> Jetzt hab ich nochmal fast nen ganzen Tag in den Max Exporter gesteckt um diesen weiter auszubauen... ich hoffe wirklich
     das es sich gelohnt hat und Jens nun weniger bemängelt. Ich selbst sehe nun im ME den Max 5 Drachen flattern
     (skinned mesh), Jens Troll rennen (physique animation/Character Studio) und Jens Omas Hütte Modell (static mesh)
     Texturiert und Animiert... damit muss man doch nun endlich mal was anfangen können! So, jetzt hab ich erstmal für dieses
     Jahr genug von PixelLight! ;-)



>> 10.12.04
[CO]
- Nun einigermaßen Einsatzbereit. :)



>> 08.12.04
[CO]
- y/z Komponenten lassen sich nun Optional vertauschen da Max ein anderes Koordinaten System verwendet als PL.



>> 07.12.04
[CO]
- Skeleton Animation + Animations Informationen werden Exportiert.



>> 05.12.04
[CO]
- Das Optionale Log gibt nun ganz genaue Informationen über das gespeicherte Model aus, im Prinzip kann man
  aus diesem Log das Model auch wieder rekonstruieren - sollte also mal etwas schiefgehen hat man genaue Einsicht
  in das WAS Exportiert wurde. :)



>> 04.12.04
[CO]
- Merkwürdig, als ich heute eher unbeabsichtigt eine Resource in VC7 öffnete konnte diese plötzlich problemlos 
  bearbeitet werden - scheint so als hätte sich wieder ein Problem übernacht von selbst gelöst. ;-)
  Fügte eine Log Klasse hinzu damit optional zu dem Mesh noch ein Log ausgegeben werden kann.
  Das Speichern des Meshs mit all seinen Chunks hab ich im Prinzip genauso gemacht wie es auch in der ModelLib
  gemacht wird.
  


>> 03.12.04
[CO]
- Angefangen das Max Model Export Plugin zu schreiben, das Plugin funktioniert soweit schon - nun muss es 'nur' noch
  die Daten korrekt exportieren. ;-)
  Hab auch gleich ausgetüftelt wie man das mit den Export Dialogen wo man noch diverse Dinge einstellen kann am besten 
  macht - jedoch musste ich leider bei mir dafür VC6 Installieren da VC7 irgendwie nicht mehr so recht mit den Resourcen
  welche man miteinbinden kann zurechtkommt... und diese Dialoge müssen mit dem VC Fenster Editor erzeugt werden...
  Zudem hies es auf diversen Seiten das Max 5.0 Probleme mit Plugins hat welche in VC7 geschrieben wurden - bis jetzt
  merkte ich davon aber noch nichts. Also Dialoge Resourcen bearbeiten in VC6, übersetzen in VC7 - *uff*. :)
