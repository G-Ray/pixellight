>> 03.06.2011
[CO]
- Switched PLProject back to the static versions of PLGeneral and PLCore, thank's to the new RTTI class parsing it's no longer required
  to use the dynamic versions
-> It appears that PLProject has now all the features we need for now



>> 03.06.2011
[SW]
- Created an parser which parses the main source-file and the header files of an project for the information needed for a .plugin file
  This solves at least two problems:
    - The .plugin files are now created for all compiled plugins under linux.
      The first used aproach was to load the compiled library which doesn't work under linux correctly due the different handling of
      library search paths.
    - The plugin file contained unwanted information. Under windows this was not much of a problem there where only additional
      Property entries for inherited properties. Under linux the problem were worse.
      The plugin files contained also information about classes which were'nt part of the project but of the linked pixellight libraries.
      This broke the scenerederer because some plugins could not be loaded and it caused an segfault on exit in the ClassManager.
- The parser has following features:
    - It uses RegEx expressions to garther the needed informations form the files
    - It uses the pixellight xml classes to generate the xml - document



>> 29.05.2011
[CO]
- "PLProject.py": Added 
    file.write(u"\t<Delayed>0</Delayed>\n")
  because delayed shared libary loading is currently under Linux not working/tested.



>> 26.05.2011
[CO]
- PLProject now also writes some basic RTTI class metadata into the XML plugin file - but not everything to keep the plugin file
  as compact as possible. The RTTI class metadata can be used to delay the loading of the shared library by creating a dummy RTTI
  class using the stored metadata. Class name, class namespace, base class name, description and properties are usually enough to
  prevent unnecessary shared library loading. To make the access to the RTTI class information within PLProject as simple as possible,
  PLProject now uses the dynamic versions of PLGeneral and PLCore instead of the static ones. As far as I can see there's no demand
  to use the static versions, I hope I didn't miss anything...



>> 24.05.2011
[CO]
- Added "--verbose" program argument to PLProject. By default, PLProject no longer tells you everything in detail what's
  going on because it's sometimes somewhat irritating if a lot of information is popping up when compiling.
- Until now the PLProject program version was 1.0 and was fixed build into the source code. It's somewhat annoying to modify
  such a version number frequently by hand and it has been proofen useful when the progam versions within a PixelLight release have
  the same release numbers. So, in "PixelLight 0.9.7-R1" PLProject is "PLProject PixelLight 0.9.7-R1" instead of "PLProject V1.0".
  I know, it's not that good if the version number suddenly goes down instead of up. In the long term I'am sure this will as be
  useful as it's already within e.g. the Autodesk 3ds Max scene exporter because you know exactly to which PixelLight version a
  PixelLight component/tool belonging to.



/*********************************************************\
 *  The entries below are in German only
\*********************************************************/



>> 22.08.2010
[CO]
- PLProject um "publish"-Option erweitert... derzeit wird Publish ausgeführt wenn man PLProject nur mit einem Verzeichnis
  als Parameter startet das aber kein gültiges Projekt ist. Hintergrund ist, das man so auch gut mit Drag'n'Drop arbeiten
  kann und einfach ein Verzeichnis über PLProject "fallen lässt" um das Projekt in diesem Verzeichnis zu publishen. Ein
  weiterer Grund ist, das ich keine last-minute-Bugs produzieren möchte indem ich an einer Grundkomponente wie PLProject
  größere Umbauten vornehme, zumindestens nicht im ersten Arbeitsschritt. (z.B. könnte man in PLProject auch den Command Line Parser nutzen)
  -> Linux implementation fehlt noch (weitere Runtime Shared Library Verzeichnisse möglich....)
  -> Für z.B. nur "Szenen" müsste noch PLViewerStandalone + dessen Config hinzugefügt werden... hier müssen wohl weitere
     Kommandozeilen Parameter her...
- PLProject "publish"-Option funktioniert nun auch unter Linux, für normale Dateien (z.B. zip) läuft das genauso ab wie unter Windows,
  für so-Dateien musste ich einen eigenen "Kopier-Pfad" hinzufügen. Zuerst wird in "/usr/lib" gesucht, danach in "/usr/local/lib"
  und erst wenn alles andere Fehlschlägt im übergeben Pfad wie z.B. "/home/cofenberg/pixellight/Bin-Linux/PLRuntime"
  oder "/home/cofenberg/pixellight/Bin-Linux/PLRuntime/Plugins/PLRenderer". Eine andere Reihenfolge würde wenig Sinn machen da in der
  so-Datei möglichst kein RPATH und schon gar kein absoluter RPATH stehen sollte da man dies schließlich weitergeben will...
  -> Scheint eigentlich soweit zu funktionieren wie geplant :D



>> 09.07.2010
[SB]
- Python-Implementation von PLProject hinzugefügt, die beim Cross-Compiling verwendet werden kann. In dem Fall sind die
  vom Compiler erzeugten Binaries ja nicht notwendiger Weise auch auf dem Host-System ausführbar, daher braucht es hier
  eine Script-Implementation (das Übersetzen von Teilprojekten für das Host-System wird von CMake zur Zeit leider noch
  nicht unterstützt).



>> 13.09.2009
[CO]
- Zuallerst: NEIN! Ich habe mit dieser kleinen Änderung NICHT solange gewartet bis der neuste Tagebuch eintrag GENAU
  ein Jahr nach dem letzten kommt! *g*
  "--output-path": Gibt man hier am Ende einen Slash oder Backslash mit wurde keine "plugin" Datei erzeugt. Damit man
  nicht in dieses Fettnäpfchen treten kann wird diese Situation nun intern berücksichtigt.



>> 13.09.2008
[CO]
- 'PLProject.exe' wird mit ins SDK Runtime-Verzeichniss kopiert... eventuell findet sich noch ein besserer Platz...



>> 22.08.2008
[CO]
- 'Win64'-Support hinzugefügt



>> 12.07.2008
[CO]
- CreatePluginFile(): Versions Information wird in Plugin Datei geschrieben + einige Strings können 'leer'
  sein, in dem Fall tauchen diese Elemente/Attribute nun einfach nicht mehr in der Plugin Datei auf.



>> 09.07.2008
[SB]
- Es werden nun die Sourcen nach den Kommentaren //<<nostepover>> und //<<stepover>> durchsucht und die gefundenen
  Informationen in die Registry eingetragen. Damit können wir direkt im Quellcode vermerken, wenn beim Debuggen
  eine bestimmte Funktion ignoriert werden soll, nach dem nächsten Compilieren werden diese Daten dann automatisch
  eingetragen. Das sollte es einfacher machen, endlich mal alle lästigen Funktionen beim Debuggen auszuklammern :-)
  Bisher verwenden nur PLGeneral sowie die Plugin-Projekte bereits PLProject, bei den anderen Projekten muss dies noch
  hinzugefügt werden, wenn dieses Feature dort genutzt werden soll.



>> 08.07.2008
[SB]
- Projekt hinzugefügt. PLProject ist ein Tool, das beim Übersetzen von PixelLight dafür gebraucht wird, um die Projekte
  nach relevanten Informationen durchzusehen und diese entsprechend weiterzuverwenden. Zur Zeit werden bereits die
  RTTI-Informationen in einem Projekt dazu verwendet, automatisch eine .plugin-Datei zu erstellen. Spätere Erweiterungen
  sollen sein:
  - Lokalisierungstexte parsen und in eine XML-Datei schreiben
  - Spezielle Kommentare in den Sourcen parsen und daraus die benötigten MSVC-Optionen in die Registry schreiben, damit
    z.B. bestimmte Klassen oder Methoden beim Debuggen ausgelassen werden. 
