/*********************************************************\
 *  The entries below are in german only
\*********************************************************/



>> 16.04.2009
[SB]
- Fehlende Abhängigkeiten in der CMakeLists.txt hinzugefügt.



>> 03.12.2008
[CO]
- 64 Bit VC Projekt Einstellungen hinzugefügt



>> 03.12.2008
[SB]
- BasicSceneApplet entfernt. Dies wäre eine totale Verkomplizierung, wenn man hier nochmal eine extra Ableitungshierarchie
  aufmacht. Und damit könnte dann immer noch nicht eine Applikation zwischen Plugin und Exe 'geteilt' werden.
- Statt dessen hat PluginPixelLight nun direkt einen Zeiger auf eine Applikation, die dann eingebettet wird. Dank der
  Änderungen am Application-Framework kann nun generell jede Applikation (ab GuiApplication) in fremde Fenster eingebettet
  werden, dies wird hier nun einfach verwendet. Es wird eine Application wie gewohnt instanziiert, dann wird aber nicht
  Run() aufgerufen, sondern die Applikation in das Plugin-Window eingebettet. Als Test habe ich die Teapot-Application
  verwendet, die Application kann aber jetzt ganz einfach ausgetauscht werden.



>> 16.10.2008
[CO]
- Projekt ist wieder übersetzbar, aber noch nicht wirklich wieder lauffähig. 'PL::Init()' etc. gibts nun nicht mehr, habe erstmal
  BasicSceneApplet angelegt - eine Klasse von 'BasicSceneApplication' abgeleitet die als 'Applet' fungieren soll.



>> 28.06.2008
[SB]
- Projekt gestartet. PLPlugin stellt eine Schnittstelle zur Verfügung, um PixelLight als Plugin in andere
  Umgebungen/Applikationen einzubinden. Also PixelLight als Plugin für z.B. Browser, nicht Plugins für PixelLight :-)
  Dazu wird eine abstrakte Plugin-Klasse bereitgestellt, die von konkreten Wrappern für verschiedene Plugin-Schnittstellen
  angesprochen wird. Von dieser Plugin-Klasse werden dann konkrete Plugins abgeleitet, z.B. das standard PixelLight-Plugin,
  das wir letztlich im Browser oder sonstwo sehen wollen.
- Basisklasse Plugin implementiert, die das abstrakte Plugin-Interface darstellt.
- Basisklasse PluginImpl implementiert, die nach dem Backend-Prinzip das Interface
  für konkrete Backends bereitstellt.
- PluginOpenGL als Testplugin implementiert, in dem eine minimale OpenGL Szene angezeigt wird.
- PluginPixelLight erstellt für das standard PixelLight-Plugin. 
- Das Triangle-Sample genommen und als vorläufiges PixelLight-Plugin implementiert :-)
 