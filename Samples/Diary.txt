>> 11.11.2011
[CO]
- Internal Visual Studio projects: Updated x64 settings



>> 22.10.2011
[CO]
- "61Sound": Removed unused "Application::ChooseSoundAPI()"
- "61Sound": Removed "#ifdef ANDROID" by using the "SoundAPI"-attribute default value of the class "PLSound::SCSound" as default sound API within this sample



>> 18.09.2011
[CO]
- The following samples are now using the frontend application as well to make it possible to run them easily on Android: "40ScriptHelloWorld", "41ScriptGlobalVariables",
  "42ScriptFunctors", "43ScriptBindings", "44ScriptOOP"



>> 16.09.2011
[CO]
- Although console based, "30Input" is now also using the frontend system in order to make it possible to e.g. use it also on Android to test the input. This change didn't really
  made the sample more complex - in fact, I was now able to remove the MS Windows specific message dispatch by just calling the "Ping()"-method of the frontend. :D



>> 13.09.2011
[CO]
- Whenever possible, the background is now cleared to gray. This way, in case on an graphics error we might still see at least something. This should make porting and
  first time debugging a little bit easier... if you see a black something on a gray background, you're half way there *g*. In general, black is still the default
  because this is more universal.
- "51RendererTexturing": The used texture is now generated at runtime instead of loading it in. This way, this primitive sample doesn't need any additional external
  resources and makes it therefore more suitable for a first texture mapping test when e.g. porting to new platforms.



>> 04.08.2011
[CO]
- The primitive renderer samples "50RendererTriangle", "51RendererTexturing", "52RendererMesh", "53RendererMultiView" and "54RendererRTT" no longer use input stuff. Focus
  is on PLRenderer, and PLRenderer only.
- The primitive renderer samples "50RendererTriangle", "51RendererTexturing", "52RendererMesh", "53RendererMultiView" and "54RendererRTT" no longer depend on high level stuff
  like PLEngine
- Updated "53RendererMultiView", it's working again and is still using PLGui via PLFrontendPLGui. But that's ok so that one can see how to use PLGui to create multiple
  renderer target windows (82QtInputHandling shows a similar thing using Qt). Using e.g. "PLFrontendOS::Frontend" instead of "PLFrontendPLGui::Frontend" will work as well
  (meaning mixing frontends).



>> 03.08.2011
[CO]
- Most samples are now using the new "pl_module_application"-macro to simplify the program entry point



>> 31.07.2011
[CO]
- The sample applications are now using PLInput instead of PLGui to get and process input events
- The scripted stand-alone application "45ScriptApplication.lua" now also shows how to get and process input events by using scripts



>> 16.07.2011
[CO]
- "20Gui" & "30Input": There was a special SDK version of the VC project missing



>> 15.07.2011
[CO]
- Moved "98GuiTest", "99Test" and "99TestPlugin" from the "PLSamples"-directory into the "PLTests"-directory
- "PLDemos", "PLSamples"... that's somewhat confusing, where's the real difference? Both are absolutely basic, meaning no dungeon demo like fancy graphics but only
  focus on certain aspects of the technology. Ok, in "PLDemos" one can see stuff like a colourful triangle while in "PLSamples" there's just a DOS-box, but still
  that's fundamental stuff and there should be no risk at all that someone has troubles to see the difference between "demos" (website downloads) and "demos" (SDK).
  Worst case would be that someone just downloads the SDK, see's "samples" (for programmers) and "demos" (for programmers) and decides after a short look that
  "demo" shows what the engine is capable of... and just see's a colourful rotating triangle...

  Within the PL forum there were already questions like "I want to be able to use PixelLight but I don't know what to do with it. :( I've downloaded it but do I
  need other files to make it work?" (http://dev.pixellight.org/forum/viewtopic.php?f=6&t=20)
  Back then, we were just able to answer "... and you must know C++ programming language.". Now we could also add "... or the Lua script language".
  So, there's definitly folks out there without any programming experience and downloading the PL SDK with the expectations that it's something like Unity or the
  UDK - download, install, start an editor and click around in order to create something (authoring tool). Right now, the PL SDK is for real developers (sorry for
  that clumsy statement). But in the future, this may change so that the PL SDK is for both (not just click'n'play, not just programmers) kinds of developers.

  With just "samples" (for programmers) it may be clear that this are "samples" for programmers and not for artists or for people just checking out the graphics
  capabilities of the engine. "PLDemos" in the SDK is definitely nothing one should see as a reference what's possible regarding to graphics but only to see some
  primitive examples to get the idea how it's working.

  In "12.04.2009", Stefan started a new samples directory (PLSamples2) and in "24.05.2010" I renamed the old PLSamples into PLDemos so we were able to rename
  PLSamples2 into PLSamples. Back then, I wasn't really happy with another examples/samples/demos directory. PixelLight is now nearly one year officially public
  available and I noticed that there are people thinking that PixelLight is over complicated and a monster. Because even more stuff like an editor and support
  for additional target platforms (mobile devices, browsers etc.) will come, it's now really time to try to slim down the PixelLight SDK structure at least a little
  bit so that the user is able to focus on his project instead of the technical arguments for all the different directories. So, I really think that one single
  "samples" directory for programmers should do the trick. Therefore I merged "PLDemos" into "PLSamples" resulting in one less term within the PixelLight SDK.
  -> PLDemoNetworkChat			-> 05NetworkChat
  -> PLDemoScriptApplication	-> 45ScriptApplication
  -> PLDemoRendererTriangle		-> 50RendererTriangle
  -> PLDemoRendererTexturing	-> 51RendererTexturing
  -> PLDemoMeshTeapot			-> 52RendererMesh (although it's using PLMesh, the focus in on how to render the mesh using PLRenderer)
  -> PLDemoRendererMultiView	-> 53RendererMultiView
  -> PLDemoRendererRTT			-> 54RendererRTT
  -> PLDemoSimpleScene			-> 60Scene
  -> PLDemoSoundBasic			-> 61Sound
  -> PLDemoPhysicsBasic			-> 62Physics
  -> PLDemoPhysicsRagdoll		-> 63PhysicsRagdoll
  -> PLDemoPicking				-> 64Picking
  -> PLDemoPostProcess			-> 65PostProcess
  -> PLDemoIngameGUI			-> 66IngameGUI
  -> PLDemo2DGame				-> 67Game2D
  -> PLDemoSPARK_PL				-> 70SPARK
  -> PLDemo_libRocket			-> 71libRocket

  By the way, please don't wonder why I'am not doing real implementation work lately. There are currently exams at my university so that I'am not able to focus on
  more complex PixelLight tasks - but there are still several "brainless" changes to do which can be done in a spare minute. After this month, there will
  be real implementation work, again. Additionally, the chances are good that I'll work with PixelLight within my master thesis as well as an university research project...



>> 12.07.2011
[CO]
- "40ScriptHelloWorld", "41ScriptGlobalVariables" and "43ScriptBindings" don't need an application class -> removed it to keep the samples
  as compact as possible



>> 03.07.2011
[CO]
- The Qt samples are now using "int main(int argc, char **argv)" as standard when using Qt. Under MS Windows, "qtmain.lib"/"qtmainq.lib"
  needs to be added as library.



>> 02.07.2011
[CO]
- Added "80QtHelloWorld", basing on PLQt "Demo1"/"Demo2" (https://sourceforge.net/projects/pixellight/) from Stephan Wezel
- Added "81QtScene", basing on PLQt "DemoScene" (https://sourceforge.net/projects/pixellight/) from Stephan Wezel
- Added "82QtInputHandling", basing on PLQt "DemoInputHandling" (https://sourceforge.net/projects/pixellight/) from Stephan Wezel



>> 14.06.2011
[CO]
- Enabled the log verbose mode within the script samples. By doing so, script errors can be seen at once within the console.



>> 13.06.2011
[CO]
- Added "ScriptedApplication.<extension>" files for an example of a scripted stand-alone application which can be e.g. started by using the tool PLViewer.
  Currently only the Lua script is implemented because the Python, JavaScript and AngelScript script backends are currently experimental and there's for
  instance RTTI object support still missing.
- Added the C++ demo "PLDemoScriptApplication" showing how to use "PLEngine::ScriptApplication" in order to load in and execute a scripted stand-alone application



>> 09.06.2011
[CO]
- "40ScriptHelloWorld", "41ScriptGlobalVariables", "42ScriptFunctors", "43ScriptBindings" and "44ScriptOOP" no longer have completely fixed
  build in script filenames, instead, the script filename is constructed by using the filename extension of the found script languages. This
  way the examples are more flexible regarding to removing/adding new script languages.



>> 15.05.2011
[CO]
- Added "44ScriptOOP" (work in progress)
  -> Right now the sample just runs a simple script function... but this script function is using OOP within the script itself.
	 Took me some hours to figure out how to program OOP in Lua, Python, AngelScript and JavaScript. AngelScript was actually the
	 most simple one because this language is quite similar to C++. OOP in Python works quite good - except that there's no support
	 for private stuff, just a common naming convention. Lua and JavaScript gave me some headaches, especially JavaScript. Both languages
	 have no native class support and therefore this feature has to be emulated by using the stuff the language is providing. In the
	 end the Lua OOP source code was working quite well and was also still somewhat readable. I'am not really happy with OOP in JavaScript,
	 there are a lot of "solutions", but one is more complicated and unreable than the other when it comes to define a class. Especially
	 the "privileged method" thingy for private attributes is somewhat annoying.
	 Ok, this was the first "OOP in scripts" session and I'am starting to get a feeling how to work with OOP in the different script
	 languages.



>> 13.05.2011
[CO]
- Renamed "41ScriptFunctors" into "42ScriptFunctors" (no, the reason for this rename wasn't the 42 itself)
- Added "41ScriptGlobalVariables"
- Added "43ScriptBindings"



>> 11.05.2011
[CO]
- Renamed "40Script" into "41ScriptFunctors"
- Added "40ScriptHelloWorld"



>> 26.04.2011
[CO]
- Added "40Script"



>> 12.04.2011
[CO]
- "PLDemo_libRocket" now updates the libRocket context dimension if the window size is changed



>> 26.03.2011
[CO]
- Added new demo "PLDemo_libRocket" showing how to use the new "libRocket_PL"-project within C++ projects



>> 09.03.2011
[CO]
- Due to a user request within the PL IRC chat room, PLDemoSimpleScene now also shows how to configure the compositing system by
  using the comfort scene renderer tool ("PLEngine::BasicSceneApplication::GetSceneRendererTool()"). I know, "scene renderer" and
  "compositing" is currently used as a synonyme which is a little bit confusing. "Scene renderer" was the previous name of a system
  that evolved over time into a full featured "realtime compositing system" which is no longer fixed on "scene rendering", although
  there are a few compositing steps involving scene rendering (but that's no longer the one and only purpose of the system!). So, I
  think the term "scene renderer" will vanish over the time completely because it no longer describes the system in the correct way
  and leads to confusion as now already seen (and expected :).



>> 22.02.2011
[CO]
- Added new demo "PLDemoSPARK_PL" showing how to use the new "SPARK_PL"-project within C++ projects



>> 18.02.2011
[CO]
- Added new demo "PLDemoPicking" showing how picking works



/*********************************************************\
 *  The entries below are in German only
\*********************************************************/



>> 05.11.2010
[CO]
- Auf Basis von "PLDemoRendererTriangle" erstelltes kleines Demo "PLDemoRendererTexturing" hinzugefügt das Texturierung auf
  der untersten Ebene zeigt



>> 01.09.2010
[CO]
- PLDemoRendererRTT: So wie es aussieht gibts noch probleme mit Multisample und Multi Render Targets, dass ist allerdings
  auch etwas tricky. (allgemein bekannt)
  Daher deaktivierte ich in SPRTTShaders erstmal Multisample für das in Texturen Rendern, damit ist nun ein unschöner Grafik
  Bug weg.



>> 15.08.2010
[SB]
- Überall, wo SetAppDataSubdir() gesetzt wird, wird nun auch - wie es bereits in der Doku steht - die Funktion
  System::GetDataDirName() verwendet, um den Namen an die Konventionen des jeweiligen Systems anzupassen. Dies sollte
  immer verwendet werden, denn unter Linux ist es nunmal üblich, verstecke Verzeichnisse zu verwenden und alles
  klein zu schreiben, unter Windows dagegen machen Punkte im Namen Probleme und man würde auch üblicher Weise den
  Namen groß bzw. in CamelCase schreiben. Nur wenn man explizit dieses Verhalten überschreiben möchte, sollte man
  den Namen direkt setzen, und damit das überhaupt möglich ist, ist es halt kein Automatismus, sondern muss selbst
  aufgerufen werden. Wir wollen aber "PixelLight" unter Windows und ".pixellight" unter Linux, und sollten es daher
  verwenden :-)
- In allen Samples SetName() und SetAppDataSubdir() eingebaut.



>> 10.08.2010
[CO]
- PLDemoIngameGUI hinzugefügt



>> 08.08.2010
[SB]
- Input-Controller für die Steuerung von SNGun hinzugefügt.
- SNGun auf die Verwendung von VirtualStandardController umgestellt, damit ist es nicht mehr nötig, direkt auf
  bestimmte Device-Typen zuzugreifen. Wenn ein anderes Mapping der Tasten erwünscht ist, kann dies nun ausserhalb
  geschehen, indem einfach die Controls des Virtual-Controllers anders verbunden werden, das gesteuerte Objekt
  (z.B. eine SceneNode wie SNGun) braucht deswegen nun nicht mehr verändert zu werden.



>> 02.08.2010
[SB]
- Bei einigen Demos wurden noch Kommandozeilen-Parameter geparsed, indem direkt auf das Argumenten-Array zugegriffen
  wurde. Dies ist keine gute Idee, weil in den Application-Basisklassen ja bereits Standardoptionen definiert werden,
  die so auch verwendbar sein sollten, aber wenn man dann nicht den CommandLine-Parser verwendet, kommt sich das
  natürlich in die Quere. Habe daher die Applikationen so erweitert, dass sie wenn nötig zusätzliche Optionen hinzufügen.
  Im Falle des Viewers wurde immer noch die Kommandozeile "zusammengematscht", was ebenfalls sehr unschön ist und natürlich
  auch nicht darauf Rücksicht nimmt, dass hier Standardoptionen wie --help verwendet werden können. Christian: Bitte meine
  Änderungen einmal durchtesten und schauen, ob alles noch so geht wie gewollt. Falls es für Drag&Drop unter Windows wichtig
  ist, dass die Kommandozeilenoptionen zusammengefügt werden (Leerzeichen), dann kann man das auch wieder so implementieren,
  indem man CommandLine verwendet und sich alle zusätzlichen Argumente zurückgeben lässt (also solche, die unbekannt sind).
  Diese kann man dann wieder zusammenfügen, ohne damit die Standardoptionen zu behindern :-)



>> 03.07.2010
[CO]
- Demos auf PLGui3 umgestellt, PLDemoPhysicsBasic, PLDemoPhysicsRagdoll und PLDemoSoundBasic haben erstmal keinen
  Auswahl Dialog mehr wo man die verwendete API Einstellen kann



>> 20.06.2010
[CO]
- PLDemoRendererMultiView & PLDemoRendererRTT laufen nun mit Fixed Functions, GLSL Shadern und Cg Shadern



>> 04.06.2010
[SB]
- Gui-Test aus 99Test entfernt und in ein eigenes neues Projekt 98GuiTest verschoben. Dies sind alles nur interne Tests,
  deswegen auch die Nummerierung von 99 an rückwärts, die später entfernt werden und nicht als Samples mit ausgeliefert
  werden. Eventuell wäre es sinnvoll, dann z.B. 99Test zu "retten" und z.B. nach PLTests zu verschieben, da hier doch
  einiges an sinnvollen Dingen zum Testen von PLCore enthalten ist. Zunächst einmal ist es jedoch am einfachsten, diese
  Projekte hier zu behalten, damit man möglichst einfach ausprobieren und testen kann :-)



>> 09.06.2010
[CO]
- "Mipmaps.scene" hinzugefügt, immer wieder nett Mipmaps in Aktion zu sehen... gut zum Verständnis und zum Implementation testen :D



>> 06.06.2010
[CO]
- PLDemoRendererTriangle & PLDemoMeshTeapot laufen nun mit Fixed Functions, GLSL Shadern und Cg Shadern



>> 03.06.2010
[CO]
- PLDemoRendererTriangle: "Fixed Functions" und "GLSL" liefern nun gleiche Ergebnisse
- PLDemoMeshTeapot: Der Surface Painter ist nun in zwei Versionen vorhanden: "Fixed Functions" und "GLSL"



>> 02.06.2010
[CO]
- PLDemoRendererTriangle: Der Surface Painter ist nun in zwei Versionen vorhanden: "Fixed Functions" und "GLSL", das
  letztere ist noch in Arbeit (man sieht aber schon was buntes *g*)



>> 24.05.2010
[CO]
- "PLSamples" haben mittlerweile einige Jahre auf dem Buckel, daher ist hier mal ein Refactoring angesagt.
  Stefan hat bereits vor einer Weile mit "PLSamples2" angefangen - das einen etwas anderen Ansatz verfolgt als
  die aktuellen "PLSamples". Alles was ich von "PLSamples" noch als brauchbar Empfinde, werde ich umbenannt und
  eventuell aufgepeppt in "PLDemos" ablegen. Während "PLSamples" mehr grundliegendste Dinge zeigt die ausschließlich
  für Programmierer interessant sein dürften, wird man in "PLDemos" von außen auch etwas sehen, daher wird man wie gehabt
  "PLDemos" Dinge direkt aus dem SDK-Browser über Screenshot anklicken starten können.
  "PLSampleTriangle" in "PLRendererTriangle" umbenannt, bei den anderen Beispielen mach ich es genauso - zukünftig sieht
  man anhand des Namens welche Komponente hier entscheident ist.
- PLSamples2 in PLSamples umbenannt und ins SDK eingefügt



>> 23.05.2010
[CO]
- "PLSceneViewer" aus PLSamples nach PLTools verschoben und in "PLViewer" umbenannt. Zukünftig wird dieses kleine Tool nicht
  nur Szenen, sondern auch Texturen etc. Anzeigen können.



>> 25.04.2010
[SB]
- Sample 04Dirs hinzugefügt: Demonstriert die Abfrage und Verwendung von Verzeichnisnamen, z.B. aktuelles
  Verzeichnis, Home-Verzeichnis etc.



>> 23.04.2010
[SB]
- 99Test: Klasse TestClass1 hinzugefügt, um ganz gewollt einen Namenskonflikt mit der Klasse gleichen Namens aus 99TestPlugin herbeizuführen.
- 99Test: Es wird nun eine Log-Datei geschrieben.



>> 22.04.2010
[SB]
- 99Test: Test für Signals hinzugefügt.



>> 19.04.2010
[CO]
- 99TestPlugin: Tests für das neue PLCore hinzugefügt. (Port von PLTestPlugin)



>> 18.04.2010
[CO]
- PLSceneViewer: Auflösung und Vollbild Modus Ändern klappt wieder korrekt (und viel einfacher als Früher *g*)



>> 18.04.2010
[SB]
- 99Test: Tests für das neue PLCore hinzugefügt.



>> 07.04.2010
[CO]
- "PLSamplePNTriangles" entfernt da PNTriangles von aktuellen Grafikkarten Treibern nicht mehr unterstützt werden



>> 14.03.2010
[CO]
- An die Änderungen des Konfigurations-Systems angepasst



>> 26.06.2009
[CO]
- "PLSampleSceneNodes": "SNSampleSelection": Hier wurde der "Selection Buffer" entfernt da hoffnunglos "out of date"
- "ObserverCameras.scene" Beispiel Szene entfernt da "SCStaticCamera" aus PLEngine schon seit langem nicht mehr korrekt läuft



>> 16.04.2009
[SB]
- Gui Samples hinzugefügt. Das erste (20Gui) zeigt nur die Verwendung von GuiApplicatino und öffnet ein leeres Fenster.
  Das zweite Sample (21GuiWidgets) wird anhand eines eigenen Test-Fensters möglichst viele der PLGui-Widgets demonstrieren.
  Hierfür baue ich auf dem PLGui3-Test auf.
- PLGui3-Daten von Bin/Lab nach Bin/PLSamples2 verschoben und PLGui3Test gelöscht.
- 21GuiWidgets: So umgebaut, dass nun eine eigene Fensterklasse verwendet wird, die alle Elemente enthält, anstatt wie bisher
  statische und gloable Variablen in einer .cpp Datei. Das sind immer die Fälle, wo man "mal eben schnell" was testen will und
  dann auf vernünftiges OOP verzichtet, die einem dann später viel unnötige Arbeit bereiten ;-) 



>> 13.04.2009
[SB]
- Sample 03Signals hinzugefügt: Demonstriert, wie man den Handler für das Beenden des Tasks
  überschreibt, damit die Applikation vor dem Beenden noch die aktuelle Aufgabe zu Ende führen
  kann und dann die Applikation ordentlich beendet. Dieses Sample ist bisher nur unter Linux
  sinnvoll, da unter Windows so weit ich weiß kein Signal beim Abschiessen eines Prozesses
  existiert, welches man abfangen könnte (jedenfalls nicht vor GuiApplication).
- Sample 99Test hinzugefügt - zum wilden Ausprobieren :-D



>> 12.04.2009
[SB]
- Neue Sammlung von Samples begonnen. Die sind erstmal nur für uns selbst, darum wird auch noch
  nichts davon im SDK mitgeliefert oder installiert. Diese Samples dienen hauptsächlich dazu,
  Schritt für Schritt den Aufbau des Application-Frameworks zu zeigen. In jedem Sample gibt
  es daher eine Application-Klasse, die Schritt für Schritt um weitere Komponenten erweitert
  wird. Anhand dessen können alle wichtigen Komponenten des Application-Frameworks demonstriert
  werden, und für uns ist es gut, um das Framework dabei vernünftig aufzubauen und zu erweitern.
  Die Ausrichtung ist also etwas anders als bei unseren bisherigen Samples, und sollen diese daher
  nicht unbedingt ersetzen. Wir müssen uns dann später also überlegen, was wir aus diesen Samples
  machen wollen :-)
- Sample 01Application hinzugefügt: Demonstriert die Verwendung von Application für eine
  Kommandozeilen-Applikation ("Hello World")
- Sample 02CommandLine hinzugefügt: Demonstriert die Verwendung von CommandLine, um
  Kommandozeilenparameter für die Applikation zu definieren.



>> 08.03.2009
[CO]
- Die Scene Node Modifier Implementationen berücksichtigen nun endlich wieder den "Active"-Zustand. Dies hab ich nun so realisiert das
  Event Handler "Disconnected" werden sobald ein Scene Node Modifier inaktiv wird und beim Aktive werden sich wieder "Connecten".



>> 10.01.2009
[CO]
- PLSceneViewer & PLSampleCharacterAnimation: 'zweite Mauszeiger' ist weg
- 'Application::UpdateTimeScaleTextNode()' ging nicht mehr korrekt



>> 09.01.2009
[CO]
- PLSampleInGameGui: Ingame GUI entfernt da überflüssig, dadurch ist auch der 'zweite Mauszeiger' weg



>> 13.12.2008
[CO]
- PLSceneViewer: 'MakeScreenshot()'-Funktion in 'PLEngine::BasicSceneApplication' verschoben
- PLSceneViewer: 'LoadScene()'-Funktion in 'PLEngine::BasicSceneApplication' verschoben, PLSceneViewer ist dadurch 'minimal' kompakter
  geworden :D



>> 07.12.2008
[CO]
- PLSamplePhysics: Zeigt wie man auf Physik Kollisionen reagieren kann - könnte man direkt für ein Brügelspiel nutzen *g*



>> 29.11.2008
[CO]
- Viele Beispielszenen nutzen nun den neuen Neuer Scene Node Modifier 'SNMMouseOrbitingController' für Orbiting



>> 23.11.2008
[CO]
- PLSampleInitExit: WOW! Hier hatte sich ein Fehler eingeschlichen - im Konstruktor übergibt man mittlerweile den Klassen Name eines 'Surface Painters'
  und nicht wie früher den Frame-Titel... *g*
- PLSampleSound & PLSamplePhysics & PLSampleRagdoll: Auch hier hatte sich was unschönes beim Anpassen an Application Änderungen ergeben:
  'OnCreateScene()' wird noch vor dem eigenen Code in 'OnInit()' aufgerufen so das man im Falle von PLSampleSound schon was hörte noch bevor man seine
  Auswahl der Sound API getroffen hatte.



>> 19.10.2008
[CO]
- Die 'internen' VC Projektdateien werden nicht mehr mit ins SDK kopiert
- SDK VC Projektdateien: 'CMakeLists.txt' & 'Diary.txt' herausgenommen da diese in der SDK Fassung nix zu suchen haben. Es bot
  sich nun direkt an alle Dateien im VC Projekt von 'Source Files' direkt in den Grundordner zu verschieben - das macht das für
  die SDK Fassung nochmal überschauberer. :D
- Wie besprochen wird nun wenn möglich immer 'OnInit()' statt 'OnCreateMainWindow()' genutzt (z.B. zum Key-EventHandler registrieren)
- 'ChangeIntoAppDirectory()'-Verwendung war an vielen Stellen falsch. Das darf mittlerweile natürlich nicht mehr schon im Konstruktor
  genutzt werden da zu diesem Zeitpunkt der 'Excecutable Filename' noch nicht gesetzt wurde.
- PLSampleInGameGui: GUI Elemente haben nun wieder korrekte Startzustände



>> 12.10.2008
[CO]
- Durch die Application Framework änderungen kann man nun problemlos direkt in 'OnInit()' seine Window-EventHandler anstöppeln
  anstatt wie vorher erst in 'OnCreateMainWindow()' da zu diesem Zeitpunkt nun das Hauptfenster bereits erzeugt wurde. :D
  Dort wo nur 'OnCreateMainWindow()' und kein 'OnInit()' war lies ich es erstmal so wie es ist... finde das so herum immer noch
  ok. Wenn das aber generell in 'OnInit()' gemacht werden sollte können wir das natürlich gerne.



>> 11.10.2008
[CO]
- Bis auf PLSampleSetup implementiert kein Beispiel mehr 'PLCore::Application::OnRun()'



>> 07.10.2008
[SB]
- PLSample2DGame: Als weiteres Eingabegerät den SpaceNavigator hinzugefügt. Das Spiel kann nun mit Tastatur, Maus, Joystick,
  SpaceNavigator und WiiMote gesteuert werden und dient somit auch als Demonstration, wie man die einzelnen Geräte mit
  PLInput ansprechen kann. 



>> 05.10.2008
[CO]
- SNSampleSelection::DrawPost(): Selektieren kommt nun ohne Tiefen-Puffer nutzung aus was die Performance verbessert



>> 23.09.2008
[CO]
- PLSceneViewer: Application::LoadScene(): 'Clear Color' wird zurückgesetzt auf Default Wert
- PLSceneViewer: Application::LoadScene(): 'Default Scene Renderer' wird erstmal auf nix gesetzt so das beim 'richtigen' setzen
  dann ein neuer Scene Renderer erzeugt wird mit den Default Einstellungen



>> 22.09.2008
[CO]
- PLSceneViewer: Application::LoadScene(): Default Scene Renderer wird gesetzt so das dieser nach dem Laden 'jeder' Szene gesetzt
  ist wenn in dieser nix eigenes angegeben wurde.



>> 13.09.2008
[CO]
- Wie von Stefan letztes Wochenende vorgeschlagen gib es nun zwei VC-Projekte pro Beispiel - einmal das im SDK landet und auch bei
  Debug KEINE Debug-Versionen von PixelLight nutzt, und einmal mit 'Internal' im Namen das rein für uns intern ist und wo Debug-Versionen
  von PixelLight genutzt werden zum 'bis ganz runter'-Debuggen. Statt 'PLSceneViewer.sln' also 'PLSceneViewerInternal.sln'. Die Ausgaben
  heißen allerdings wieder gleich, wüsste nicht warum wir hier intern eine Unterscheidung machen sollten. In 'PixelLight.sln' wird
  die interne Version genutzt da wir eigentlich immer nur das nutzen. In den Projekten gib es also nun kein 'Debug_SDK' mehr.
- Wie von Stefan letztes Wochenende vorgeschlagen: PLSamples Ordner Struktur noch etwas vereinfacht, Header und Quellcodes liegen
  nun beisammen



>> 04.09.2008
[CO]
- PLSceneViewer: Application::LoadScene: Prüft nun was für Hardware vorliegt - ist diese 'SEHR' alt, so
  wird Sicherheitshalber auf 'Basic.sr' umgeschaltet und eine Warnung ins Log geschrieben. So sieht man
  selbst dann noch etwas wenn man den Grafikkarten-Treiber deinstalliert. (ausprobiert *g*) Gewinnt keinen
  Schönheitspreis, aber besser als nix auf dem Bildschirm oder gar Crash. Die fixierung auf 'Basic.sr'
  ist sicherlich auch nicht immer optimal - aber das ist ja nur ein 'Beispiel' unser Viewer der für so
  viele Fälle wie möglich Einsetzbar und so flexibel und universell wie möglich sein soll.



>> 23.08.2008
[CO]
- VC-Projekte um 64 Bit Support erweitert wie ich das in den letzten Tagen schon für die meisten anderen Projekte machte. Hier gabs
  keinerlei Probleme da wir nur noch unsere eigenen Projekte als Grundlage nutzen. :D



>> 18.08.2008
[CO]
- PLSceneViewer: 'SetupDialog', hier werden die Kameras nun wieder korrekt aktiviert/deaktiviert etc.



>> 17.08.2008
[CO]
- PLSceneViewer: In Application::OnPopulateSceneContainer() wird direkt beim Ingame-GUI ein passender Fokus gesetzt - ansonnsten
  muss man erst in das Fenster klicken um mit ESC den kleinen Ingame-Dialog öffnen zu können. Bei PLSampleCharacterAnimation ähnliche
  Thematik.
- PLSceneViewer: Der Setup-Dialog + die Kamera aktivierung/deaktivierung klappt nun wieder so wie es sollte
- PLSceneViewer: Nutzt das neue 'PLRenderer::Frame::EventFullscreenMode'-Event um das 'Fullscreen' GUI Element zu aktualisieren



>> 12.08.2008
[SB]
- PLSceneViewer: Test zur Demonstration eines Bugs hinzugefügt. Es wird ein simples Fenster in der Ingame-GUI angezeigt, das
nichts anderes tut, als ein vorher eingeladenes Bild anzuzeigen. Lädt man nun eine Scene (z.B. AnchorCamera), stürzt der
Viewer nach kurzer Zeit ab -> scheint so, als gäbe es ein Speicherleck in GuiPL/Graphics. Da wir bisher die Ingame-GUI so
gut wie nicht benutzt haben, und wenn dann nur ohne Images, ist dieser Bug wohl bisher nicht aufgefallen.



>> 08.08.2008
[CO]
- PLSceneViewer etwas robuster gemacht: Kann der gewünschte Scene Renderer nicht gesetzt werden, so wird eine Fehlermeldung
  ins Log geschrieben und als Fallback 'Basic.sr' genommen. Somit bekommt man also auch im Fehlerfall etwas zu sehen.



>> 07.08.2008
[CO]
- Ich entschloss mich dazu "PLSampleScene" komplett aus PLSamples zu entfernen. Das Beispiel läuft seit geraumer Zeit nicht
  mehr wirklich gut und es ist für mich nicht abzusehen wann ich dazu gekommen wäre das nochmals kräftig zu überarbeiten.
  Wirklich hilfreich war das Beispiel ebenfalls nicht mehr wirklich, die einzige rechtfertigung wäre noch 'Zeigt wie man
  einen Scene Renderer Implementieren kann' gewesen - da wir nun aber OpenSource gehen zählt das nicht mehr wirklich da
  man sich dann direkt einen einfacheren Scene Renderer als gesammtes Anschauen kann um zu sehen wie das aufgebaut ist.
  Die Modelle und Texturen waren ebenfalls nicht 'von uns' und vor Jahren nur mal als 'kurzzeitiger' Platzhalter gedacht -
  aber leider kam nie was eigenes. :/
- PLSample2DGame: NUR noch der Scene Renderer kümmert sich nun um die Darstellung, das hat die Sache deutlich einfacher
  und überschaubarer gemacht.
- PLSample2DGame auf BasicSceneApplication umgestellt, somit nutzen nun ALLE Beispiele das Application Framework :D



>> 06.08.2008
[CO]
- Dort wo möglich war auf 'ShutDown' der Application Klasse umgestellt



>> 05.08.2008
[CO]
- Fast alle Beispiele nutzen nun keine PLGui::WindowListener mehr



>> 03.08.2008
[CO]
- PLSampleSound auf BasicSceneApplication umgestellt
- Die auf das Application Framework umgestellten Beispiele auf die 'Application::GetName()'-Erweiterung angepasst, dadurch
  ist alles nochmals ein Stück kompakter geworden :D
- PLSamplePhysics auf BasicSceneApplication umgestellt
- PLSampleRagdoll auf BasicSceneApplication umgestellt



>> 02.08.2008
[CO]
- PLSampleInGameGui & PLSampleCharacterAnimation & PLSceneViewer & PLSampleSimpleScene nutzen nun BasicSceneApplication und sind
  dadurch noch ein Stück einfacher geworden
- PLSamplePostProcess auf BasicSceneApplication umgestellt



>> 26.07.2008
[CO]
- PLSamplePostProcess & PLSamplePhysics & PLSampleRagdoll & PLSampleSound: 'SNInfoText' entfernt, die Beispiele
  nutzten nun 'SNText' pro Text Zeile



>> 23.07.2008
[CO]
- PLSampleCharacterAnimation & PLSceneViewer: 'GuiContainer' nutzt nun 'Focus' statt 'Mouse' Ereignisse um festzustellen
  ob jemand in einem Ingame GUI herumdrehen will und man daher besser die Kamera deaktiviert da es ansonnsten 'sehr'
  störend ist wenn man z.B. an einem Regler dreht und sich gleichzeitig der Kamera Blickwinkel ändert obwohl man eigentlich
  guckn wollte was das drehen in der Szene für eine Auswirkung hat...
  Nun muss man zwar ins 'leere' klicken um die Kamera wieder zu aktivieren, aber so herum ists denke ich besser als wenn
  die Kamera auf einmal deaktiviert wird wenn die Maus das Hauptfenster verlässt und daher ein 'Mouse Leave' Ereigniss
  losbrettert. Eine andere 'einfache' Lösung viel mir nicht ein. :/



>> 09.07.2008
[CO]
- PLSampleScene auf GUI-Tasten umgestellt



>> 08.07.2008
[CO]
- PLSampleCharacterAnimation: Nutzt nun PLEngine::SceneApplication
- PLSampleInGameGui: Nutzt nun PLEngine::SceneApplication
- PLSamplePhysics & PLSampleRagdoll auf GUI-Tasten umgestellt



>> 05.07.2008
[CO]
- PLSceneViewer: Nutzt nun PLEngine::SceneApplication
- Beispiele die bereits die Application Klassen nutzen nochmal durchgeschaut... und auch dort wo mehrere Anweisungen in einer Zeile waren
  das geändert. "Zumindestens" in den Beispielen sollten wir gängige Regeln der Software Engineering einhalten an denen sogar 'Software Qualität
  gemessen' wird.
- SPSamplePNTriangles: Im Surface Painter findet kein Input Handling mehr statt...



>> 04.07.2008
[CO]
- PLSampleSimpleScene: Nutzt nun PLEngine::SceneApplication



>> 27.06.2008
[CO]
- PLSampleGui: PLGui::GuiApplication nutzung noch etwas verbessert
- PLSampleChatIRC: Nutzt nun PLGui::GuiApplication
- PLSampleTriangle: Nutzt nun PLEngine::RenderApplication
- PLSampleSetup: Nutzt nun PLEngine::RenderApplication
- PLSampleTeapot: Nutzt nun PLEngine::RenderApplication
- PLSampleRTT: Nutzt nun PLEngine::RenderApplication
- PLSamplePNTriangles: Nutzt nun PLEngine::RenderApplication
- PLSampleInitExit: Nutzt nun PLEngine::RenderApplication... hm, Stefan, meist du wir können das Beispiel noch weiter minimieren? *g*
- PLSampleMultiView: Nutzt nun PLEngine::RenderApplication



>> 12.05.2008
[CO]
- PLSceneViewer: Über 'm' kann man die Ingame-GUI Maus nun sichtbar/unsichtbar machen + 'Fullscreen' CheckBox im Dialog funktioniert nun
- PLSceneViewer: Über den Dialog kann man endlich die Bildschirm Auflösung bequem jederzeit ändern



>> 10.05.2008
[CO]
- PLSampleSound: Statt 'select' wird hier nun von 'choose' gesprochen da leider 's' mittlerweile für die Kamera steuerung vergeben ist und es
  so zu Eingabekonflikten kam. (jedesmal wenn man sich nach hinten bewegte öffnete sich gleichzeitig ein Dialog... nicht gut *g*)
  PLSampleRagdoll und PLSamplePhysics ebenfalls entsprechend angepasst damit das weiterhin Einheitlich ist.



>> 09.05.2008
[CO]
- "Computer.md2" und "Computer.dds" entfernt da nicht sooo schick + nur von "PLSampleInGameGui" verwendet. In diesem Beispiel wird nun ein
  ohnehin viel modernerer 'Flachbildschirm' verwendet. *g*
- PLSampleInGameGui: Licht und Statur werden nun über einen Scene Node Modifier animiert anstatt 'per Hand' - dadurch wird das Beispiel etwas
  kompakter (es geht ja um das Ingame GUI, nicht wie man RTTI Variablen manipuliert :)
- Stein (Mesh, Texture und Material) ausgetauscht
- Statur ausgetauscht
- PLSampleCharacterAnimation: Licht herausgenommen da man es hier nicht braucht + das Popup Menü öffnet sich nun mit der rechten Maustaste
  (früher gabs da Eingabekonflikte mit der Kamera Steuerung, ist nun aber nicht mehr der Fall)



>> 01.05.2008
[CO]
- PLSample2DGame: 'SRSample' zu 'SRPSample' gemacht
- PLSampleScene: SRSample' zu 'SRPSample' gemacht
- PLSample2DGame: Code Unterordner entfernt da hier eher störend als hilfreich



>> 27.04.2008
[CO]
- SCSampleWater etwas aufgeräumt



>> 18.04.2008
[CO]
- PLSampleSound an PLSound änderungen angepasst, dieses Beispiel ist nun genauso aufgebaut wie PLSamplePhysics
- PLSample2DGame an PLSound änderungen angepasst. Bei der Gelegenheit vereinfachte ich hier die verwendung von Sounds noch etwas indem ich
  Nodes mit Sound von PLSound::SNSound ableite.
- PLSampleSetup an PLSound änderungen angepasst, sprich, hier kann man nun keine Sound API mehr auswählen...



>> 12.04.2008
[CO]
PLSceneViewer:
- In 'PLMain()' werden nun alle Parameter zu einem String "zusammeng eworfen". Da dieses Programm nur einen Parameter akzeptiert geht das so
  in Ordnung und macht die Verwendung noch etwas einfacher... denn gerade wenn man über VC eine Szene als Kommendo-Zeile übergibt vergisst man
  schonmal '"' zu verwenden wenn im Dateinamen Leerzeichen sind - und schon wird ein Parameter zu mehreren und man wundert sich wieso nix geht. *g*
- 'Application::Run()': 'Pause'-Taste entfernt da nicht wirklich nötig hier und momentan bekommt man noch nicht wieder mit was gerade den Eingabe-Fokus
  hat und schon wechselt man in den Pause-Modus wenn man in der Ingame-Konsole ein 'p' drückt und wundert sich wieso auf einmal alles 'Einfriert'.



>> 09.03.2008
[CO]
PLSceneViewer:
- Konnte die dem Programm übergebe Szene nicht geladen werden so erscheint nun eine Fehler Nachricht beim Beenden damit man weis was los ist.
  Beim 3ds Max Exporter kann es schonmal vorkommen das man in die 'User Properties' absolut falsches Einträgt und dann sind XML-Regeln gebrochen
  und die Szene kann natürlich nicht mehr geladen werden... während man gerade im 'kreativen Prozess' ist wundert man sich dann hin und wieder
  'uh, das dauert ja diesmal lange zu starten'... *g*



>> 07.03.2008
[CO]
PLSceneViewer:
- Bugfix: Das erzeugen von Screenshots funktioniert nun wieder korrekt



>> 02.03.2008
[CO]
- "CMakeLists.txt": Beim 'Install' noch weitere 'EXCLUDE' eingefügt da ansonnsten im erzeugten gepackten SDK jede menge Zeug
  einer lokalen Arbeitsversion liegt was nicht drinnen sein sollte: "build", "enc_temp_folder", (wenn VC mal Abstürzt oder
  so hat man danach so einen Ordner...) "*.ncb", "*.suo", "*.user", "*.cfg" und "*.lmcfg"



>> 28.02.2008
[CO]
- Wo es problemlos ging aufs neue Input-System umgestellt



>> 13.10.2007
[CO]
PLSceneViewer:
- Die neue 'Window::OnKeyUp()'-Funktion wird hier verwendet um zu vermeiden das der Options-Dialog sich ständig öffnet/schließt
  wenn man die Escape-Taste gedrückt hält (sehr störend!)



>> 21.09.2007
[CO]
- Nahm bei einigen Beispielen die Beleuchtung raus damit sich diese auf ganz bestimmte Aspekte konzentrieren können



>> 17.09.2007
[CO]
- Alle Projekte von PLBool auf bool zurückgestellt (siehe PLBase Diary-Entrag von heute)



>> 05.09.2007
[CO]
PLSceneViewer:
- Application::LoadScene() 'leitet' die Information derzeit an die einzelnen Render Schritte weiter damit man wie gehabt
  sehr einfach z.B. 'AmbientColor' setzen kann. Weis nicht ob das so bleiben wird, ist hauptsächlich erstmal so damit alles
  wie gehabt läuft.



>> 26.08.2007
[CO]
- Normal Maps sind nun ebenfalls (in einem speziellen Format) Komprimiert
- 'MiniDungeon.scene': Lade Bildschirm entfernt da es mittlerweile ohne schneller läd als mit *g*



>> 20.08.2007
[CO]
- PLSamplePostProcess: Kamera Steuerung komplett heraus genommen da es das Beispiel nur unnötig aufbläst
- SNMSamplePosition in SNMPositionSample umbenannt da NUR die Position der Scene Node verändert wird



>> 18.08.2007
[CO]
- PLSamplePostProcess an Post Processing Änderung angepasst und etwas vereinfacht.



>> 15.08.2007
[CO]
- PLSample2DGame an Post Processing Änderung angepasst. Wie gehabt wird das über eine Kamera gesteuert was die Implementation
  sogar noch ein Stückchen einfacher und vorallem universeller macht.



>> 11.08.2007
[CO]
- PLSceneViewer hat keine speziellen Post Processing Dinge mehr drinnen (kann man jedoch weiterhin über Debug Dialog einstellen)
- PLSamplePPLandHDR nach kurzer Rücksprache mit Jens heraus genommen da dieses Beispiel nichts wirklich brauchbares Zeigt



>> 27.07.2007
[CO]
- Einige Texturen durch dds-Varianten ersetzt. Das Format rockt wirklich die Hütte da die Daten gleich passend für die GPU
  komprimiert abgelegt werden können + Mipmaps - die Ladezeiten sind hier dadurch teils doppelt so schnell als bei anderen
  Formaten... und das obwohl das derzeit noch nicht absolut optimal geladen wird da DevIL intern diese Texturen immer noch
  dekomprimiert auch wenn man die koprimierten Daten direkt zur GPU weiterreicht, da lässt sich also noch was rausholen. Da
  werde ich bei Zeiten schaun was sich ohne zu heftiges hacken machen lässt, denn es werden leider eher immer mehr Textur
  Daten als weniger, daher muss das so flott wie irgend möglich gehen.



>> 19.07.2007
[CO]
PLSampleGui:
- Nahm die Application-Klasse heraus da dies hier wirklich nicht benötigt wird und alles nur künstlich aufbläst



>> 09.06.2007
[CO]
- VC-Projekte 'Debug'-Konfigurationen: Entfernte hier die SDK Libraries & Includes Verzeichnisse... da im SDK mittlerweile
  nur noch die Release Builds liegen ist die 'Debug'-Konfigurationen nur noch für uns für die Entwicklung, und da sind diese
  extra Verweise unnötig.



>> 01.06.2007
[CO]
- Ging alle Beispiel-Codes nochmal durch und machte Änderungen welche sich als Sinnvoll erwiesen haben (mehr Sicherheit etc.)



>> 29.05.2007
[CO]
PLSceneViewer:
- Wie vor der Ingame Menü/Dialog umstellung kann man nun wieder über einen Button die Variablen des verwendeten Scene
  Renderers verändern, wird zwar sicherlich nicht alles so bleiben, aber gerade beim Debuggen recht hilfeich :)
PLSampleCharacterAnimation:
- Im Popup-Menü 'Show' in 'Debug' umbenannt. Dieses Untermenü wird 'automatisch' mit den möglichen Optionen gefüllt.



>> 27.05.2007
[CO]
PLSampleChatIRC:
- Mittlerweile klappt das 'Login' recht gut, aber irgendwie will 'Join Channel' noch nicht wirklich :(



>> 26.05.2007
[CO]
- Da man seit heute problemlos Debug/Release Builds miteinander mischen kann (siehe PLBase-Diary Eintrag) fügte ich bei
  allen VC-Projekten Konfigurationen mit dem Namen 'Debug_SDK' hinzugefügt welches fast identisch mit 'Debug' sind,
  aber im gegensatz dazu Release Engine Libraries nutzen - denn Debug Versionen der Engine Komponenten werden denke ich mal
  im öffentlichen SDK NICHT liegen und daher muss man dort dann zum Debuggen Release Versionen nutzen.



>> 22.05.2007
[CO]
- Ein paar 'using namespace' hinzugefügt



>> 18.05.2007
[CO]
- HUD von 'BitmapsAndBillboards.scene' etwas verbessert



>> 17.05.2007
[CO]
- Etwas an PLSampleCharacterAnimation gefeilt
- In 'BitmapsAndBillboards.scene' dreht sich das PL-Logo nun *g*
PLSampleSceneNodes:
- SNMPosition in SNMSamplePosition umbenannt damit das nicht mit der Klasse innerhalb von PLEngine in Konflikt kommt, das
  hier ist 'nur' eine kleine Modifier Beispiel Implementation.
- 'SNOcclusionQuery' in 'SNSampleOcclusionQuery', 'SNSelection' in 'SNSampleSelection' umbenannt damit sofort anhand des
  Namens ersichtlich wird das dies wirklich 'nur' Beispiele sind
- SNMPhysicsCorrectDistance & SNPhysicsMouseInteraction aus PLSamples in PLPhysics verschoben (siehe PLEngine Diary)
- 'SCWater' in 'SCSampleWater' umbenannt



>> 11.05.2007
[CO]
- 'TransformerGizmos.scene' entfernt und dafür eine aktualisierte Szene namens 'TransformGizmoControllers.scene' hinzugefügt
PLSampleChat:
- Kommentare erweitert
- Einige C-String Jongliereinlagen entfernt und durch kompakte und übersichtliche PL-String Künststückchen ersetzt. :D
  In ChatServerConnection::OnReceive() und ChatClientConnection::OnReceive() wird dabei die 'terminating zero' Problematik
  hoffentlich ausreichend behandelt so das hier NIE etwas daneben gehen kann falls zu viele davon da sind, oder noch
  schlimmer überhaupt keine da beim Senden vergessen oder während der Reise verloren gegangen oder 'gehackt' wurde - laut
  "Murphies Gesetzt" muss man ja immer mit dem Schlimmsten rechnen. *g*



>> 10.05.2007
[CO]
- Sortierte ins Diary so richtig alte Einträge aus "PLSDK/internal/old_diaries.zip" ein



>> 09.05.2007
[CO]
- Einen alten Diary Eintrag vom "27.11.03" einsortiert



>> 05.05.2007
[CO]
- Neues Beispiel: PLSampleChatIRC: Grundliegender IRC Chat Client - noch nicht Funktionsfähig



>> 29.04.2007
[CO]
- Passte alle Szenen an die PLEngine::SNMTargetRotation Änderungen an



>> 28.04.2007
[CO]
- PhysicsCharacterController.scene: Nutzt den neuen Scene Node Modifier in PLEngine 'SNMMoveToTarget' um eine 'weiche'
  Third Person Kamera zu erzeugen
PLSceneViewer:
- Application::LoadScene(): Ist in einer Szene eine gewünschte Start Kamera eingestellt, so wird diese erst
  gesetzt wenn die Szene geladen wurde - ansonnsten ist die Reihenfolge der Szene Nodes in der Szene Datei wichtig was nicht
  so gut ist.
- Kameras werden automatisch beim start 'eingefrohren' und jeweils nur die aktive Kamera 'aufgetaut', so ändern sich nicht
  alle steuerbaren Kameras wenn man eine per z.B. Tastatur bewegt.
- 'Root.SceneRoot....' wird im Dialog bei den Kamera Namen abgeschnitten da diese Information hier überflüssig ist
  (Nodes sind im Viewer IMMER in diesem Container!) + dadurch werden die Namen in der ComboBox auch viel zu schnell viel
  zu lang.
- Der Setup Dialog erscheint nun Standardmäßig links oben anstatt zentriert was oft störend war + machte ihn etwas breiter
- Neuer Scene Node Modifier: SNMPhysicsCorrectDistance: Verwendet einen Physik-Sensor um zu prüfen ob zwischen zwei Objekten
  ein Hinterniss ist und korrigiert die Position wenn nötig



>> 14.04.2007
[CO]
PLSceneViewer:
- Der Frame wird nun in einem Window-Handler gespeichert damit das auch noch funktioniert wenn man z.B. während dem Laden
  einer Szene das Fenster einfach schließt



>> 13.04.2007
[CO]
- Einige 'return' und '#include' entfernt
- 'using namespace'-Änderungen



>> 07.04.2007
[CO]
- PLSampleCharacterAnimation: Nahm die 'Look At'-Dinge heraus da diese nicht wirklich funktionierten und das Beispiel etwas
  Chaotisch machten. Wie man 'Look At' für z.B. den Kopf eines Characters über Scene Node Modifier realisieren kann, kann
  man nun in 'SceneNodeModifiers.scene' sehen.



>> 05.04.2007
[CO]
Neue Beispiel Szene:
- TerrainWater.scene: Zeigt Shader-Wasser + die Implementation ist in PLSampleSceneNodes einsehbar. Das ist der Code aus
  dem alten PLPlayground Demo - nur an die aktuelle PL Version angepasst + SCRenderToTexture übernimmt nun das Rendern
  der Reflection & Refraction Texturen.



>> 24.03.2007
[CO]
- Textur Kompression bei den Ladebildschirm-Bildern deaktiviert damit das Einladen schneller geht und die Qualität etwas
  besser ist + skalierung für diese Bilder ebenfalls deaktiviert so das diese immer die original Auflösung haben.
- PLSceneViewer Bugfix: In SetupDialog::OnShow() wird nun der aktuelle aktive Post Process Effekt gleich in der ComboBox
  ausgewählt



>> 09.03.2007
[CO]
Neues Beispiel: PLSampleChat:
Dies ist ein allererstes minimal Beispiel für PLNetwork das einen kleinen Chat realisiert. Das stammt komplett von Stefan,
hab 'nur' die Codes an PL angepasst. Das Beispiel lief sogar gleich beim allerersten anlauf korrekt - WOW, Stefan hat
wirklich super Arbeit geleistet. :D
Ganz nebenbei haben wir nun auch endlich mal ein Beispiel mit OS-Konsole drinnen was ich gut finde da man dadurch u.a. sieht
das man wirklich 'nur' PLMain nutzen muss und das dann keinen Unterschied mehr macht.



>> 06.03.2007
[CO]
PLSceneViewer:
- Drag'n'Drop Support hinzugefügt
- Ingame Popup Menü heraus genommen und durch einen kleinen (noch nicht sonderlich schicken) Dialog ersetzt



>> 02.03.2007
[CO]
PLSceneViewer:
- Gibt über SetBaseDirPriority() dem Pfad in dem die aktuelle zu Ladende Szene liegt die höchste Priorität



>> 01.03.2007
[CO]
Alle Beispiele:
- Ging die Codes nochmal durch und schaute wo man noch etwas vereinfachen/übersichtlicher machen konnte
PLSceneViewer:
- Während dem Laden wird das Ingame-Gui nun ausgeblendet, so stört das z.B. nicht mehr bei Ladebildschirmen



>> 26.02.2007
[CO]
- Verschob die Shader AmbientEmissive.cg, SimpleLighting.cg, Lighting.cg, Volumetric.cg, LightShafts.cg, Distance.cg und
  EarlyOut.cg welche vom Szene Renderer 'SRShaderLighting' benötigt werden in Standard.pak welches im 'Runtime/Data'-Ordner
  liegt. Während der Hauptenwicklung dieser Shader war es recht praktisch diese bei den Beispielen liegen zu haben, da sich
  nun an diesen Shadern aber erstmal weniger Ändern wird, sind diese in 'Standard.pak' sauber verstaut. :)



>> 20.02.2007
[CO]
- SNInfoText::DrawPost(): Der Cull Query wurde nicht korrekt ermittelt
- "MiniDungeon.scene" einen Ladebildschirm verpasst da es doch ein wenig länger dauert



>> 11.02.2007
[CO]
- Auf VC 2005 umgestellt



>> 02.02.2007
[CO]
- PLSceneViewer: Erscheint beim start der Datei-Dialog, so wird das Hauptfenster solange 'unsichtbar' gemacht
- Bugfix: PLSamplePPLandHDR: Die Hintergrund-Farbe des InGame-Guis wurde auf Weis (??) anstatt auf Transparent gesetzt,
  darum sah man in diesem Beispiel derzeit immer nur Weis :)



>> 28.01.2007
[CO]
- VC Projekt-Dateien wie besprochen in die jeweiligen Grundordner verschoben



>> 27.01.2007
[SB]
- CMake Projektdateien für alle PLSamples-Projekte hinzugefügt 



>> 25.01.2007
[CO]
- Etwas an den Physik Beispiel Szenen gefeilt: Die meisten Physik Objekte sind nun beim start Eingefrohren, aber so platziert
  das dies nicht auffällt. *nicht in der Luft häng*



>> 08.11.2006
[CO]
- SNSelection: 'trace line' und 'selection planes' arbeiten nun Polygon genau



>> 04.11.2006
[CO]
- Neue Szene: ReflectionCubeMap.scene: Zeigt wie man eine Reflection Cube Map nutzen kann. Mithilfe des eingeblendeten
  Koordinaten Systems kann man auch einfach überprüfen ob die Cube Map an sich korrekt ist.



>> 03.11.2006
[CO]
- "Tree.skin" hinzugefügt damit man sehen kann wie man über ein Skin Mesh Materialien 'auswechseln' kann



>> 28.10.2006
[CO]
- Neue Szene: PhysicsFirstPersonController.scene: Zeigt wie man mithilfe des neuen Scene Node Modifiers 'SNMMouseLookController'
  eine 'First Person'-Steuerung realisieren kann.



>> 21.10.2006
[CO]
- Beispiel Cube Maps hinzugefügt damit man sehen kann wie die Maps angeordnet sein müssen



>> 13.10.2006
[CO]
- Alle Beispiele: PLMain gibt 0 zurück wenn es keine Fehler gab



>> 08.10.2006
[CO]
- Neue Szene: PhysicsJoints.scene: Zeigt Physik Verbindungen, noch ist da nicht soo viel zu sehen - werde das Schritt für
  Schritt erweitern



>> 07.10.2006
[CO]
- Neue Szene: PhysicsMouseInteraction.scene: Zeigt wie man mit hilfe der Maus Physik Objekt 'anfassen' kann. Nicht wundern
  wenn das Ragoll hin und wieder 'verschwindet' - die Bounding Box dieser Scene Node muss ich noch verbessern.



>> 25.09.2006
[CO]
- Projekte auf PLBool umgestellt



>> 22.09.2006
[CO]
- SceneViewer: Um Post Processing Einstellungen erweitert - ist jedoch leider noch nicht wirklich optimal da das Gui-Menü
  bei zuvielen Einträgen nicht automatisch das noch handhabbar macht. :(



>> 20.09.2006
[CO]
- Neue Szene: PhysicsPlayground.scene: Fast genau das was bisher im PLPlayground Demo war - mittlerweile kann man das recht
  einfach komplett über das Szene Format machen... und da nur *sehr* wenig an zusätzlichen Daten dazukamen, aber man mal
  eine großere Szene mit Physik sehen kann ist diese Szene denk ich fürs SDK ganz ok.



>> 16.09.2006
[CO]
- Neue Beispiel-Szene: BitmapsAndBillboards.scene: Zeigt Bitmap und Billboard Scene Nodes



>> 14.09.2006
[CO]
- Beseitige Warnungen die erscheinen wenn der Compiler auf Warnungs-Level 4 gestellt wird



>> 03.09.2006
[CO]
- PLSamplePostProcess: Baute ein paar Sicherheitsabfragen ein so das es keinen Crash gibt falls mal keine entsprechenden
  Effekte gefunden werden.



>> 24.08.2006
[CO]
- DispersionTeapot.scene in DispersionBubbles.scene umbenannt... dort sieht man nun Metabälle anstatt eines Teapots, das
  kommt so gleich viel cooler rüber. :) *Seifenblasen*
- Stellte bei den Beispiel-Szenen wo es Sinnig ist auf eine 'Orbiter'-Kamera um. Dieses ist leichter zu bedienen und vorallem
  Grafiker Orbiten gerne. :)



>> 09.08.2006
[CO]
- Neue Beispiel Szene: PhysicsManiacMarble.scene: Zeigt wie man KOMPLETT über das Szene Format einen kleinen Marble Madness
  Klon schreiben kann ohne auch nur eine Zeile in c++ Programmiert zu haben. :)



>> 07.08.2006
[CO]
- PLSampleContainer in PLSampleSceneViewer umbenannt



>> 29.07.2006
[CO]
- PLSamplePhysics & PLSampleRagdoll: Den Beispielen kann man als Parameter die zu verwendende Physik API übergeben. Gerade
  im Debug Modus ist das sehr hilfreich da man dann nicht immer über das Gui die Physik API auswählen MUSS. Statt
  'SNVolumetricLine' wird nun 'SNLine' verwendet da dies keinen Shader benötigt und daher wirklich überall laufen müsste. Als
  ich das einbaute gabs 'SNLine' noch nicht.
- PhysicsCharacterController.scene: 'Stehaufmännchen'-Statur hinzugefügt welche das neue 'Relativ Center Of Mass' verwendet damit
  die Statur sich wieder 'aufstellt' + ein Bällschen in die Szene geworfen damit unser Soldat was zum herumkicken hat. *g
- PLSample2DGame: SNBomb & SNGun: Diese zwei Nodes verwenden 'animierte Texturen' wobei einfach der zu verwendende Textur Ausschnitt
  verschoben wird - so wie das bei den guten alten 2D Animationen üblich ist. Der verwendeten Bitmap Funktion wurden jedoch
  nicht normalisierte Texture Koordinaten übergeben und erst bevor es dem Renderer übergeben wurde, wurden diese Koordinaten
  mithilfe der ausgelesenen Textur größe automatisch normalisiert... was jedoch Fatal war wenn die Rectangle Texturen von PL
  automatisch skaliert wurden, (weil die GPU es z.B. einfach nicht anderst mag) und nun sogar eventuell nur noch ganz einfache
  2D Texturen sind, dann stimmen natürlich die 'Texel' Werte nicht mehr und die Animation folglich ebenfalls nicht mehr. Hier
  muss man also als Coder ganz genau wissen wie groß die Bitmap im Original ist um dann selbst per Hand zu normalisieren.
  Will man 'richtige' 2D Games mit solchen Animationen machen, muss man sich selbst ein kleines Textur Animationssystem für
  sein Game schreiben, ist ja keine große Sache - und in diesem kleinen Beispiel wird das an 2 Stellen 'per Hand' gemacht.
  Wirklich gut das ich dieses kleine 'Gag-Beispiel' hinzugefügt habe, denn diese Themaik ist nicht ganz ohne - vorallem wenn man
  Rectangle Texturen nutzen will damit die Bildqualität stimmt. :) (hehe, jaja, ich weis, von Bildqualität kann man hier nicht
  wirklich sprechen, aber wenigstens isses buuunnt *g*)
  Codes noch etwas aufgepeppt.



>> 25.07.2006
[CO]
- PLSample2DGame: Nahm die Funktion Application::DrawBitmap() welche automatisch die Textur größe als Bitmap größe nahm
  heraus - denn Falls die Textur größe mal skaliert werden musste weil z.B. die Hardware keine Rectangle Texturen kann, wurde
  der 'Hintergrund' zu klein Dargestellt.



>> 24.07.2006
[CO]
- Neue Beispiel Szene PhysicsCharacterController.scene: Zeigt den neuen Physics Character Controller in Aktion.



>> 18.07.2006
[CO]
- PLSampleContainer: GuiContainer: Wird Informiert wenn der Class Inspector geschlossen wird so das der Zeiger darauf
  korrekt zurückgesetzt wird. Wurde eine 'Start Kamera' in der Szene Definiert, wurde nicht geprüft ob es die Kamera auch
  wirklich gibt.



>> 09.07.2006
[CO]
- LoadScreen.scene geht wieder, ersetzte die Lade Bildchen durch neuere



>> 08.07.2006
[CO]
- Noch ein paar Beispiel-Szenen hinzugefügt welche zeigen was bei Kameras im zusammenspiel mit Scene Node Modifier möglich ist



>> 06.07.2006
[CO]
- PLSampleContainer: Über das Ingame-Gui kann man nun auch die gerade aktive Kamera auswählen - gerade in der Dungeon Szene
  in der es mehrere Kameras gibt ist das sseeehr praktisch. :)
  Über SNKeyValue mit dem Schlüssel 'StartCamera' lässt sich die Kamera auswählen die nach dem laden die aktuelle sein soll -
  woha, wunderbar wie das nun mit SNKeyValue von der Hand geht. Das wollte ich schon sehr lange mal sauber machen, wusste
  aber einfach nicht wie. :)



>> 23.06.2006
[CO]
- 'ProjectiveVideo.scene' angepasst, nahm 'pl_logo.avi' erstmal heraus und ersetzte es durch ein anderes Video da die Avi
  Datei von Jens irgendwie nicht abgespielt werden kann. Da muss Jens später mal nen avi in einem anderem Format machen.



>> 17.06.2006
[CO]
- PLSamplePNTriangles an Material & Effekt Änderungen angepasst



>> 12.06.2006
[CO]
- In der 'Main.cpp' aller Beispiele DEFINE_MODULE eingefügt damit eventuelle RTTI Klassen in einem korrekt benannten Modul
  landen und nicht in einem weiterem 'Unknown'-Modul.



>> 01.06.2006
[CO]
- NormalMapping.scene: Durch die Änderungen in den Renderer Shadern ist es nun Problemlos möglich das 'richtige' Szene Lichter
  auch in den Shadern verwendet werden. Daher erweiterte ich diese Beispiel Szene entsprechend.
- PLSamplePhysics & PLSampleRagdoll um eine 'Linie' erweitert welche eingeblendet wird wenn eine Kraft auf das Physik Objekt
  einwirkt - so sieht man wohin die Reise gehen soll. ;-)
- PLSampleSound: Etwas an den Einstellungen gedreht damit das Beispiel etwas besser aussieht



>> 30.05.2006
[CO]
- Neue Szene: NormalMapping.scene: Zeigt einfach 'nur' Soldaten der Normal Mapping verwendet
- Wie versprochen ein kleines Ragdoll Beispielprogramm Namens 'PLSampleRagdoll' hinzugefügt. Der Code ist fast identisch
  mit dem von PLSamplePhysics, nur das anstelle einer kleinen billigen Kiste ein cooles Ragdoll in die Szene geworfen wird.
  Läuft bis jetzt nur mit dem Newton Physik Plugin brauchbar.



>> 26.05.2006
[CO]
- PLSampleScene: Musste bei Application::LoadScene() dem einzutragenden Basispfad "Data/Scenes/UrbanScenes.zip"
  noch das aktuelle Verzeichniss anhängen damit es funktionierte. Hm, könnte schwören das ging früher auch so - also das
  das FS automatisch das aktuelle Verzeichniss anhängte bzw. verwendete.



>> 25.05.2006
[CO]
- PLSampleSceneNodes: SNOcclusionQuery & SNSelection: Große Bounding Boxes gesetzt damit diese Nodes möglichst immer sichtbar
  sind.
- PLSampleCharacterAnimation & PLSampleSound: Da man nun im Szene Debug Dialog recht komfortabel auch die Scene Node Modifier
  einstellen kann, war es ein leichtes den Helm des Soldaten wieder korrekt auszurichten. :)



>> 22.05.2006
[CO]
- Überall auf String Klasse umgestellt + Bugfixing



>> 21.05.2006
[SB]
- Projekte an FS-Änderungen angepaßt



>> 19.05.2006
[CO]
- Materials.scene: Um eine Kiste erweitert welche die Textur 'MipmapTest.dds' verwendet. In dieser Textur hat jede Mipmap
  eine andere Farbe so das man sehr schön sehen kann wie die GPU jeweils die Mipmaps wählt und Filtert... das gibt je nach
  Situation eine lustig bunte Kiste.



>> 17.05.2006
[CO]
- PLSampleSound: Hier stapft nun der Soldat tapfer durch den Regen, nun weis man wenigstens WOHER das Schrittgeräucht kommt :)



>> 16.05.2006
[CO]
- An PLGeneral Änderungen angepaßt



>> 14.05.2006
[SB]
- An PLGeneral Änderungen angepaßt



>> 11.05.2006
[SB]
- An PLGeneral Änderungen angepaßt (GetClasses())



>> 11.05.2006
[CO]
- PLSamplePhysics so erweitert das man Kräfte auf die kleine Kiste anwenden kann



>> 10.05.2006
[CO]
- PLSamplePhysics an PLPhysics angepasst



>> 01.05.2006
[CO]
- Nahm das Beispiel PLSampleNewtonCharacterController heraus da es mittlerweile durch die größe ungeeignet ist als Beispiel
  im SDK. Dieses Programm ist nun ein eigenständiges Projekt mit dem Namen 'PLPlayground'.
- Nahm die Comic-Szenen heraus. Diese werden nun in einem eigenständigen Comic-Demo verwendet. (CartoonDemo)



>> 26.04.2006
[CO]
- PLSampleContainer:
  - Übergibt man dem Programm als Parameter einen Dateinamen, so wird diese Scene sofort geladen... so kann
     man also Vernküpfungen anlegen und sofort die aktuelle Scene an der man Arbeitet einladen lassen.
  - Verbesserte das erzeugen von Screenshots.
  - Da dieses Beispiel mittlerweile recht wichtig ist da es u.a. auch als einfacher Scene Viewer verwendet werden kann
    spendierte ich dem Programm noch ein Popup Menü in dem man u.a. eine andere Szene einladen kann.
  - Während dem Laden einer Szene wird automatisch ein entsprechender Basis Pfad dem FS hinzugefügt so das die Daten gefunden
    werden wenn die Verzeichnissstruktur in der die zu ladende Szene liegt stimmt. Nach dem Laden wird dieser Pfad wieder
    entfernt. Somit kann mal also Szenen beqeuem einladen auch wenn der Basis Pfad nicht per Hand eingetragen wurde.



>> 25.04.2006
[CO]
- PLSampleContainer verwendet nun SQEnumerate um eine Kamera zu finden die zur Darstellung verwendet wird. PLSampleSimpleScene
  um die Tests erleichtert - 'proc' Dateien lassen sich mittlerweile problemlos in PLSampleContainer wie 'PL'-Scenen einladen.
  Hab vorhin mal diverse Doom 3 Maps direkt aus dem Spiel eingeladen und diese liesen sich bereits erstaunlich problemlos
  Darstellen. (natürlich nur die Szene Geometry etc. an sich, also keine Texturen, Beleuchtung etc. :)



>> 22.04.2006
[CO]
- PLSampleNewtonCharacterController & PLSampleScene an die Änderungen des Sichtbarkeits-Systems angepasst



>> 14.04.2006
[CO]
- PLSampleSimpleScene mißbrauche ich nun erstmal um die ersten Schritte der Portal System Implementierung zu machen. Sobald
  das einigermaßen Funktioniert und wie auch eine eigene brauchbare Szene habe werd ich das wieder bei diesem Beispiel
  herausnehmen. Optimal wäre es, wenn man am Ende einfach nur MiniDungeon.scene über den PLSampleContainer starten könnte
  und eine eigene Szene mit Portalen etc. gleich sauber Dargestellt wird. Bin mal gespannt ob wir von den Grafikern eine
  entsprechende Szene bekommen haben wenn das Szene System soweit fitt ist. ;-)



>> 12.04.2006
[CO]
- Fügte dort wo angebracht noch geschützte Konstruktoren & Destruktoren ein



>> 10.04.2006
[CO]
- PLSampleNewtonCharacterController: An die Szene System Änderungen angepasst



>> 06.04.2006
[CO]
- PLSampleScene: Zeigt jetzt auch wie viel Prozent der Hierarchy & Scene Nodes gerade verwendet werden.



>> 05.04.2006
[CO]
- Arbeitete an PLSampleScene weiter.



>> 03.04.2006
[CO]
- PLSampleScene: Verwendet nun eine halbwechs brauchbare Szene um das Szene System inklusive Sichtbarkeitsbestimmung & 
  Rendern der Szene zu Demonstrieren. Hab diese Szene gleich in verschiedenen größen beigelegt, allerdings ist das erzeugen 
  von Scene Nodes derzeit leider noch recht langsam so das das einladen größerer Szenen eine halbe Ewigkeit dauert. :(
  Da diese Szene Dateien auch extrem groß werden, hab ich diese gepackt abgelegt, Szene Dateien sind gepackt extrem viel 
  kleiner. Diese Stadt Szene fand ich im Netz und hab mir diese 'geborgt' da man damit sehr schön das Scene System an 
  seine Grenzen bringen kann, nur eine Hand voll mieser Modelle & Texturen, aber jeeede Menge Scene Nodes wie es sein muss. 
  Wenn Jens ne 'eigene' Stadt Szene macht, müssen wir schwer darauf achten das er es mit den Modellen & Texturen nicht 
  übertreibt, denn hier kommt es wirklich nur auf die Scene Nodes & Geometrien an... und wenn die Modelle & Texturen zu 
  aufwändig sind, so kann man das Scene System nicht mehr so gut testen/demonstrieren. Diese Szene könnte ich auch noch in 
  256x256 erzeugen, aber derzeit ist bereist 128x128 einfach zuviel und das erzeugen der Scene Nodes dauert dann unmenschlich 
  lange. :(
- Räumte die Codes etwas auf: Leerzeichen, Tabs, ein paar auskommentierte Codes entfernt, ein paar Klassen hatten noch 
  einen 'T'-Prefix



>> 29.03.2006
[CO]
- Neue Beispiel Szene: ZFighting.scene: Zeigt z-fighting + 2 Lösungen. Die eine davon ist der klassische Polygon Offset 
  wie ihn die API's anbieten, die zweite Lösung ist z bias was unser Renderer automatisch auf die Perspective Matrix 
  anwendet. Wenn immer möglich sollte man die letztere Lösung verwenden da diese API & GPU unabhäniger ist als der Polygon 
  Offset wo man nie genau die Ergebnisse voraussagen kann.



>> 28.03.2006
[CO]
- PLSampleRTT: Das Beispiel zeigt nun noch zusätzlich Vertex Streaming



>> 23.03.2006
[CO]
- PLSampleNewtonCharacterController: Da der Ragdoll Editor mittlerweile wirklich recht brauchbar ist, veränderte ich das 
  automatisch erzeugte Ragdoll des Soldaten per Hand noch etwas so das es u.a. weniger Physik Objekte hat. Dieses veränderte 
  Ragdoll liegt unter 'Data/Misc/Soldier.ragdoll' - jetzt ist die Ragdoll Simulation in diesem Newton Beispiel um einiges 
  flotter da es nicht mehr so viele Ragdoll Körper & Gelenke sind. :)



>> 21.03.2006
[CO]
- PLSampleNewtonCharacterController: Kann die Shader Variante des Wassers nicht Dargestellt werden, so wird nun eine recht 
  einfache Wasser Darstellung erzeugt - aber wenigstens sieht man in dem Fall nun auch noch was. In diesem Fallback Fall 
  werden auch keine Reflektionen & Refraktionen gerendert da diese sowieso nicht Visualisiert werden.
- Das Material des Soldaten hat nun ebenfalls so ein Fallback, geht die Shader Variante nicht, so wird einfach die normale 
  Diffuse Textur verwendet.
- Die Teapot Shader Materialien um Fallbacks erweitert, TeapotCube.mat braucht nun überhaupt keinen Shader mehr sondern 
  macht das nun einfach über die automatische Textur Generation 'reflection map' die nun endlich sauber geht. Da musste ich 
  im OpenGL Renderer noch die Textur Matrix automatisch mit der inversen der View Matrix füttern.
- Ein paar Sky-Boxes korrigiert so das die Namensgebung einheitlich ist
- Soldier.mesh hat nun passendere Vertex Normalen & Tangent Space Vektoren



>> 20.03.2006
[CO]
- Erweiterte die Beispiel Szene 'SceneNodeModifiers.scene' um Anker-Modifier... einem der Teapots wächst nun vorne Grünzeug 
  heraus + versprüht Partikel.
- PLSampleCharacterAnimation: Augen & Helm werden nun noch angehängt. Die Hauptfigur hat desweiteren noch einen Partikel 
  Effekt 'in' der rechten Hand.
- PLSampleNewtonCharacterController: Augen & Helm an Soldat angehängt



>> 19.03.2006
[CO]
- PLSampleNewtonCharacterController: Der Held blinzelt nun, und wenn man mit der Kamera nah ans Gesicht geht, wird man 
  dämlich angegrinst. (DAS musste einfach sein :)
  Natürlich nicht sehr schön Implementiert, aber das ganze Beispiel wird ja bei Zeiten komplett zum eigenständigen Demo 
  umgebaut.



>> 18.03.2006
[CO]
- PLSampleNewtonCharacterController: Der Character ist nun Animiert



>> 17.03.2006
[CO]
- Nahm PLSampleODECharacterController heraus da total unfertig, und es wird wohl auch nie in der art fertig werden. :)
- Nahm 'TalkingFace.mesh', 'Troll.mesh' und 'man.mesh' + dazugehörige Texturen aus dem SDK da nun durch den PL Character 
  ersetzt



>> 16.03.2006
[CO]
- Neue Beispiel Scenen: Terrain.scene, AutomaticTextures.scene, Materials.scene
- Verband PLSampleSkeletonAnimation und PLSampleTalkingFace zu einem Beispiel Namens PLSampleCharacterAnimation. Diese 
  beiden Beispiele waren sowieso fast Identisch und nun mit Jens neuem PL Character kann man das auch alles schön zusammen 
  in einem Beispiel zeigen.



>> 13.03.2006
[SW]
- Linux build-system für die Samples Triangle,Teapot,RTT und InGameGui hinzugefügt.
  Die Samples RTT und InGameGui laufen unter linux nicht(nur schwarzes Fenster und absturz beim beeenden)
  da RenderToTextur mit pBuffer nicht mehr funktioniert.



>> 11.03.2006
[CO]
- Passte diverse initial Kamera Rotationen an so das die Kameras wieder beim start korrekt ausgerichtet sind. Dort wo 
  möglich sitzt die Kamera im Ursprung und schaut nach -z... so wie es beim 'Rechte Hand'-System Standard ist. :)



>> 06.03.2006
[CO]
- PLSampleNewtonCharacterController: Die Kameras lassen sich nun wieder besser steuern, die First Person Kamera wird nun 
  korrekt platziert.



>> 04.03.2006
[CO]
- PLSampleNewtonCharacterController: Third Person Kamera funktioniert nun besser - auch ist diese Kamera nun ein Physik 
  Objekt, weicht also Wänden etc. automatisch aus. :)



>> 02.03.2006
[CO]
- Alles an Renderer Änderungen angepasst
- Dort wo möglich werden nun die statischen Objekte von z.B. Quaternion verwendet statt neue Temporäre Objekte zu erzeugen



>> 25.02.2006
[CO]
- Alles an Quaternion Änderungen angepasst



>> 25.02.2006
[SB]
- Alles an PLGeneral Änderungen angepasst



>> 24.02.2006
[CO]
- Alles an PLGui Änderungen angepasst



>> 23.02.2006
[CO]
- Alles an PLGeneral Änderungen angepasst



>> 22.02.2006
[CO]
- Alles an Haupt-Header Änderungen angepasst
- Alles an PLMath Änderungen angepasst



>> 21.02.2006
[CO]
- Alles an aktuelle PLMath Änderungen angepasst (ein paar Dinge sind noch nicht ganz ok)



>> 10.02.2006
[CO]
- Alles an Stack & PLMath Änderungen angepasst



>> 06.02.2006
[CO]
- Alles auf String::Format() umgestellt + dort wo möglich von %f auf %g umgestellt da dadurch nur das nötigste ausgegeben wird



>> 28.01.2006
[CO]
- Alles an PLMesh & PLEngine Änderungen angepasst



>> 26.01.2006
[CO]
- Alles an PLSound & PLRenderer Änderungen angepasst



>> 23.01.2006
[CO]
- An uint32 Änderungen angepasst



>> 20.01.1006
[CO]
- Alles an PLMath & PLGui Änderungen angepasst



>> 18.01.2006
[CO]
- Alles an PLGeneral Änderungen angepasst



>> 05.01.2006
[CO]
- Neue Beispiel Scene: 'CartoonTeapot': Diese Scene hat einen Teapot mit Cel-Shading & Silhouetten so das er Comic mäßig 
  aussieht.
- Neue Beispiel Scene: 'SceneNodeModifiers' zeigt einige Anwendungen von Scene Node Modifiers wie z.B. automatisch 
  rotierende Nodes, auf Pfaden herumwandernde Nodes etc. + natürlich Nodes mit mehreren Modifiern. ;-)



>> 04.01.2006
[CO]
- Neue Beispiel Scene: 'AutomaticMeshs' zeigt diverse automatisch erzeugte Meshs (PLTMeshCreator)



>> 01.01.2006
[CO]
- Neue Beispiel Scene: 'RenderToCubeTexture.scene' zeigt wie man in Cube Texturen Rendern kann - in dem Fall für 
  realistische Dynamische Reflektionen.



>> 22.12.2005
[CO]
- PLSampleNewtonCharacterController: Beim erzeugen der Scene kann man nun bestimmen wieviel 'Detail' die Scene haben soll - 
  vorallem zum Debuggen ist es sehr praktisch z.B. nur eine grundliegenste Scene zu haben. Desweiteren ist nun auch die 
  'Third Person'-Kamera implementiert - das war erstaunlich einfach und auch der wechsel von Statischer Kamera zu Third 
  Person ist automatisch 'wech' was ziemlich cool rüberkommt - jetzt haben wir im Prinzip alle gängigen Kamera-Modi in 
  diesem Beispiel. :)



>> 19.12.2005
[CO]
- Neue Beispiel Scene 'Fur.scene': Zeigt wie man Objekte mit 'Fell' Darstellen lassen kann.
- PLSampleNewtonCharacterController: Fügte ein 'Fell Objekt' und einen Partikel Effekt hinzu, jetzt sind auch zwei Nodes 
  mit Transparenten Dingen in dieser Scene.



>> 13.12.2005
[CO]
- PLSampleInGameGui: Hier gibts nun ein 'richtiges Ingame Gui'. Über einen Monitor in der Scene kann man ein paar Dinge 
  Einstellen - irgendwie ist das verdammt cool... und das einzige was man hier als User selbst machen muss ist der 
  Steuerungswechsel ins Gui und zurück - der Rest ist 'for free'. :)
  Um dieses 'Monitor Gui' die zu bedienen muss man etwas näher an den Monitor gehen und mit der linken Maustaste auf diesen 
  klicken. Um dieses Gui wieder zu verlassen, einfach ohne eine Maustaste gedrück zu halten mit der Maus 'aus dem Gui gehen'.



>> 12.12.2005
[CO]
- PLSampleSimpleScene: Hat nun einen 'Reflektierenden' Boden + die Statur wirft einen Schatten.



>> 09.12.2005
[CO]
- PLSampleSceneNodes: Ersetzte die Scene Node 'SNMovingLight' durch den Scene Node Modifier 'SNMPosition' da universeller
- Neue Beispiel-Scene 'RenderToTexture.scene' welche zeigt wie man Teile der Scene in eine Textur Rendern lassen kann. 
  Die Kamera wird dabei über den Scene Node Modifier 'SNMPosition' etwas bewegt so das besser rüberkommt das dies die 
  gleiche Scene ist - nur von einer anderen Kamera aus dargestellt.



>> 08.12.2005
[CO]
- Neue Beispiel-Scene mit einem Spiegel hinzugefügt (Mirror.scene)
- PLSampleSimpleScene: Im Code ein Beispiel hinzugefügt wie man mit Scene Nodes und deren Namen herum jonglieren kann



>> 07.12.2005
[CO]
- PLSampleNewtonCharacterController: Da bei Jens die Physik Simulation sofort bei Start 'explodierte', schlafen nun 
  automatisch alle Physik Objekte bei start so das man diese per Hand erst aktivieren muss wenn diese sofort bei start 
  aktiv sein sollen.
- Passte die Beispiele an die kleine Ingame Gui Umstellung an.



>> 05.12.2005
[CO]
- Passte alle Beispiele an die Scene Renderer Änderungen an.



>> 03.12.2005
[CO]
- PLSampleNewtonCharacterController: Um Statische Kameras erweitert welche auf Wunsch den 'Helden' automatisch nachschaun 
  können... dadurch wirkt das Beispiel nun schon fast wie ein Rennspiel! ;-)



>> 02.12.2005
[CO]
- PLSampleNewtonCharacterController: Das Wasser führt nun einen Occlusion Query aus um zu prüfen ob es gerade Sichtbar ist 
  oder nicht - da die Scene beim Wasser nochmal 2 mal gerendert werden muss, kann dieser kleine Test die Performance oft 
  krass verbessern. :)
  Desweiteren werden die meisten Scene Nodes ab einer bestimmten Entfernung zur Kamera nicht mehr gezeichnet - das fällt 
  zwar auf, verbessert aber die Performance bei 'Weitsicht' deutlich.



>> 30.11.2005
[CO]
- Erweiterte PLNewtonCharacterController um Terrain und Wasser - mittlerweile benötigt dieses Beispiel einen eigenen 
  Scene Renderer... anhand des mehrmaligen Renderns der Scene für die Wasser Reflektionen & Refractionen merkte ich das ich 
  am Scene (+Render) System noch ein paar kleinigkeiten Ändern müsste, daher ist der Code hier noch nicht ganz sauber.



>> 15.11.2005
[CO]
- Neue Test Scene: ProjectiveVideo.scene: Zeigt die Verwendung von Video Texturen



>> 14.11.2005
[CO]
- Neues Beispiel: PLSample2DGame: Zeigt wie man mit PixelLight 2D Spielchen machen kann. :)



>> 06.11.2005
[CO]
- PLSampleTalkingFace: Minimal erweitert
- Neues Beispiel: PLSampleSkeletonAnimation: Dieses Basiert auf PLSampleTalkingFace, soll aber NUR Skeleton Animationen 
  zeigen wie auch Dynamisch Manipulierte Joints um z.B. einen Körper wie damals bei Second Evolution hoch/runter sehen zu 
  lassen. (das waren damals in SE soweit ich mich erinnere extra vordefinierte Skeleton Animationen).
  Desweiteren kann man den Kopf automatisch in die Kamera Blicken lassen... was schon ganz brauchbar funktioniert. :)
  Momentan verwende ich den Troll aus dem HDR Test wobei dieser mit 'einfachem' BumpMapping gerendert wird, also nur ein 
  Material mit Vertex&Fragment Shader... ohne komplexes System um mehrere Dynamische Lichtquellen etc. darauf anzuwenden... 
  das ist hier völlig überflüssig. (und später für große Außenszenen so sicherlich auch besser...)
  Baute desweiteren die Möglichkeit ein weitere Animierte Objekte in die Scene einzufügen um die Performance bei mehreren 
  Animierten Objekten testen zu können.
  Das aktuelle Troll-Modell (fand ich im Internet :) ist leider total mies geskinned worden so das überall bei Animationen 
  fehler Sichtbar sind, hab zwar noch ein paar andere Modelle von Jens die ich verwenden könnte... aber da warte ich lieber 
  bis der Oger fertig ist, dann haben wir gleich nen so richtig fettes Modell drinen. :)



>> 31.10.2005
[CO]
- Neues Beispiel: PLSamplePPLandHDR: Zeigt Per Pixel Lighting und Hight Dynamic Range Rendering... Programmier-technisch 
  findet man in diesem Beispiel nichts neues - jedoch sieht es nett aus. ;-)
  Verwendet werden momentan die Daten aus der Mini Dungeon Test Scene... wenn einer der Grafiker mal Zeit findet, so kann 
  er ja eine neue & schickere kleine Scene erstellen so das man bei den Beispielen auch etwas Grafisch so richtig nettes hat.



>> 29.09.2005
[CO]
- Die ganz einfachen Physik Beispiele PLSampleNewton & PLSampleODE wurden entfernt und dafür ein universelles einfaches 
  Physik Beispiel Namens PLSamplePhysics hinzugefügt. Bei diesem Beispiel kann man sich zu beginn eine Physik API aussuchen 
  die verwendet werden soll. Intern werden dann die entsprechenden Klassen Namen automatisch zusammengestellt.
- Neues 'Beispiel': PLSampleSetup, eher ein kleines Setup Tool für die Beispiele als selbst ein Beispiel. Dort kann man z.B. 
  bequem den Renderer auswählen ohne selbst per Hand in Text Dateien herum hantieren zu müssen.



>> 13.09.2005
[CO]
- Fügte Scene 'Sky.scene' hinzu damit man sehen kann wie das mit der Sky Scene Node funktioniert



>> 03.09.2005
[CO]
- PLSampleNewtonCharacterController: Die Scene hat nun standardmäßig Schatten damit man die Positionen der Objekte besser 
  erkennen kann



>> 23.08.2005
[CO]
- Additional Lib & Include Pfade wie diese vom PL SDK benötigt werden hinzugefügt so das man die Beispiele auch im SDK 
  direkt Übersetzen kann.



>> 21.08.2005
[CO]
- Neues Beispiel: PLSampleODECharacterController: ODE Version von PLSampleNewtonCharacterController. Das Beispiel ist noch
  schwer in Arbeit und ein paar Dinge wie Convex Hull oder Ellipsoiden werden hier wohl nicht so ohne weiteres gehen da
  ODE diese Dinge Standardmäßig nicht hat.



>> 20.08.2005
[CO]
- PLSampleNewtonCharacterController: Um verschiedene Kamera Modi erweitert



>> 06.08.2005
[CO]
- PLSampleNewtonCharacterController: Um Steuerbaren Jeep erweitert



>> 04.08.2005
[CO]
- Neues Beispiel: (noch nicht komplett fertig)
  PLSampleNewtonCharacterController: Hier kann man sehen wie man mit Hilfe von Newton in PL Character Controller 
  implementieren kann. First und Third Person Steuerung + verschiedene Kamera Modi. Desweiteren kann man auch direkt
  mit der Maus Objekte anpacken und herumschupsen.



>> 02.08.2005
[CO]
Neue Beispiele:
- PLSampleTalkingFace: Zeigt wie man ein Sprechendes Gesicht erzeugen kann. Da das Ingame Gui noch ziemlich buggy ist lässt
                       sich der Dialog zum Steuern der Animationen noch nicht so bedienen wie man es gerne hätte. Das ist 
                       im Prinzip genau der Dialog aus dem ME. :)
- PLSampleSound: Demonstriert die Verwendung von PLSound - auch Timescale wird hier vorgeführt wobei beim verlangsamen
                 zustätzlich noch Motion Blur aktiviert wird um den Zeit verzerrungs Effekt noch etwas vorzuheben. Noch
                 kommt der 3D Effekt der Sounds irgendwie noch nicht wirklich rüber...



>> 01.08.2005
[CO]
- PLSamplePostProcess um Motion Blur via Accumulation Buffer erweitert



>> 31.07.2005
[CO]
- PLSamplePostProcess: So erweitert das ein paar besondere Effekt Einstellungen geändert werden können
- PLSampleNewton & PLSampleODE: Über eine spezielle Scene Node wird nun etwas Information auf dem Bildschirm angezeigt



>> 27.07.2005
[CO]
- Neue Beispiele:
  - PLSampleNewton: Zeigt wie man mit Hilfe des PL Newton Plugins & direkter Verwendung von Newton Funktionen Physik in die 
                    Szene bringen kann.
  - PLSampleODE: Zeigt wie man mit Hilfe des PL ODE Plugins & direkter Verwendung von ODE Funktionen Physik in die 
                 Szene bringen kann.



>> 26.07.2005
[CO]
- Erweiterte PLSampleSimpleScene um einen Scene Node Modifier der die Licht Farbe ändert



>> 20.07.2005
[CO]
- PLSampleRTT so erweitert das es nun in verschiedene Texturen gleichzeitig Rendert.



>> 15.06.2005
[CO]
- Benannte PLSampleEntities Projekt in PLSampleSceneNodes um. Die meisten Scene Nodes darin wie Load Screen sind nun
  Scene Container da es praktisch kleine als Scene Node realisierte Anwendungen sind. :)
- Passte das Selection-Beispiel an das neue Scene-System an.



>> 14.06.2005
[CO]
- Neues Beispiel: PLSamplePNTriangles: Zeigt u.a. wie man eigene Mesh Creator Plugins schreibt und wie PN triangles
  (TRUFORM) verwendet wird.



>> 02.06.2005
[CO]
- TApplication ist nun überall als Singleton Realisiert
- Neues Beispiel: PLSamplePostProcess: Zeig wie das mit dem Post Process Manager funktioniert



>> 01.06.2005
[CO]
Neue Beispiele:
- PLSampleInitExit: Das bis jetzt Primitivste Beispiel. Es Initialisiert nur die Engine, erzeugt einen Frame, 'wartet'
  darauf das dieser vom User geschlossen wird und beendet die Engine.
- PLSampleGui: Einfaches PLGui Beispiel
- PLSampleInGameGui: Zeig ein einfaches In-Game-Gui (wie könnte man es noch nennen? :) über das man ein paar Dinge der
  kleinen Szene ändern kann. Sieht momentan ohne Gui-Theme natürlich noch nicht sooooo schick aus.



>> 29.05.2005
[CO]
Neue Beispiele:
- PLSampleSimpleScene: Zeigt wie man mit nur ein paar Zeilen Code eine einfache Szene erzeugt.
- PLSampleScene: Demonstriert eine etwas größere Szene + wie man diverse Szene Relevante Dinge selbst per
                 Hand machen kann.



>> 19.05.2005
[CO]
Benannte PLSampleBasic in PLSampleContainer um - da dies quasi der Kontainer ist in dem die Entities aus
PLSampleEntities laufen.
Fügte neue Beispiel-Projekte hinzu:
- PLSampleTriangle: Es wird gezeigt wie man ein lustiges sich drehendes buntes Dreieck erzeugen kann
- PLSampleTeapot: Automatisches erzeugen eines Meshs + Beleuchtung
- PLSampleRTT: Demonstriert wie man in Texturen Rendert - verwendet die Codes der zwei vorherigen Beispiele.
- PLSampleMultiView: Verwendet 3 Frames, in zwei Frames laufen die Scenen aus den Triangle & Teapot Beispielen,
                     im Haupt-Frame werden drei Scenen unter verwendung verschiedener Viewports gezeigt.
... alles sssseeeehr grundliegende Dinge welche Zeigen wie man alles per Hand machen kann.



>> 30.03.2005
[CO]
- Beispiele wurden auf den neuen Kommentar-Style umgestellt.



>> 05.03.05
[CO]
Startete PLSample-Projekte neu. In PLSampleEntities liegen nun ein paar Beispiele welche früher in den PLTests lagen.
(Selection, Occlusion Query etc.) Derzeit ist noch die alte Test-Kamera drin welche überarbeitet werden muss. 
Desweiteren muss der Code bei Zeiten sicherlich noch genauer Beschrieben werden.
Mit dem Entity SELoadScreen kann man schön Lade-Bilschirme Demonstrieren und austesten.
Der 'Actual/Bin/PLSamples' Ordner wurde aktualisiert.



>> 27.11.03
[CO]
- In PLSample sind nun nur noch ganz einfache und kleine Beispiele dadurch wird das PL-SDK um einiges kleiner. Größere
  Beispiele welche schon als keine Demos durchgehen liegen nun in einem eigenen Projekt Namens PLDemos. Diese Demos sind
  meistens Tests welche aber auch 'vorzeigbar' sind - hat also nichts mit dem geplanten großen PL-Demo zu tun!! :)
  Zudem liegen diese Demos auch nicht dem SDK bei könnten aber auch seperat als 'fortgeschittene' Beispielprogramme 
  angeboten werden.



/*********************************************************\
 *  Einträge aus altem Diary, damals noch ohne genaue Datum angaben. (oben -> unten = neuer -> älter)
\*********************************************************/



[CO] SampeApplication auf neue Kamera-Klasse umgeschrieben
[CO] Beispielprogramm: Freie Kamera, Partikel Entity (rotierende und verzogene Partikel folgen :)
