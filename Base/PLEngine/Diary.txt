>> 01.01.2012
[CO]
- "EngineApplication::OnLoadProgress()": Made the method protected and virtual because derived classes may want to reuse it
- Added "EngineApplication::ConfigureGenericScene()" derived applications can use in order to create simple default scenes



>> 29.12.2011
[CO]
- "EngineApplication::OnCreateScene()": Minor change in the created default scene so one can see something at once



>> 18.12.2011
[CO]
- "SNMOrbitingController": Added same space mouse hack as in "SNMLookController::OnUpdate()" (currently I have to time to finally have a closer look into this)
- "SNMOrbitingController": The rotation axis were inverted, I'am not sure why. Rotating by using the mouse felt odd, rotating using a 3D mouse was confusing.
  I know that the rotation direction is something were everyone has another preference - but now it feels more consistent to e.g. "SNMLookController" and there's
  no manipulation of the device data within this modifier. Experiment: When using a 3D mouse to rotate a free camera around a point in the 3D scene and then,
  while keeping my hand position on the device, switching to an orbiter camera the movement will stay the same and not suddenly invert it's rotation direction.
  In Autodesk 3ds Max 2012 the rotation direction is also the same as now used, just checked it. I hope that are enough reasons for this change. :D
- "SNMOrbitingController": Zoom is now also working by using a 3D mouse (same hack as in "SNMLookController::OnUpdate()")
- "SNMOrbitingController": Pan is now also working by using a 3D mouse (same hack as in "SNMLookController::OnUpdate()")
- Added scene node modifier "SNMEgoOrbitingController" for restricted 3D orbiting. It's similar to "SNMEgoLookController", that's why I put
  "Ego" into the name. Maybe we find over the time a better name instead of "Ego", but "Limited", "Restricted" or "Euler" didn't sound right either. :/



>> 06.12.2011
[CO]
- "SNMEgoLookController": Limited the yaw (to huge values may cause problems, so, bring them into a well known interval)



>> 01.12.2011
[CO]
- Added scene node modifier "PLEngine::SNMEgoLookController" for restricted 3D look around
  (see PixelLight forum post http://dev.pixellight.org/forum/viewtopic.php?f=6&t=115)



>> 23.10.2011
[CO]
- The camcorder is now also using the loadable system



>> 08.10.2011
[CO]
- Bugfix: "Picking::MeshIntersection()": In case the start position of the intersection line is inside the scene node, we have to check whether or not the
  found collision point is in the correct direction



>> 13.09.2011
[CO]
- "EngineApplication": The clear color hint within scenes is working again



>> 19.08.2011
[CO]
- "MousePicking" is now using the frontend instead of PLGui directly. Of course, this means that this helper class just works with one single
  window via the frontend - but this way, it's generic and simple... and adding specialized custom solutions working with multiple windows or
  accessing features of a certain GUI directly shouldn't be a problem.



>> 13.08.2011
[CO]
- Moved "ScriptApplication::OnInit()" stuff into "ScriptApplication::OnStart()" and "ScriptApplication::OnDeInit()" stuff into "ScriptApplication::OnStop()"



>> 12.08.2011
[CO]
- "EngineApplication::OnStart()": In here, we skip "SceneApplication::OnStart()" to overwrite the initialization order. Input and tools initialization should come
  before scene were the mentioned stuff is already usefull in derived applications (but at the same time, input shouldn't be at the very bottom of the application hierarchy).



>> 04.08.2011
[CO]
- Moved "ModTrapMouse", "PreviewWidget", "RenderWidget", "RenderWindow" and "WindowConnection" from "PLEngine" into "PLFrontendPLGui"
- Moved input controller from RenderApplication into BasicSceneApplication. Now everything input releated within the application framework is gathered together
  within BasicSceneApplication instead of be scattered all over the application classes.
- Moved "RenderApplication" from "PLEngine" into "PLRenderer"
- Moved edit & console stuff from "SceneApplication" into "BasicSceneApplication"
- Moved "SceneApplication" from "PLEngine" into "PLScene"
- Now that the renderer application class is within the renderer component, the scene application class within the scene component... "BasicSceneApplication"
  tells me to name it "EngineApplication" because it's the primary application class within the engine component. :D (the scene application is just an extension)
- "EngineApplication" is now using the "AbstractLifecycle"-methods "OnResume()" and "OnPause()" in order to activate/deactivate it's input controller



>> 03.08.2011
[CO]
- SceneApplication: It's been over a year since PLGui2 was replaced through PLGui3 (the current PLGui) and since then, the previous debug dialog has gone and
  there was never time to write a new one. So, time to finally remove it completely from PLEngine. Such stuff like debug dialogs are the job of concrete frontends...
  PLFrontendQt already has several debug related widgets/dialogs...



>> 02.08.2011
[CO]
- Moved "SNGui" from "PLEngine" to "PLFrontendPLGui" because it's using PLGui



>> 29.07.2011
[CO]
- Started the roadmap-point (http://www.pixellight.org/site/index.php/page/Roadmap.html) "Make elements like ingame GUI, ingame console and load
  screens to compositing layers" by moving several classes from "PLScene" into "PLEngine"
  -> Moved "SNEngineInformation" from "PLScene" to "PLEngine"
  -> Moved "SNGui" from "PLScene" to "PLEngine"
  -> Moved "SNConsole", "SNConsoleBase" from "PLScene" to "PLEngine"
  -> Moved "SNLoadScreen", "SNLoadScreenBase" and "SNLoadScreenBase" from "PLScene" to "PLEngine"
  Years ago this was a nice idea to have only one universal scene graph which also deals with stuff like ingame GUI, load screens or even clearing the
  screen... but it has not really proven useful or easily usable to put also 2D-Layer stuff as well as render instructions into the scene graph.
  Years ago Stefan and I discussed a scene graph refactoring to enhance the 2D-Layer support - but this idea was never realized. Instead, over the time
  it became clear to me that this stuff is not really scene graph related, instead it's more like the "layer"-concept used e.g. in photo editing programs.
  The compositing system was born (although it's currently still named scene renderer). Using a scene graph for scene stuff, and the compositing system
  for layered/rendering stuff is just much easier to deal with and more intuitive - at least to me after trying for 10 years to wrap my head around how
  all the stuff can be combined. In my personal opinion, a decent GUI system is the better way to deal with 2D stuff like ingame-GUI, load screen and so
  on while the scene graph is for 3D or 2D scenes. But scenes, just data, no render instructions.
  Today, I finally had my last exam for this semester. Time to do some long time planned PixelLight refactoring to fix certain remaining issues. I'll do
  this refactoring as I always do refactoring - in small steps towards the goal instead of trying to perform a huge jump.
- Moved "SNPhysicsMouseInteraction" from PLPhysics into PLEngine (another refactoring on this problematic "scene node" will follow)
  -> As a side effect, PLEngine now depends on PLPhysics (see "Docs\Diagrams\PixelLight_PackageDiagram.png")
     ... but this is probably ok because within the PLEngine project, everything comes together... and maybe this special scene node will completely disappear
     in the feature... then this depencency can be removed again...
- Moved "SNMPhysicsCharacter" and "SNMPhysicsCharacterController" from PLPhysics into PLEngine
  -> This simple character controller, which is usually only useful for a quick'n'dirty test, isn't worth the dependency to a complete other project... it's really
     nothing one would want to use in a slightly more complex project (then, it's probably better to e.g. script the control)
- Moved "SNMCameraZoomController", "SNMLookController", "SNMMoveController" and "SNMOrbitingController" from "PLScene" to "PLEngine"
  -> I'am not sure whether or not the scene graph project is really the right place for input controllers. In my point of view, the scene graph stuff should be as
     passive as possible. Also, by moving all controllers into one PLEngine directory, one doesn't have to search for them across all projects. As for
     "SNMPhysicsCharacterController", I'am pretty sure that those controllers are more or less only useful for rapit prototyping or really simple projects. By e.g.
     using scripting one doesn't have the fixed build in limitations those standard controllers naturally have.



>> 19.06.2011
[CO]
- Moved the application component "Camcorder" (together with "SNMPositionKeyframeRecord" and "SNMRotationKeyframeRecord") from the dungeon demo into the
  tools directory of PLEngine. The camcorder is nothing that can only be used within the dungeon demo, recording and playing back something is more or less
  generic.



>> 19.06.2011
[CO]
- "SceneRendererTool": Renamed "GetPass()" into "GetPassByName()" and added "GetPassByIndex()" and "GetNumOfPasses()"



>> 16.06.2011
[CO]
- Now that it's supported by the RTTI, switched back the return type from "BasicSceneApplication::GetSceneRendererTool()" into a reference
  (had changed it a couple of days before into a pointer to be able to make some first experiments with scripts)



>> 14.06.2011
[CO]
- "ScriptApplication": Changed "DeInit()" into "OnDeInit()" to be consistent with "OnInit()". Unlike the other application classes, the
  script application is using the "On"-methods because the script to be executed is the actual application.
- "PLEngine::ScriptApplication" and "PLScriptBindings::SNMScript" have now both the script entry points "OnInit()", "OnUpdate()" and "OnDeInit()".
  The name of the optional script function called by C++ by one of these entry points is an RTTI atribute, meaning that e.g. a scipt can manipulate
  it's own entry points! Wow, the script-stuff is getting pretty flexible. *g*
- "BasicSceneApplication": "LoadScene()" is now virtual
- "BasicSceneApplication": Added signal "SignalSceneLoadingFinished" which is emitted after a scene has been loaded successfully
- "BasicSceneApplication::ScriptApplication": I had to add a few more parameters to the "script loading"-constructor in order to have a proper
  configurated application. Well, ok, there was no real need because writing e.g.
    ScriptApplication cScriptApplication;
    cScriptApplication.SetName("MyScriptApplication");
    cScriptApplication.SetTitle("My script application");
    cScriptApplication.SetAppDataSubdir(System::GetInstance()->GetDataDirName("MyDirectory"));
    return cScriptApplication.Run(sFilename, lstArguments);
  will work as well, but the single liner
    return ScriptApplication("Data/Scripts/PLDemoSimpleScene.lua").Run(sFilename, lstArguments);
  is just more impressive. *g*
- "BasicSceneApplication": Added signal "SignalCameraSet" which is emitted when a new camera has been set



>> 13.06.2011
[CO]
- "SceneRendererTool": Added "SetSceneRenderer()"
- Added "ScriptApplication", this class can load in and execute a given script out of the box



>> 05.06.2011
[CO]
- "SceneApplication": Exposed "GetRootScene()"-method to the RTTI
- "BasicSceneApplication": Exposed "GetScene()"-method and "SetScene()"-method to the RTTI
- Exposed "SceneRendererTool" and it's "SetPassAttribute()"-method to the RTTI
- "BasicSceneApplication": Exposed "GetSceneRendererTool()"-method to the RTTI (had to change the result from a reference
  into a pointer for this)



>> 08.05.2011
[CO]
- Added "ScriptBindingLog" which is intended to bind some stuff from "PLGeneral::Log" to scripts - but just like "ScriptBindingTiming"
  at the moment only experimental



>> 06.05.2011
[CO]
- Added "ScriptBindingTiming" which is intended to bind some stuff from "PLGeneral::Timing" to scripts
- Added "SNMScript", a scene node modifier which redirects the update event into a script



>> 22.03.2011
[CO]
- "PLEngine::RendererConfig": Changed "VSync" into "SwapInterval"
  -> The swap interval (vertical syncronisation) setting is now working (as long as it is not overwritten by the GPU driver)



>> 09.03.2011
[CO]
- BasicSceneApplication: Because there were some questions within the PL IRC chat room named #pixellight at the Efnet network
  (e.g. irc.prison.net, efnet.demon.co.uk, irc.inet.tele.dk, irc.isdnet.fr) why "GetSceneRendererTool()" is not working when
  used within the "OnCreateRootScene()" application-framework method, I added some more comments.



/*********************************************************\
 *  The entries below are in German only
\*********************************************************/



>> 26.11.2010
[CO]
- SceneRendererTool: "GetPassAttribute()" gibt nun die "DynVar"-Instanz zurück da universeller, "SetPassAttribute()" lasse ich drinnen
  da noch einen Tick einfacher zu nutzen wenn man nur anhand eines Strings setzen will. :D
- SceneRendererTool: Weitere Methode "SetAttribute()" hinzugefügt die ALLE Szene Renderer Schritte durchschaut und alle Attribute mit
  gegebenen Name auf den gegebenen Wert setzt - praktisch wenn es einen z.B. nur interessiert die "AmbientColor" zu setzen, aber NICHT
  welche Szene Renderer Schritte alle eine "AmbientColor"-Variable besitzen.
- SceneRendererTool: Weitere Methode "SetValues()" hinzugefügt, dies stellt den "ultimativen Luxus" da - man gibt einfach z.B.
  "ColorClear=\"0 0 0 0\" AmbientColor=\"0.2 0.2 0.2\"" rein und alles weitere braucht einen nicht zu Interessieren
- SceneRendererTool: Weitere Methode "SetDefaultValues()" hinzugefügt, setzt die Attribute aller Szene Renderer Schritte auf
  ihre Default-Werte



>> 20.11.2010
[CO]
- "WindowConnection::SetFullscreen()": Wenn ein Fenster maximiert ist, und man nun in den Vollbild-Modus wechselt sah man die Titel-Leiste
  des Fensters, daher schalte ich nun in diesem Fall das Fenster zuerst zurück in den Normal-Modus (nach Vollbild-Modus ist
  das ohnehin anschließend im Normal-Modus)



>> 16.11.2010
[CO]
- "SceneRendererTool"-Klasse hinzugefügt und "BasicSceneApplication::GetSceneRendererTool()"-Methode hinzugefügt über die sich eine
  Instanz dieser Helferlein-Klasse erfragen lässt. "SceneRendererTool" dient dazu den Zugriff auf Scene Renderer Einstellungen etwas
  zu vereinfachen - da in PL alles recht flexibel und universell gehalten ist, kann schonmal der Zugriff etwas komplizierter werden.
  Im "Normallfall" kann man nun über "GetSceneRendererTool().SetPassAttribute("BackgroundBitmap", "Material", "Data/Textures/Background.dds");"
  direkt ein Hintergrundbild setzen - das ist natürlich nicht für alle erdenkbaren Anwendungstypen und Scene Renderer zusammenstellungen,
  aber die Application-Klassen sind ohnehin dazu da "bestimmte Anwendungsfälle zu Modellieren und hier eine besonderst einfache Nutzung zu
  ermöglichen". Als Namen habe ich bewusst "SceneRendererTool" und nicht "SceneRenderer" gewählt damit es keine Namenskonflikte mit
  "PLScene::SceneRenderer" geben kann und/oder verwirrungen.



>> 23.10.2010
[CO]
- "SceneApplication::OnInputControllerFound()": Weiterer Refactoring-Schritt betreffend Umstellung auf Virtuelle Input Controller...
  in "OnInputControllerFound()" wird nur noch "pInputController->ConnectAll()" aufgerufen welches nur noch anhand bekannter
  Control-Namen "mapped"



>> 15.10.2010
[CO]
- Wie mit Stefan vor einigen Tagen bespochen, "SceneApplication" um "OnInputControllerFound()" Methode erweitert. Diese Methode wird
  standardmäßig über das neue "PLScene::SceneContext::EventInputControllerFound"-Ereigniss aufgerufen. In dieser Methode findet die
  ganz konkrete Zuweisung von Controls zu Virtual Controls statt.



>> 20.08.2010
[CO]
- GUI Nachrichten werden nicht mehr direkt in "RenderApplication::Main()" verarbeitet sondern nun in "RenderApplication::Update(" -
  Hintergrund ist, das z.B. beim Laden einer Szene Events gefeuert werden, eine Anwendung kann dann "Update" aufrufen damit der
  Fensterinhalt aktualisiert wird und man z.B. den aktuellen Ladefortschritt sehen kann... und hier sollte natürlich dann auch
  das GUI mitaktualisiert werden, damit mit müssten die GUI & Ladebildschirm Probleme behoben sein.
  (... und man kann nun auch direkt beim Ladebildschirm bereits über Alt-Return den Vollbildmodus wechseln...)



>> 19.08.2010
[CO]
- "ModTrapMouse" Widget Modifier hinzugefügt und dafür das fest eingebaute "RenderWindow::OnActivate" entfernt.
  "RenderApplication::OnCreateMainWindow()" fügt automatisch diesen Modifier hinzu so das das Standardverhalten unangetastet bleibt,
  ich als Benutzer habe nun aber die Möglichkeit habe diese Verhalten zu verändern um es flexibel den jeweiligen Projektanforderungen
  anpassen zu können.
- Bugfix: "WindowConnection::SetDisplayMode()": Ein wechseln von Vollbild in einen anderen Vollbildmodus klappte bisher nicht ganz korrekt
  da die Widget größe nicht korrekt angepasst wurde



>> 08.08.2010
[SB]
- RenderApplication: EventHandler hinzugefügt, der darüber informiert wird, wenn das Hauptfenster aktiviert oder
  deaktiviert wird. Dies wird dann dazu verwendet, um den VirtualInputController zu deaktivieren, solange das
  Hauptfenster nicht aktiv ist. Dadurch ist nun endlich das Problem gelöst, dass die Steuerung der Applikation auch
  im Hintergrund weitergeht, obwohl man zwischenzeitlich den Task wechselt und z.B. in einem ExplorerFenster arbeitet.
  Dies war sehr nervig und ist auch vielen negativ aufgefallen. In Zukunft könnte man das noch erweitern, und in
  bestimmten Applikationen (z.B. Spielen) gleich komplett auf "Pause" schalten, wenn das Fenster deaktiviert wurde.



>> 07.08.2010
[SB]
- RenderApplication: Es wird nun ein virtueller Input-Controller erzeugt, der für die Steuerung der Applikation verwendet
  werden kann.
- SceneApplication: Der virtuelle Input-Controller wird automatisch beim SceneContext angemeldet.



>> 06.08.2010
[SB]
- Neue Tool-Klasse Screenshot erstellt und die Funktionalität aus BasicSceneApplication dort hinein kopiert.
  In BasicScreenApplication wird diese Klasse nun auch gleich instanziiert und kann über die Methode
  GetScreenshotTool() abgerufen werden. So kann die Funktionalität auch ohne diese Basisklasse verwendet
  werden, einzig die verwendeten RendererContext und SurfacePainter müssen dann von außen gesetzt werden.
- BasicSceneApplication: Der Screenshot-Pfad wird nun beim Initialisieren gesetzt, und zwar auf das Datenverzeichnis,
  falls m_bMultiUser aktiviert ist, ansonsten auf das aktuelle Verzeichnis.



>> 05.08.2010
[SB]
- SampleApplication entfernt, da das leider niemals implementiert und verwendet wurde.
- RenderApplication2 auf Basis der neuen Application-Basisklassen erstellt.
- SceneApplication2 auf Basis der neuen Application-Basisklassen erstellt.
- BasicSceneApplication2 auf Basis der neuen Application-Basisklassen erstellt.



>> 04.08.2010
[CO]
- RenderWindow-Konstruktor: Hier wurde vergessen "SetWindowState(StateFullscreen)" aufzurufen wenn ein Fenster direkt im Vollbild-Modus
  starten soll... und dann sah man gar nichts. Ich hatte erstmal das schlimmste Befürchtet, aber das es nun doch nur soetwas kleines war,
  Schwein gehabt. *g*



>> 01.08.2010
[SB]
- Config und Gui-Klassen (Widgets und Windows) aus Application in eigene Verzeichnisse verschoben. Das Application-Framework
  ist wie ich finde ein sehr wichtiger Bestandteil der Engine, der so sauber und einfach wie möglich gehalten sein sollte,
  damit man da überhaupt noch durchblicken kann. Deswegen bitte nicht noch weitere Dinge in die Application-Verzeichnisse
  hineinschieben, die nicht wirklich ganz eng dazu gehören (über Config hätte man reden können, aber die Gui-Klassen
  sind ganz klar eigenständige Komponenten)



>> 26.07.2010
[CO]
- BasicSceneApplication: Kameras die gerade nicht verwendet werden, werden nun direkt komplett deaktiviert statt nur "Eingefrohren" -
  so wird z.B. auch eine Physik-Sphere die um eine Kamera liegt mit deaktiviert... kommt etwas dumm wenn man dann mit einer anderen
  Kamera gegen unsichtbare Konkurenz-Kameras prallt. *g*



>> 14.07.2010
[CO]
- Altes PLEngine Projekt in PLScene umbenannt
- Neues PLEngine Projekt angelegt, hier fließen alle Fäden zusammen
- Application Framework Klassen aus PLScene nach PLEngine verschoben
- Die Picking-Klassen liegen nun in einem eigenen Ordner
