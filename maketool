#!/usr/bin/env perl


#*********************************************************#
#*  File: maketool                                       *
#*
#*  Copyright (C) 2002-2011 The PixelLight Team (http://www.pixellight.org/)
#*
#*  This file is part of PixelLight.
#*
#*  PixelLight is free software: you can redistribute it and/or modify
#*  it under the terms of the GNU Lesser General Public License as published by
#*  the Free Software Foundation, either version 3 of the License, or
#*  (at your option) any later version.
#*
#*  PixelLight is distributed in the hope that it will be useful,
#*  but WITHOUT ANY WARRANTY; without even the implied warranty of
#*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#*  GNU Lesser General Public License for more details.
#*
#*  You should have received a copy of the GNU Lesser General Public License
#*  along with PixelLight. If not, see <http://www.gnu.org/licenses/>.
#*********************************************************#

use File::Path;
use Cwd;

# Move into script-directory
$dir=`dirname "$0"`;
chomp($dir);
chdir($dir);

# Variables
my $command;			# Maketool command
my $baseDir = $dir;		# Base directory
my $binDir;				# Bin directory
my $buildDir;			# Build directory
my $buildType;			# Build type ("Debug"/"Release")
my $buildSystem;		# Build system
my $buildArch;			# Build system architecture
my $buildBitsize;		# Build system bitsize (32 or 64?)
my $buildMobile;		# Build mobile version? ("1"/"0")
my $buildToolchain;		# Toolchain (usually empty except for cross-compiling)
my $buildNightly;		# Project nightly ("1"/"0")
my $buildSuffix; 		# Project suffix
my $buildSuffixSet; 	# Suffix set?
my $buildSysLibs;		# Use system libraries ("1"/"0")?
my $buildExternalURL;	# URL to externals repository ("" for default)
my $buildExternalUser;	# Username for access to restricted externals
my $buildExternalPass;	# Password for access to restricted externals
my $buildMinimal;		# Build minimal projects ("1"/"0")?
my $buildCodeBlocks;	# Create Code::Blocks project?

# Get system
if ( ($^O eq "MSWin32") || ($^O eq "cygwin") ) {
	# Windows
	$buildSystem = "Windows";
} elsif ($^O eq "linux") {
	# Linux
	$buildSystem = "Linux";
} elsif ($^O eq "darwin") {
	# Apple
	$buildSystem = "Apple";
} else {
	# Unsupported OS
	print("Unsupported OS detected: '$^O'. Sorry.");
	exit;
}

# Get current directory
$baseDir = &Cwd::cwd();

sub Setup {
	# Create build-directory
	print("Creating build environment for '$buildType'\n");
	if (! -d $buildDir) { mkdir($buildDir); }

	# Print options
	print("-- Directory    = '$buildDir'\n");
	print("-- BuildType    = '$buildType'\n");
	print("-- Toolchain    = '$buildToolchain'\n");
	print("-- Architecture = '$buildArch'\n");
	print("-- Bitsize      = '$buildBitsize'\n");
	print("-- Mobile       = '$buildMobile'\n");
	print("-- Nightly      = '$buildNightly'\n");
	print("-- Suffix       = '$buildSuffix'\n");
	print("-- SysLibs      = '$buildSysLibs'\n");
	print("-- ExternalURL  = '$buildExternalURL'\n");
	print("-- ExternalUser = '$buildExternalUser'\n");
	print("-- Minimal      = '$buildMinimal'\n");
	print("\n");

	# Call CMake
	chdir($buildDir);
	my $cmake;
	if ($buildCodeBlocks   ==  1) { $cmake = "cmake -G \"CodeBlocks - Unix Makefiles\""; }
	else						  { $cmake = "cmake -G \"Unix Makefiles\""; }
	$cmake .=  " -DCMAKE_BUILD_TYPE=\"$buildType\" -DCMAKETOOLS_CONFIG_NIGHTLY=\"$buildNightly\"";
	if ($buildToolchain    ne "") { $cmake .= " -DCMAKE_TOOLCHAIN_FILE=\"$baseDir/cmake/Toolchains/Toolchain-" . $buildToolchain . ".cmake\""; }
	if ($buildArch         ne "") { $cmake .= " -DCMAKETOOLS_TARGET_ARCH=\"$buildArch\""; }
	if ($buildBitsize      ne "") { $cmake .= " -DCMAKETOOLS_TARGET_BITSIZE=\"$buildBitsize\""; }
	if ($buildMobile       ==  1) { $cmake .= " -DPL_MOBILE=\"1\""; }
	if ($buildSuffixSet    ==  1) { $cmake .= " -DCMAKETOOLS_CONFIG_SUFFIX=\"$buildSuffix\""; }
	if ($buildSysLibs      ==  1) { $cmake .= " -DCMAKETOOLS_USE_SYSTEM_LIBS=\"$buildSysLibs\""; }
	if ($buildExternalURL  ne "") { $cmake .= " -DPL_EXTERNAL_REPOSITORY=\"$buildExternalURL\""; }
	if ($buildExternalUser ne "") { $cmake .= " -DPL_EXTERNAL_USER=\"$buildExternalUser\""; }
	if ($buildExternalPass ne "") { $cmake .= " -DPL_EXTERNAL_PASS=\"$buildExternalPass\""; }
	if ($buildMinimal      ==  1) { $cmake .= " -DCMAKETOOLS_MINIMAL=\"$buildMinimal\" -DPL_NATIVE_PLPROJECT=\"0\""; }

	$cmake .= " ..";
	print("Running CMake ...\n");
	system($cmake);
	chdir("..");
	print("\n");
}

sub Build {
	# Setup first
	if (! -d $buildDir) { Setup(); }

	# Run make
	print("Building '$buildType'\n");
	chdir($buildDir);
	system("make");
	chdir("..");
	print("\n");
}

sub BuildDocs {
	# Setup first
	if (! -d $buildDir) { Setup(); }

	# Run make Docs
	print("Building Docs for '$buildType'\n");
	chdir($buildDir);
	system("make Docs");
	chdir("..");
	print("\n");
}

sub BuildPacks {
	# Setup, build and build docs first
	if (! -d $buildDir) { Setup(); }
	Build();

	# Run make Pack
	print("Building Packs for '$buildType'\n");
	chdir($buildDir);
	system("make Pack");
	chdir("..");
	print("\n");
}

sub BuildExperimental{
	# Setup
	if (! -d $buildDir) { Setup(); }

	# Run make Experimental
	print("Experimental build for '$buildType'\n");
	chdir($buildDir);
	system("make Experimental");
	chdir("..");
	print("\n");
}

sub BuildNightly {
	# Setup
	if (! -d $buildDir) { Setup(); }

	# Run make Nightly
	print("Nightly build for '$buildType'\n");
	chdir($buildDir);
	system("make Nightly");
	chdir("..");
	print("\n");
}

sub Upload {
	# Upload built packages
	print("Uploading built packages from '$buildType'\n");
	chdir($buildDir);
	system("make Upload");
	chdir("..");
	print("\n");
}

sub Clean {
	# Delete build-directory
	print("Cleaning build environment for '$buildType'\n");
	if (-d $buildDir) {
		rmtree($buildDir);
	}

	# Delete bin-directory
	print("Cleaning bin directory '$binDir'\n");
	if (-d $binDir) {
		rmtree($binDir);
	}
}


# Move into script directory

# Initialize
$command   = "";
$buildType = "Debug";
$buildToolchain = "";
$buildArch = "";
$buildBitsize = "";
$buildMobile = 0;
$buildNightly = "0";
$buildSuffixSet = 0;
$buildSysLibs = 0;
$buildMinimal = 0;
$buildExternalURL  = "";
$buildExternalUser = "";
$buildExternalPass = "";
$buildCodeBlocks = 0;

# Read password from user file
$filename = $ENV{HOME} . "/pl_config.cfg";
if (-e $filename) {
	print("Using auth config from '$filename'\n");
	our $pl_external_url;
	our $pl_external_user;
	our $pl_external_pass;
	do $filename;
	$buildExternalURL  = $pl_external_url;
	$buildExternalUser = $pl_external_user;
	$buildExternalPass = $pl_external_pass;
}

# Parse parameters
$numArgs = @ARGV;
for ($i=0; $i<$numArgs; $i++) {
	if ($ARGV[$i] eq "--debug" || $ARGV[$i] eq "-d") {
		$buildType = "Debug";
	} elsif ($ARGV[$i] eq "--release" || $ARGV[$i] eq "-r") {
		$buildType = "Release";
	} elsif ($ARGV[$i] eq "--nightly" || $ARGV[$i] eq "-N") {
		$buildType = "Release";
		$buildNightly = "1";
	} elsif ($ARGV[$i] eq "--toolchain" || $ARGV[$i] eq "-tc") {
		$buildToolchain = $ARGV[$i+1];
		$i++;
	} elsif ($ARGV[$i] eq "--arch") {
		$buildArch = $ARGV[$i+1];
		$i++;
	} elsif ($ARGV[$i] eq "--bitsize" || $ARGV[$i] eq "-bs") {
		$buildBitsize = $ARGV[$i+1];
		$i++;
	} elsif ($ARGV[$i] eq "--32") {
		$buildBitsize = "32";
	} elsif ($ARGV[$i] eq "--64") {
		$buildBitsize = "64";
	} elsif ($ARGV[$i] eq "--syslibs") {
		$buildSysLibs = 1;
	} elsif ($ARGV[$i] eq "--mobile") {
		$buildMobile = 1;
	} elsif ($ARGV[$i] eq "--minimal") {
		$buildMinimal = 1;
	} elsif ($ARGV[$i] eq "--suffix" || $ARGV[$i] eq "-s") {
		$buildSuffix = $ARGV[$i+1];
		$buildSuffixSet = 1;
		$i++;
	} elsif ($ARGV[$i] eq "--externals") {
		$buildExternalURL = $ARGV[$i+1];
		$i++;
	} elsif ($ARGV[$i] eq "--username" || $ARGV[$i] eq "--user" || $ARGV[$i] eq "-u") {
		$buildExternalUser = $ARGV[$i+1];
		$i++;
	} elsif ($ARGV[$i] eq "--password" || $ARGV[$i] eq "--pass" || $ARGV[$i] eq "-p") {
		$buildExternalPass = $ARGV[$i+1];
		$i++;
	} elsif ($ARGV[$i] eq "--codeblocks" || $ARGV[$i] eq "--cb") {
		$buildCodeBlocks = 1;
	} elsif ($i == 0) {
		$command = $ARGV[0];
	} else {
		print("Unknown parameter \'$ARGV[$i]\'\n")
	}
}

# Set build directory
$buildDir = "build-$buildType";
if ($buildToolchain ne "") { $buildDir .= "-" . $buildToolchain; }

# Set bin directory
$binDir = "Bin-$buildSystem";
if ($buildToolchain ne "") { $binDir .= "-" . $buildToolchain; }

# Execute command
if ($command eq "setup") {
	# Setup build
	Setup();
} elsif ($command eq "build" || $command eq "make") {
	# Build target
	Build();
} elsif ($command eq "doc" || $command eq "docs") {
	# Build targets
	BuildDocs();
} elsif ($command eq "pack") {
	# Build targets
	BuildPacks();
} elsif ($command eq "experimental") {
	# Experimental build
	BuildExperimental();
} elsif ($command eq "nightly") {
	# Nightly build
	Clean();
	BuildNightly();
	BuildPacks();
	Upload();
} elsif ($command eq "upload") {
	# Upload packages
	Upload();
} elsif ($command eq "clean") {
	# Clean targets
	Clean();
} else {
	# Unknown command
	print("unknown command\n");
}
